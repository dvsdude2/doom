#+title: Myelsum Layout Test


* ;;;; my elfeed-summary config template
:PROPERTIES:
:HEADER-ARGS: :padline no :tangle yes
:VISIBILITY: children
:org-src-tab-acts-natively: nil
:END:


** lexical-binding

#+begin_src emacs-lisp
;;; myrepo/elfeed-summary-layout/+elfeed-summary-settings.el  -*- lexical-binding: t -*-
;;
#+end_src

** commentary

#+begin_src emacs-lisp
;;; Commentary:
;; separate file for layout config. makes more sense for editing.
;;
#+end_src

** setq elfeed-summary-settings

#+begin_src emacs-lisp
;;; Code:

(setq elfeed-summary-settings
#+end_src

** today

#+begin_src emacs-lisp
      '((group (:title . "today")
         (:elements
          (search
           (:filter . "@1-day-ago")
           (:title . ""))))
#+end_src

** daily

#+begin_src emacs-lisp
        (group (:title . "Daily")
               (:elements
                (query . day))
               (:hide t))
#+end_src

** search-days [title]

#+begin_src emacs-lisp
        (group (:title . "searches Days")
               (:elements
#+end_src

*** 2-days-ago
#+begin_src emacs-lisp
                (group
                 (:title . "2 days")
                 (:elements
                  (search
                   (:filter . "@2-day-ago")
                   (:title . "")))
                 (:hide t))
#+end_src

*** 3-days-ago
#+begin_src emacs-lisp
                (group
                 (:title . "3 days")
                 (:elements
                  (search
                   (:filter . "@3-day-ago")
                   (:title . "")))
                 (:hide t))
#+end_src


*** 4-days-ago
#+begin_src emacs-lisp
                (group
                 (:title . "4 days")
                 (:elements
                  (search
                   (:filter . "@4-day-ago")
                   (:title . "")))
                 (:hide t))
#+end_src

*** 1-week-ago
#+begin_src emacs-lisp
                (group
                 (:title . "1 week")
                 (:elements
                  (search
                   (:filter . "@7-day-ago")
                   (:title . "")))
                 (:hide t))
#+end_src
*** 2-weeks-ago
#+begin_src emacs-lisp
                (group
                 (:title . "2 weeks")
                 (:elements
                  (search
                   (:filter . "@2-weeks-ago")
                   (:title . "")))
                 (:hide t))
#+end_src

*** 3-weeks-ago
#+begin_src emacs-lisp
                (group
                 (:title . "3 weeks")
                 (:elements
                  (search
                   (:filter . "@3-weeks-ago")
                   (:title . "")))
                 (:hide t))
#+end_src

*** 1-month-ago
#+begin_src emacs-lisp
                (group
                 (:title . "1 month")
                 (:elements
                  (search
                   (:filter . "@1-month-ago")
                   (:title . "")))
                 (:hide t))
#+end_src

*** 2-month-ago
#+begin_src emacs-lisp
                (group
                 (:title . "2 months")
                 (:elements
                  (search
                   (:filter . "@2-month-ago")
                   (:title . "")))
                 (:hide t))
#+end_src

*** 6-months-ago
#+begin_src emacs-lisp
                (group
                 (:title . "6 months")
                 (:elements
                  (search
                   (:filter . "@6-months-ago +unread")
                   (:title . "+unread"))
                  (search
                   (:filter . "@6-months-ago")
                   (:title . "+all")))))
               (:hide t))
        ;; ...
#+end_src

** starred
#+begin_src emacs-lisp

        ;; ...
        (group (:title . "stared")
               (:elements
                (search
                 (:filter . "+star")
                 (:title . "")))
               (:hide t))
#+end_src

** videos [title]
#+begin_src emacs-lisp
        (group (:title . "Videos")
               (:elements
#+end_src

*** truth
#+begin_src emacs-lisp
                (group
                 (:title . "truth")
                 (:elements
                  (query . (and vid truth)))
                 (:hide t))
#+end_src

*** humor
#+begin_src emacs-lisp
                (group
                 (:title . "humor")
                 (:elements
                  (query . (and vid fun)))
                 (hide t))
#+end_src
*** real
#+begin_src emacs-lisp
                (group
                 (:title . "real")
                 (:elements
                  (query . (and vid real)))
                 (hide t))
#+end_src

*** history
#+begin_src emacs-lisp
                (group
                 (:title . "history")
                 (:elements
                  (query . (and vid hist)))
                 (hide t))
#+end_src

*** emacs
#+begin_src emacs-lisp
                (group
                 (:title . "emacs")
                 (:elements
                  (query . (and vid emacs)))
                 (hide t))
#+end_src

*** websites
#+begin_src emacs-lisp
                (group
                 (:title . "websites")
                 (:elements
                  (query . (and vid web)))
                 (hide t))
#+end_src

*** youtube
#+begin_src emacs-lisp
                (group
                 (:title . "youtube")
                 (:elements
                  (query . (and vid yt)))
                 (:hide t))
#+end_src

*** odysee
#+begin_src emacs-lisp
                (group
                 (:title . "odysee")
                 (:elements
                  (query . (and vid odys)))
                 (:hide t))
#+end_src

*** bitchute
#+begin_src emacs-lisp
                (group
                 (:title . "bitchute")
                 (:elements
                  (query . (and vid bit)))))
               (:hide t))
#+end_src

** forums
#+begin_src emacs-lisp
        (group (:title . "forums")
               (:elements
                (query . forum))
               (:hide t))
#+end_src

** humor
#+begin_src emacs-lisp
        (group (:title . "Humor")
               (:elements
                (query . fun))
               (:hide t))
#+end_src

** repos
#+begin_src emacs-lisp
        (group (:title . "Repos")
               (:elements
                (query . github))
               (:hide t))
#+end_src

** doom
#+begin_src emacs-lisp
        (group (:title . "Doom")
               (:elements
                (query . doom))
               (:hide t))
#+end_src

** emacs
#+begin_src emacs-lisp
        (group (:title . "Emacs")
               (:elements
                (query . emacs))
               (:hide t))
#+end_src

** linux
#+begin_src emacs-lisp
        (group (:title . "Linux")
               (:elements
                (query . linux))
               (:hide t))
#+end_src

** corbett
#+begin_src emacs-lisp
        (group (:title . "Corbett")
               (:elements
                (query . corbett))
               (:hide t))
#+end_src

** science
#+begin_src emacs-lisp
        (group (:title . "science")
               (:elements
                (query . sci))
               (:hide t))
#+end_src

** substack
#+begin_src emacs-lisp
        (group (:title . "Substack")
               (:elements
                (query . sub))
               (:hide t))
#+end_src

** searches all [title]
#+begin_src emacs-lisp
        (group (:title . "searches all")
               (:elements
#+end_src

*** ungrouped
:PROPERTIES:
:org-src-tab-acts-natively: nil
:END:
#+begin_src emacs-lisp
                (group
                 (:title . "ungrouped")
                 (:elements :misc))))))


(provide '+elfeed-summary-settings)

;;; +elfeed-summary-settings.el ends here
#+end_src

