#+title:          Doom Emacs config.org'
:PROPERTIES:
:created: 2021-12-27
#+AUTHOR: dvsdude
#+startup: noindent
#+ARCHIVE: ~/org/wiki/config-change-log.org::** blocks removed
#+AUTHOR: dvsdude
:END:

    #+begin_export ascii
    ==================================================================================
    #     .___                  .___          .___    "Welcome to my â˜ DOOM n'DIRE!â˜ 
    #   __| _/___  __ ______  __| _/__ __   __| _/ ____
    #  / __ | \  \/ //  ___/ / __ ||  |  \ / __ |_/ __ \   tis the only thing
    # / /_/ |  \   / \___ \ / /_/ ||  |  // /_/ |\  ___/   that fills the desire..ðŸ”¥"
    # \____ |   \_/ /____  >\____ ||____/ \____ | \___  >
    #      \/            \/      \/            \/     \/
    #  â˜ A DASTARDLY DVS DOOM CONFIGâ˜ 
    ==================================================================================
    #+end_export

** MY  â˜ DEADLYâ˜   DOOM CONFIG

[[/splash/doom-emacs-slant-out-color.png]]
*** description

[[/splash/screenshot2.png]]



** ;;;; my deadly doom CONFIGâ˜  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


** ;;;; the lexical-binding ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

** ;;;; name ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; Some functionality uses this to identify you
(setq user-full-name "dvsdude"
      user-mail-address "john@doe.com")
#+end_src

** ;;;; package management ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; add packages manually by downloading the repo

;; spray
;; (add-to-list 'load-path "~/builds/manual-packages/spray")

;; Corfu-extensions to load path
(add-to-list 'load-path
               (expand-file-name "~/.config/emacs/.local/straight/repos/corfu/extensions"))

;; (load "~/.config/doom/myrepo/+config/+config.el")
#+end_src

** ;;;; FONTS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; fontset ;;;;
(setq doom-font (font-spec :family "Hack Nerd Font" :size 17 :weight 'bold)
;; (setq doom-font (font-spec :family "Iosevka" :size 17 :weight 'heavy)
      doom-variable-pitch-font (font-spec :family "DroidSansMono Nerd Font" :size 17)
      ;; doom-variable-pitch-font (font-spec :family "Iosevka" :size 18)
      ;; doom-unicode-font (font-spec :family "DejaVu Sans Mono")
      doom-symbol-font (font-spec :family "DroidSansMono Nerd Font")
      doom-big-font (font-spec :family "Hack Nerd Font" :size 24 :weight 'bold))

(set-fontset-font t 'emoji
                      '("My New Emoji Font" . "iso10646-1") nil 'prepend)

#+end_src

** ;;;; theme ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; (setq doom-theme 'doom-one)
(setq doom-theme 'doom-Iosvkem)
#+end_src

** ;;;; startup settings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; hl line mode
(global-hl-line-mode +1)
;; no fringe
(set-fringe-mode 0)
;; this should help with paging in which-key
(setq which-key-use-C-h-commands t)
;; save last place edited & update bookmarks
(save-place-mode 1)
(setq save-place-file "~/.config/doom/saveplace")
(setq save-place-forget-unreadable-files nil)
(setq bookmark-save-flag t)
;; line number type
;; (setq display-line-numbers-type 'visual)
(setq display-line-numbers-type nil)
;; should put  focus in the new window ;;;;
(setq evil-split-window-below t
      evil-vsplit-window-right t)
;; set fancy splash-image
(setq fancy-splash-image "~/.config/doom/splash/doom-color.png")
;; set org-directory. It must be set before org loads
(setq org-directory "~/org/")
;; number of lines of overlap in page flip ;;;;
(setq next-screen-context-lines 7)
;; use trash
(setq trash-directory "~/.local/share/Trash/files/")
(setq delete-by-moving-to-trash t)
;; lazy-load agenda-files
(setq org-agenda-inhibit-startup t)
;; ignore-case
(setq read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t
      completion-ignore-case t)
;; set scratch buffer mode
(setq doom-scratch-initial-major-mode 'org-mode)
;; gives isearch total number of matches
(setq-default isearch-lazy-count t)
;; move mouse out of the way
(mouse-avoidance-mode t)
(setq mouse-avoidance-mode "banish")
;; dictionary server ;;;;
(setq dictionary-server "dict.org")
;; Maximize the window upon startup
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
;;;  "Syntax color, highlighting code colors ;;;;
(add-hook 'prog-mode-hook #'rainbow-mode)
;; Sensible line breaking
(add-hook 'text-mode-hook 'visual-line-mode)
;; automatic chmod +x when you save a file with a #! shebang
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
;; get ediff to unfold everthing before
(with-eval-after-load 'outline
   (add-hook 'ediff-prepare-buffer-hook #'org-fold-show-all))

(when (display-graphic-p)
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z")))
#+end_src

** ;;;; Dashboard ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[[https://github.com/emacs-dashboard/emacs-dashboard][GitHub - emacs-dashboard]]

#+begin_src emacs-lisp
(use-package dashboard
  :demand t
  :custom
  (dashboard-startup-banner (concat  "~/.config/doom/splash/doom-color.png"))
  (dashboard-banner-logo-title "Welcome to my â˜ 'DOOM n'DIRE!â˜  tis the only thing that fills the desire.ðŸ”¥")
  (dashboard-center-content t)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-init-info t)
  (dashboard-set-navigator t)
  (dashboard-navigator-buttons
   `(
     ((,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-rss_square" :height 1.0 :face 'font-lock-keyword-face))
       "elfeed"
       "open elfeed"
       (lambda (&rest _) (=rss)))
      (,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-book" :height 1.0 :face 'font-lock-keyword-face))
       "journal"
       "journal new entry"
       (lambda (&rest _) (org-journal-new-entry nil)))
      (,(and (display-graphic-p)
             (nerd-icons-codicon "nf-cod-settings" :height 1.0 :face 'font-lock-keyword-face))
       "config"
       "open config"
       ;;(lambda (&rest _) (+workspace/load "config")))
       (lambda (&rest _) (=config)))
      (,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-calendar" :height 1.0 :face 'font-lock-keyword-face))
       "calendar"
       "calendar"
       (lambda (&rest _) (=calendar)))
      (,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-tasks" :height 1.0 :face 'font-lock-keyword-face))
       "agenda"
       "agenda all todos"
       (lambda (&rest _) (org-agenda nil "n")))
      (,(and (display-graphic-p)
             (nerd-icons-mdicon "nf-md-restore" :height 1.0 :face 'font-lock-keyword-face))
       "restart"
       "restar emacs"
       (lambda (&rest _) (restart-emacs))))))
  :config
  (setq dashboard-items '((recents . 7)
                          (bookmarks . 6)
                          (agenda . 3))))

;; this is for use with emacsclient
(setq initial-buffer-choice (lambda() (dashboard-refresh-buffer)(get-buffer "*dashboard*")))
#+end_src

** ;;;; +doom-dashboard ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(add-to-list '+doom-dashboard-menu-sections
             '("Add journal entry"
               :icon (nerd-icons-faicon "nf-fa-calendar" :face 'doom-dashboard-menu-title)
               :when (modulep! :lang org +journal)
               :face (:inherit (doom-dashboard-menu-title bold))
               :action org-journal-new-entry))

(add-to-list '+doom-dashboard-menu-sections
             '("open elfeed"
               :icon (nerd-icons-faicon "nf-fa-rss_square" :face 'doom-dashboard-menu-title)
               :when (modulep! :app rss +org)
               :face (:inherit (doom-dashboard-menu-title bold))
               :action =rss))

#+end_src
** ;;;; dired ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; use open window for default target
(setq dired-dwim-target t)

;; (add-hook 'dired-mode-hook
;;           'display-line-numbers-mode)
(add-hook 'dired-mode-hook
          'dired-hide-details-mode)

;;; dired preview set to toggle, can be auto
(after! dired
  (use-package! dired-preview))
;;     :hook
;;     (dired-mode . dired-preview-mode)))
;; (dired-preview-global-mode 1)

(map! :leader
      :prefix "t"
      :desc "dired preview mode" "p" 'dired-preview-mode)

;;; dired subtree
(use-package! dired-subtree
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))

;; dired open
(after! dired
  (use-package! dired-open
    :config
    (setq dired-open-extensions '(("mkv" . "mpv")
                                  ("mp4" . "mpv")
                                  ("webm" . "mpv")))))
#+end_src

** ;;;; deft ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

deft
#+begin_src emacs-lisp
(use-package! deft
  :commands deft
  :init
  (setq deft-default-extension "org"
        deft-directory "~/org/"
        ;; de-couples filename and note title:
        deft-use-filename-as-title t
        deft-use-filter-string-for-filename t
        deft-recursive t
        ;; disable auto-save
        deft-auto-save-interval -1.0
        ;; converts the filter string into a readable file-name using kebab-case:
        deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase))
        deft-strip-summary-regexp
      (concat "\\("
          "[\n\t]" ;; blank
          "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
          "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
          "\\)"))
  :config
  (add-to-list 'deft-extensions '("md" "txt" "tex" "org"))
  (add-hook 'deft-mode-hook #'doom-mark-buffer-as-real-h)
  ;; start filtering immediately
  (set-evil-initial-state! 'deft-mode 'insert)
  (map! :map deft-mode-map
        :n "gr"  #'deft-refresh
        :n "C-s" #'deft-filter
        :i "C-n" #'deft-new-file
        :i "C-m" #'deft-new-file-named
        :i "C-d" #'deft-delete-file
        :i "C-r" #'deft-rename-file
        :n "r"   #'deft-rename-file
        :n "a"   #'deft-new-file
        :n "A"   #'deft-new-file-named
        :n "d"   #'deft-delete-file
        :n "D"   #'deft-archive-file
        :n "q"   #'kill-current-buffer))

#+end_src
** ;;;; spell ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][Spelling (GNU Emacs Manual)]]
[[https://github.com/d12frosted/flyspell-correct][GitHub - flyspell-correct]]

|---------------------------+-------|
| go-to-next-error          | C-,   |
| auto-correct-word         | C-.   |
| correct-wrapper           | C-;   |
| auto-correct-word         | C-M-i |
| correct-word-before-point | C-c $ |
| correct-word-before-point | z =   |
| add word                  | z g   |
| remove word               | z w   |
|---------------------------+-------|

fly-spell
#+begin_src emacs-lisp
;; (use-package flyspell-correct
;;   :after flyspell
;;   :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

;; (define-key! flyspell-mode-map "C-;" #'flyspell-correct-wrapper)
(define-key! [remap flyspell-auto-correct-previous-word] #'flyspell-correct-wrapper)

(setq flyspell-persistent-highlight nil)

(setq flyspell-issue-message-flag nil)

(setq ispell-personal-dictionary "/home/dvsdude/.aspell.en_CA.pws")
(setq ispell-program-name "aspell")
(setq ispell-extra-args '("--repl" "~/aspell.prepl"))
#+end_src

** ;;;; Doom-pdf-tools ;;;; mod-config ;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp :tangle no
(use-package! pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :init
  (after! pdf-annot
    (defun +pdf-cleanup-windows-h ()
      "Kill left-over annotation buffers when the document is killed."
      (when (buffer-live-p pdf-annot-list-document-buffer)
        (pdf-info-close pdf-annot-list-document-buffer))
      (when (buffer-live-p pdf-annot-list-buffer)
        (kill-buffer pdf-annot-list-buffer))
      (let ((contents-buffer (get-buffer "*Contents*")))
        (when (and contents-buffer (buffer-live-p contents-buffer))
          (kill-buffer contents-buffer))))
    (add-hook! 'pdf-view-mode-hook
      (add-hook 'kill-buffer-hook #'+pdf-cleanup-windows-h nil t)))

  :config
  (defadvice! +pdf--install-epdfinfo-a (fn &rest args)
    "Install epdfinfo after the first PDF file, if needed."
    :around #'pdf-view-mode
    (if (and (require 'pdf-info nil t)
             (or (pdf-info-running-p)
                 (ignore-errors (pdf-info-check-epdfinfo) t)))
        (apply fn args)
      ;; If we remain in pdf-view-mode, it'll spit out cryptic errors. This
      ;; graceful failure is better UX.
      (fundamental-mode)
      (message "Viewing PDFs in Emacs requires epdfinfo. Use `M-x pdf-tools-install' to build it")))

  ;; Despite its namesake, this does not call `pdf-tools-install', it only sets
  ;; up hooks, auto-mode-alist/magic-mode-alist entries, global modes, and
  ;; refreshes pdf-view-mode buffers, if any.
  ;;
  ;; I avoid calling `pdf-tools-install' directly because `pdf-tools' is easy to
  ;; prematurely load in the background (e.g. when exporting an org file or by
  ;; packages like org-pdftools). And I don't want pdf-tools to suddenly block
  ;; Emacs and spew out compiler output for a few minutes in those cases. It's
  ;; abysmal UX. The `pdf-view-mode' advice above works around this with a less
  ;; cryptic failure message, at least.
  (pdf-tools-install-noverify)

  ;; For consistency with other special modes
  (map! :map pdf-view-mode-map :gn "q" #'kill-current-buffer)

  (setq-default pdf-view-display-size 'fit-page)
  ;; Enable hiDPI support, but at the cost of memory! See politza/pdf-tools#51
  (setq pdf-view-use-scaling t
        pdf-view-use-imagemagick nil)

  ;; Handle PDF-tools related popups better
  (set-popup-rules!
    '(("^\\*Outline*" :side right :size 40 :select nil)
      ("^\\*Edit Annotation " :quit nil)
      ("\\(?:^\\*Contents\\|'s annots\\*$\\)" :ignore t)))

  ;; The mode-line does serve any useful purpose is annotation windows
  (add-hook 'pdf-annot-list-mode-hook #'hide-mode-line-mode)

  ;; HACK Fix #1107: flickering pdfs when evil-mode is enabled
  (setq-hook! 'pdf-view-mode-hook evil-normal-state-cursor (list nil))

  ;; HACK Refresh FG/BG for pdfs when `pdf-view-midnight-colors' is changed by a
  ;;      theme or with `setq!'.
  ;; TODO PR this upstream?
  (defun +pdf-reload-midnight-minor-mode-h ()
    (when pdf-view-midnight-minor-mode
      (pdf-info-setoptions
       :render/foreground (car pdf-view-midnight-colors)
       :render/background (cdr pdf-view-midnight-colors)
       :render/usecolors t)
      (pdf-cache-clear-images)
      (pdf-view-redisplay t)))
  (put 'pdf-view-midnight-colors 'custom-set
       (lambda (sym value)
         (set-default sym value)
         (dolist (buffer (doom-buffers-in-mode 'pdf-view-mode))
           (with-current-buffer buffer
             (if (get-buffer-window buffer)
                 (+pdf-reload-midnight-minor-mode-h)
               ;; Defer refresh for buffers that aren't visible, to avoid
               ;; blocking Emacs for too long while changing themes.
               (add-hook 'doom-switch-buffer-hook #'+pdf-reload-midnight-minor-mode-h
                         nil 'local))))))

  ;; Silence "File *.pdf is large (X MiB), really open?" prompts for pdfs
  (defadvice! +pdf-suppress-large-file-prompts-a (fn size op-type filename &optional offer-raw)
    :around #'abort-if-file-too-large
    (unless (string-match-p "\\.pdf\\'" filename)
      (funcall fn size op-type filename offer-raw))))
#+end_src

** ;;;; personal-functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; Insert a file link. At the prompt, enter the filename
(defun +org-insert-file-link ()
  (interactive)
  (insert (format "[[%s]]" (org-link-complete-file))))
;; `map': insert-file-link (space f L)
(map! :after org
      :map org-mode-map
      :leader
      (:prefix "f"
       :desc "create link to file" "L" #'+org-insert-file-link))
#+end_src
*** ;;;; my/comment-line

#+begin_src emacs-lisp
;; Comment or uncomment the current line
(defun my/comment-line ()
  ;; "Comment or uncomment the current line."
  (interactive)
  (save-excursion
    (if (use-region-p)
        (comment-or-uncomment-region (region-beginning) (region-end))
      (push-mark (beginning-of-line) t t)
      (end-of-line)
      (comment-dwim nil))))
(map! :desc "comment or uncomment"
      :n "M-;" #'my/comment-line)
#+end_src
*** ;;;; display workspaces in minibuffer
#+begin_src emacs-lisp
;; this keeps the workspace-bar visable
(after! persp-mode
  (defun display-workspaces-in-minibuffer ()
    (with-current-buffer " *Minibuf-0*"
      (erase-buffer)
      (insert (+workspace--tabline))))
  (run-with-idle-timer 1 t #'display-workspaces-in-minibuffer)
  (+workspace/display))
#+end_src
*** ;;;; =config function
#+begin_src emacs-lisp
;;;###autoload
(defun =config ()
  "Open your private config.el file."
  (interactive)
  (find-file (expand-file-name "config.org" doom-user-dir)))

#+end_src
*** ;;;; my/zen-scratch-pad
#+begin_src emacs-lisp
(defun dvs/zen-scratch-pad ()
   "Create a new org-mode buffer for random stuff."
   (interactive)
   (let ((buffer (generate-new-buffer "org-scratchy")))
     (switch-to-buffer buffer)
     (setq buffer-offer-save t)
     (org-mode)
     (auto-fill-mode)
     (doom-disable-line-numbers-h)
     (turn-on-visual-line-mode)
     (+zen/toggle)))

(map! :leader
      :prefix "o"
      :desc "open zen scratch"
      "X" #'dvs/zen-scratch-pad)
#+end_src
*** ;;;; my-make-new-buffer
#+begin_src emacs-lisp
(defun my-make-new-buffer ()
  (interactive)
  (let ((buffer (generate-new-buffer "*new*")))
    (set-window-buffer nil buffer)
    (with-current-buffer buffer
      (funcall (default-value 'major-mode))
      (setq doom-real-buffer-p t))))

(map! :leader
      :prefix "n"
      :desc "make new buffer"
      "b" #'my-make-new-buffer)
#+end_src
*** ;;;; Org empty buffer creation
#+begin_src emacs-lisp
;; https://tecosaur.github.io/emacs-config/config.html#org-buffer-creation
(evil-define-command +evil-buffer-org-new (count file)
  "Creates a new ORG buffer replacing the current window, optionally
    editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)
        (setq-local doom-real-buffer-p t)))))
;; new-org-buffer (space b o)
(map! :leader
      :prefix "b"
      :desc "New empty Org buffer" "o" #'+evil-buffer-org-new)
#+end_src
** ;;;; my-personal-added-pkgs ;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; zone
;; (zone-when-idle 60)

;; beacon highlight cursor
(beacon-mode t)

;; plantuml jar configuration
(setq plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
  ;; Enable plantuml-mode for PlantUML files
(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  ;; Enable exporting
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))

;; org-web-tools
(require 'org-web-tools)
;; use to download webpage text content
;; (use-package! org-web-tools)

;; hacker news comments
(use-package! hnreader
  :after elfeed)

;; use xournal with emacs
(use-package! org-xournalpp
  :config
  (add-hook 'org-mode-hook 'org-xournalpp-mode))
#+end_src

*** ;;;; Doom-keybindings ;;;; mod-config ;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp :tangle no
;; Highjacks backspace to delete up to nearest column multiple of `tab-width' at
;; a time. If you have smartparens enabled, it will also:
;;  a) balance spaces inside brackets/parentheses ( | ) -> (|)
;;  b) close empty multiline brace blocks in one step:
;;     {
;;     |
;;     }
;;     becomes {|}
;;  c) refresh smartparens' :post-handlers, so SPC and RET expansions work even
;;     after a backspace.
;;  d) properly delete smartparen pairs when they are encountered, without the
;;     need for strict mode.
;;  e) do none of this when inside a string
(advice-add #'delete-backward-char :override #'+default--delete-backward-char-a)

;; HACK Makes `newline-and-indent' continue comments (and more reliably).
;;      Consults `doom-point-in-comment-functions' to detect a commented region
;;      and uses that mode's `comment-line-break-function' to continue comments.
;;      If neither exists, it will fall back to the normal behavior of
;;      `newline-and-indent'.
;;
;;      We use an advice here instead of a remapping because many modes define
;;      and remap to their own newline-and-indent commands, and tackling all
;;      those cases was judged to be more work than dealing with the edge cases
;;      on a case by case basis.
(defadvice! +default--newline-indent-and-continue-comments-a (&rest _)
  "A replacement for `newline-and-indent'.

Continues comments if executed from a commented line. Consults
`doom-point-in-comment-functions' to determine if in a comment."
  :before-until #'newline-and-indent
  (interactive "*")
  (when (and +default-want-RET-continue-comments
             (doom-point-in-comment-p)
             (functionp comment-line-break-function))
    (funcall comment-line-break-function nil)
    t))

;; This section is dedicated to "fixing" certain keys so that they behave
;; sensibly (and consistently with similar contexts).

;; Consistently use q to quit windows
(after! tabulated-list
  (define-key tabulated-list-mode-map "q" #'quit-window))

;;; Keybind schemes

;; Custom help keys -- these aren't under `+bindings' because they ought to be
;; universal.
(define-key! help-map
  ;; new keybinds
  "'"    #'describe-char
  "u"    #'doom/help-autodefs
  "E"    #'doom/sandbox
  "M"    #'doom/describe-active-minor-mode
  "O"    #'+lookup/online
  "T"    #'doom/toggle-profiler
  "V"    #'doom/help-custom-variable
  "W"    #'+default/man-or-woman
  "C-k"  #'describe-key-briefly
  "C-l"  #'describe-language-environment
  "C-m"  #'info-emacs-manual

  ;; Unbind `help-for-help'. Conflicts with which-key's help command for the
  ;; <leader> h prefix. It's already on ? and F1 anyway.
  "C-h"  nil

  ;; replacement keybinds
  ;; replaces `info-emacs-manual' b/c it's on C-m now
  "r"    nil
  "rr"   #'doom/reload
  "rt"   #'doom/reload-theme
  "rp"   #'doom/reload-packages
  "rf"   #'doom/reload-font
  "re"   #'doom/reload-env

  ;; make `describe-bindings' available under the b prefix which it previously
  ;; occupied. Add more binding related commands under that prefix as well
  "b"    nil
  "bb"   #'describe-bindings
  "bi"   #'which-key-show-minor-mode-keymap
  "bm"   #'which-key-show-major-mode
  "bt"   #'which-key-show-top-level
  "bf"   #'which-key-show-full-keymap
  "bk"   #'which-key-show-keymap

  ;; replaces `apropos-documentation' b/c `apropos' covers this
  "d"    nil
  "db"   #'doom/report-bug
  "dc"   #'doom/goto-private-config-file
  "dC"   #'doom/goto-private-init-file
  "dd"   #'doom-debug-mode
  "df"   #'doom/help-faq
  "dh"   #'doom/help
  "dl"   #'doom/help-search-load-path
  "dL"   #'doom/help-search-loaded-files
  "dm"   #'doom/help-modules
  "dn"   #'doom/help-news
  "dN"   #'doom/help-search-news
  "dpc"  #'doom/help-package-config
  "dpd"  #'doom/goto-private-packages-file
  "dph"  #'doom/help-package-homepage
  "dpp"  #'doom/help-packages
  "ds"   #'doom/help-search-headings
  "dS"   #'doom/help-search
  "dt"   #'doom/toggle-profiler
  "du"   #'doom/help-autodefs
  "dv"   #'doom/version
  "dx"   #'doom/sandbox

  ;; replaces `apropos-command'
  "a"    #'apropos
  "A"    #'apropos-documentation
  ;; replaces `describe-copying' b/c not useful
  "C-c"  #'describe-coding-system
  ;; replaces `Info-got-emacs-command-node' b/c redundant w/ `Info-goto-node'
  "F"    #'describe-face
  ;; replaces `view-hello-file' b/c annoying
  "h"    nil
  ;; replaces `view-emacs-news' b/c it's on C-n too
  "n"    #'doom/help-news
  ;; replaces `help-with-tutorial', b/c it's less useful than `load-theme'
  "t"    #'load-theme
  ;; replaces `finder-by-keyword' b/c not useful
  "p"    #'doom/help-packages
  ;; replaces `describe-package' b/c redundant w/ `doom/help-packages'
  "P"    #'find-library)

(after! which-key
  (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) d\\'" prefix-re))
                  nil . "doom")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) r\\'" prefix-re))
                  nil . "reload")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) b\\'" prefix-re))
                  nil . "bindings")
                which-key-replacement-alist)))


(when (modulep! +bindings)
  ;; Make M-x harder to miss
  (define-key! 'override
    "M-x" #'execute-extended-command
    "A-x" #'execute-extended-command)

  ;; A Doom convention where C-s on popups and interactive searches will invoke
  ;; ivy/helm/vertico for their superior filtering.
  (when-let (command (cond ((modulep! :completion ivy)
                            #'counsel-minibuffer-history)
                           ((modulep! :completion helm)
                            #'helm-minibuffer-history)
                           ((modulep! :completion vertico)
                            #'consult-history)))
    (define-key!
      :keymaps (append +default-minibuffer-maps
                       (when (modulep! :editor evil +everywhere)
                         '(evil-ex-completion-map)))
      "C-s" command))

  ;; Smarter C-a/C-e for both Emacs and Evil. C-a will jump to indentation.
  ;; Pressing it again will send you to the true bol. Same goes for C-e, except
  ;; it will ignore comments+trailing whitespace before jumping to eol.
  (map! :gi "C-a" #'doom/backward-to-bol-or-indent
        :gi "C-e" #'doom/forward-to-last-non-comment-or-eol
        ;; Standardizes the behavior of modified RET to match the behavior of
        ;; other editors, particularly Atom, textedit, textmate, and vscode, in
        ;; which ctrl+RET will add a new "item" below the current one and
        ;; cmd+RET (Mac) / meta+RET (elsewhere) will add a new, blank line below
        ;; the current one.

        ;; C-<mouse-scroll-up>   = text scale increase
        ;; C-<mouse-scroll-down> = text scale decrease
        [C-down-mouse-2] (cmd! (text-scale-set 0))

        ;; auto-indent on newline by default
        :gi [remap newline] #'newline-and-indent
        ;; insert literal newline
        :i  "S-RET"         #'+default/newline
        :i  [S-return]      #'+default/newline
        :i  "C-j"           #'+default/newline

        ;; Add new item below current (without splitting current line).
        :gi "C-RET"         #'+default/newline-below
        :gn [C-return]      #'+default/newline-below
        ;; Add new item above current (without splitting current line)
        :gi "C-S-RET"       #'+default/newline-above
        :gn [C-S-return]    #'+default/newline-above

#+end_src

*** ;;;; my-keybindings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; org-keybindings

(map! :after org
      :leader
      :prefix ("o" . "open")
      :desc "open org config"
      :n "i" (lambda () (interactive) (find-file "~/.config/doom/config.org"))
      ;; jump to todo.org
      :desc "open org todos"
      :n "t" (lambda () (interactive) (find-file "~/org/todo.org"))
      ;; jump to notes.org
      :desc "open org notes"
      :n "n" (lambda () (interactive) (find-file "~/org/notes.org"))
      ;; jump to org organizer
      :desc "open org organizer"
      :n "0" (lambda () (interactive) (find-file "~/org/organizer.org"))
      ;; jump to org folder
      :desc "open org Directory"
      :n "o" (lambda () (interactive) (find-file "~/org/"))
      ;; jump to org wiki folder
      :desc "open org wiki"
      :n "k" (lambda () (interactive) (find-file "~/org/wiki/")))

;; demarcate or create source-block
(map! :after org
      :leader
      :prefix "d"
      :desc "demarcate/create source-block"
      :n "b" #'org-babel-demarcate-block)
;; cycle agenda files
(map! :after org
      :leader
      :prefix ("o" . "open")
      :desc "cycle agenda files"
      :n "a f" #'org-cycle-agenda-files)
;; open config in named workspace
(map! :after org
      :leader
      :prefix ("o" . "open")
      :desc "open calendar"
      :n "c" #'=calendar)
;; read url's readable content to org buffer
(map! :leader
      :prefix "i"
      :desc "websites-content to org" "w" #'org-web-tools-read-url-as-org)
;; list-processes
(map! :leader
      :prefix "l"
      :desc "list processes" "p" #'list-processes)
;; adds selected text to chosen buffer
(map! :leader
      :prefix "i"
      :desc "append to buffer" "t" #'append-to-buffer)
;; adds entire buffer to chosen buffer
(map! :leader
      :prefix "i"
      :desc "insert buffer at point" "b" #'insert-buffer)
;; use mpv to open video files ;;;;
(map! :leader
      :prefix ("v" . "video")
      :desc "play file with mpv" "f" #'mpv-play)
;; use mpv to open video url ;;;;
(map! :leader
      :prefix ("v" . "video")
      :desc "play link with mpv" "l" #'mpv-play-url)
;; toggle vertico-grid-mode
(map! :leader
      :prefix "t"
      :desc "toggle vertico grid"
      :n "g" 'vertico-grid-mode)
;; toggle default-scratch buffer
(map! :leader
      :prefix ("o" . "open")
      :desc "open defalt scratch-buffer"
      :n "x" #'scratch-buffer)

;; start org-mpv-notes-mode
(map! "<f5> n" #'org-mpv-note)
;; (defhydra hydra-mpv (global-map "<f5> m")
;; dictioary-lookup-definition better than spc s t
(map! "M-*" #'dictionary-lookup-definition)
(map! "M-s d" #'dictionary-lookup-definition)
(map! "M-s h" #'consult-history)
(map! "<f7>" #'dictionary-lookup-definition)
;; fetches selected text and gives you a list of synonyms to replace it with
(map! "M-&" #'powerthesaurus-lookup-word-dwim)
;; close other window ;;;;
(map! "C-1" #'delete-other-windows)
;; switch other window
(map! "C-2" #'switch-to-buffer-other-window)
;; Minibuffer history
(map! "C-c h" #'consult-history)
;; tranpose function for missed punctuation
(map! "C-c t" #'transpose-chars)
;; ;; start modes
(map! :prefix ("C-c m" . "mode command")
      "o" #'org-mode
      "i" #'lisp-interaction-mode
      "e" #'emacs-lisp-mode
      "f" #'fundamental-mode)
;; Make `v$' not include the newline character ;;;;
(general-define-key
:states '(visual state)
"$" '(lambda ()
        (interactive)
        (evil-end-of-line)))
#+end_src

*** ;;;; Key-chords ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[[https://github.com/emacsorphanage/key-chord][GitHub -key-chord.]]

#+begin_src emacs-lisp
(use-package! key-chord
  :defer t
  :init
  (key-chord-mode 1))
;; Exit insert mode by pressing j and then j quickly
;; Max time delay between two key presses to be considered a key chord
(setq key-chord-two-keys-delay 0.1) ; default 0.1
;; Max time delay between two presses of the same key to be considered a key chord.
;; Should normally be a little longer than;key-chord-two-keys-delay.
(setq key-chord-one-key-delay 0.2) ; default 0.2
;; (key-chord-define evil-insert-state-map "hb" '+default--delete-backward-char-a)
(key-chord-define evil-insert-state-map "jn" '+default--delete-backward-char-a)
(key-chord-define evil-insert-state-map "gb" 'transpose-chars)
(key-chord-define evil-insert-state-map "ji" 'backward-kill-word)
(key-chord-define evil-normal-state-map "vv" 'evil-visual-line)
(key-chord-define evil-normal-state-map "cx" 'evilnc-comment-or-uncomment-lines)
#+end_src

*** ;;;; which-key ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; (setq which-key-popup-type 'minibuffer)
;; (setq which-key-popup-type 'side-window)
;; (setq which-key-popup-type 'frame)

;; (which-key-setup-minibuffer)
(which-key-setup-side-window-bottom)
;;(which-key-setup-side-window-right)
;;(which-key-setup-side-window-right-bottom)
;; (setq which-key-use-C-h-commands nil)
(setq which-key-idle-delay 1.5)
#+end_src

*** ;;;; dired ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src

** ;;;; mpv.el ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

#+begin_src emacs-lisp
;; mpv commands

;; make mpv type link
(defun org-mpv-complete-link (&optional arg)
  (replace-regexp-in-string
   "file:" "mpv:"
   (org-link-complete-file arg)
   t t))
(org-link-set-parameters "mpv"
  :follow #'mpv-play :complete #'org-mpv-complete-link)

;; mpv-play-clipboard - play url from clipboard
(defun mpv-play-clipboard ()
  "Start an mpv process playing the video stream at URL."
  (interactive)
  (let ((url (current-kill 0 t)))
  (unless (mpv--url-p url)
    (user-error "Invalid argument: `%s' (must be a valid URL)" url))
  (if (not mpv--process)
      ;; mpv isnt running play file
      (mpv-start url)
      ;; mpv running append file to playlist
    (mpv--playlist-append url))))

;; frame step forward
(with-eval-after-load 'mpv
  (defun mpv-frame-step ()
    "Step one frame forward."
    (interactive)
    (mpv--enqueue '("frame-step") #'ignore)))


;; frame step backward
(with-eval-after-load 'mpv
  (defun mpv-frame-back-step ()
    "Step one frame backward."
    (interactive)
    (mpv--enqueue '("frame-back-step") #'ignore)))


;; mpv take a screenshot
(with-eval-after-load 'mpv
  (defun mpv-screenshot ()
    "Take a screenshot"
    (interactive)
    (mpv--enqueue '("screenshot") #'ignore)))


;; mpv show osd
(with-eval-after-load 'mpv
  (defun mpv-osd ()
    "Show the osd"
    (interactive)
    (mpv--enqueue '("set_property" "osd-level" "3") #'ignore)))


;; add a newline in the current document
(defun end-of-line-and-indented-new-line ()
  (interactive)
  (end-of-line)
  (newline-and-indent))

;; mpv-hydra ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defhydra hydra-mpv (global-map "<f5> m")
  "
  ^Seek^                    ^Actions^                ^General^
  ^^^^^^^^---------------------------------------------------------------------------
  _h_: seek back -5         _,_: back frame          _i_: insert playback position
  _j_: seek back -60        _._: forward frame       _n_: insert a newline
  _k_: seek forward 60      _SPC_: pause             _s_: take a screenshot
  _l_: seek forward 5       _q_: quit mpv            _o_: show the osd
  ^
  "
  ("h" mpv-seek-backward "-5")
  ("j" mpv-seek-backward "-60")
  ("k" mpv-seek-forward "60")
  ("l" mpv-seek-forward "5")
  ("," mpv-frame-back-step)
  ("." mpv-frame-step)
  ("SPC" mpv-pause)
  ("q" mpv-kill)
  ("s" mpv-screenshot)
  ("i" mpv-insert-playback-position)
  ("o" mpv-osd)
  ("n" end-of-line-and-indented-new-line))

#+end_src

** ;;;; web-url-handlers ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;;;; mpv-play-url
;; https://gist.github.com/bsless/19ca4a37eee828b1b62c84971181f506#file-yt-mpv-el
;;;###autoload
(defun c1/mpv-play-url (&optional url &rest arg)
   "Start mpv for URL."
  (interactive)
  (mpv-start url))

;; https://mbork.pl/2022-10-24_Playing_videos_from_the_last_position_in_mpv
;; (defun dvs/browse-url-with-mpv (url)
;;   "Open URL using mpv."
;;   (mpv-start url))

;;;###autoload
(defun elfeed-open-hnreader-url (url &optional new-window)
  (interactive)
  (hnreader-comment url))

(setq browse-url-handlers
    '(("\\.\\(gifv?\\|avi\\|AVI\\|mp[4g]\\|MP4\\|MP3\\|webm\\)/" . c1/mpv-play-url)
      ("^https?://\\(www\\.youtube\\.com\\|youtu\\.be\\)/" . c1/mpv-play-url)
      ("^https?://\\(odysee\\.com\\|rumble\\.com\\)/" . c1/mpv-play-url)
      ("^https?://\\(off-guardian.org\\|.substack\\.com\\|tomluongo\\.me\\)/" . dvs-eww)
      ;; ("^https?://\\(emacs.stackexchange.com\\|news.ycombinator.com\\)/" . dvs-eww)
      ("^https?://\\(news.ycombinator.com\\)/" . elfeed-open-hnreader-url)
      ("." . browse-url-xdg-open)))

#+end_src

*** ;;;; ytdl youtube-download ;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(use-package ytdl
  :defer t
  :init
  (setq ytdl-music-folder (expand-file-name "~/music")
        ytdl-video-folder (expand-file-name "~/videos"))
  :config
  (setq ytdl-always-query-default-filename 'never))
#+end_src

** ;;;; you-tube-sub-extractor ;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://github.com/agzam/youtube-sub-extractor.el][GitHub - agzam/youtube-sub-extractor.el]]

yt-sub-ext
#+begin_src emacs-lisp
(use-package! youtube-sub-extractor
  :defer t
  :commands
  (youtube-sub-extractor-extract-subs)
  :config
  (map! :map youtube-sub-extractor-subtitles-mode-map
      :desc "copy timestamp URL"
      :n "RET" #'youtube-sub-extractor-copy-ts-link
      :desc "browse at timestamp"
      :n "C-c C-o" #'youtube-sub-extractor-browse-ts-link))

(setq youtube-sub-extractor-timestamps 'left-margin)
(setq youtube-sub-extractor-min-chunk-size 30)

(require 'thingatpt)
(defun youtube-sub-extractor-extract-subs-at-point ()
   "extract subtitles from a youtube link at point"
(interactive)
(youtube-sub-extractor-extract-subs (thing-at-point-url-at-point)))

(map! :leader
      :prefix "v"
      :desc "YouTube subtitles"
      :n "E" #'youtube-sub-extractor-extract-subs)

(map! :leader
      :prefix "v"
      :desc "YouTube subtitles at point"
      :n "e" #'youtube-sub-extractor-extract-subs-at-point)
#+end_src

** ;;;; spray ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[[https://tecosaur.github.io/emacs-config/config.html#spray][tecosaur-config #spray]]

#+begin_src emacs-lisp
(use-package spray
  ;; :load-path "~/builds/manual-packages/spray"
  :defer t
  :commands (spray-mode)
  :config
  (setq spray-wpm 220
        spray-height 800))

(defun spray-mode-hide-cursor ()
    "Hide or unhide the cursor as is appropriate."
    (if spray-mode
        (setq-local spray--last-evil-cursor-state evil-normal-state-cursor
                    evil-normal-state-cursor '(nil))
      (setq-local evil-normal-state-cursor spray--last-evil-cursor-state)))
  (add-hook 'spray-mode-hook #'spray-mode-hide-cursor)

(map! "<f6>" #'spray-mode)
(map! :after spray
      :map spray-mode-map
      :n doom-leader-key nil
      :n "spc" #'spray-start/stop
      :n "<return>" #'spray-start/stop
      :n "f" #'spray-faster
      :n "s" #'spray-slower
      :n "t" #'spray-time
      :n "<right>" #'spray-forward-word
      :n "h" #'spray-forward-word
      :n "<left>" #'spray-backward-word
      :n "l" #'spray-backward-word
      :n [remap keyboard-quit] 'spray-quit
      :n "q" #'spray-quit)
;; "Minor modes to toggle off when in spray mode."
(setq spray-unsupported-minor-modes
  '(beacon-mode buffer-face-mode smartparens-mode
		     column-number-mode line-number-mode ))
(setq cursor-in-non-selected-windows nil)
#+end_src

** ;;;; elfeed ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; This is an opinionated workflow that turns Emacs into an RSS reader, inspired
;; by apps Reeder and Readkit. It can be invoked via `=rss'. Otherwise, if you
;; don't care for the UI you can invoke elfeed directly with `elfeed'.

(defvar +rss-split-direction 'below
  "What direction to pop up the entry buffer in elfeed.")

(defvar +rss-enable-sliced-images t
  "scroll images smoother")

(defvar +rss-workspace-name "*rss*"
  "Name of the workspace that contains the elfeed buffer.")

;; keymap ;;
(map! :leader
      :prefix "o"
      :desc "open elfeed" "e" #'=rss)

;; elfeed
(use-package! elfeed
  :commands elfeed
  :init
  (setq elfeed-db-directory (concat doom-local-dir "elfeed/db/")
        elfeed-enclosure-default-dir (concat doom-local-dir "elfeed/enclosures/"))
  :config
  (setq elfeed-search-filter "@2-week-ago "
        elfeed-show-entry-switch #'pop-to-buffer
        elfeed-show-entry-delete #'+rss/delete-pane
        shr-max-image-proportion 0.8)

  (set-popup-rule! "^\\*elfeed-entry"
    :size 0.75 :actions '(display-buffer-below-selected)
    :select t :quit nil :ttl t)

  (make-directory elfeed-db-directory t)

  ;; Ensure elfeed buffers are treated as real
  (add-hook! 'doom-real-buffer-functions
    (defun +rss-buffer-p (buf)
      (string-match-p "^\\*elfeed" (buffer-name buf))))

  ;; Enhance readability of a post
  (add-hook 'elfeed-show-mode-hook #'+rss-elfeed-wrap-h)
  (add-hook! 'elfeed-search-mode-hook
    (add-hook 'kill-buffer-hook #'+rss-cleanup-h nil 'local))

  ;; Large images are annoying to scroll through, because scrolling follows the
  ;; cursor, so we force shr to insert images in slices.
  (when +rss-enable-sliced-images
    (setq-hook! 'elfeed-show-mode-hook
      shr-put-image-function #'+rss-put-sliced-image-fn
      shr-external-rendering-functions '((img . +rss-render-image-tag-without-underline-fn))))

  ;; ;; Keybindings
  ;; (after! elfeed-show
  ;;   (define-key! elfeed-show-mode-map
  ;;     [remap next-buffer]     #'+rss/next
  ;;     [remap previous-buffer] #'+rss/previous))
  ;; (when (modulep! :editor evil +everywhere)
  ;;   (evil-define-key 'normal elfeed-search-mode-map
  ;;     "q" #'elfeed-kill-buffer
  ;;     "r" #'elfeed-search-update--force
  ;;     (kbd "M-RET") #'elfeed-search-browse-url)
  ;;   (map! :map elfeed-show-mode-map
  ;;         :n "gc" nil
  ;;         :n "gc" #'elfeed-kill-link-url-at-point))

  ;; keymap
  (map! :after elfeed
        :map elfeed-search-mode-map
        :n [remap save-buffer] 'elfeed-tube-save
        :n "8" #'elfeed-toggle-star
        :n "a" #'elfeed-curate-edit-entry-annoation
        :n "d" #'elfeed-youtube-dl
        :n "e" #'elfeed-eww-open
        :n "F" #'elfeed-tube-fetch
        :n "h" #'dvs/elfeed-hn-show-comments
        :n "m" #'elfeed-curate-toggle-star
        :n "r" #'elfeed-search-update--force
        :n "R" #'elfeed-summary
        :n "q" #'elfeed-kill-buffer
        :n "T" #'my/elfeed-reddit-show-commments
        :n "v" #'elfeed-view-mpv
        :n "x" #'elfeed-curate-export-entries
        :n "Y" #'yt-sub-ex
        :n (kbd "M-RET") #'elfeed-search-browse-url)
  (map! :after elfeed-show
        :map elfeed-show-mode-map
        :n [remap next-buffer] #'+rss/next
        :n [remap previous-buffer] #'+rss/previous
        :n [remap save-buffer] 'elfeed-tube-save
        :n "a" #'elfeed-curate-edit-entry-annoation
        :n "d" #'yt-dl-it
        :n "e" #'elfeed-eww-open
        :n "m" #'elfeed-curate-toggle-star
        :n "x" #'elfeed-kill-buffer
        :n "gc" nil
        :n "gc" #'elfeed-kill-link-url-at-point))

;;;; set default filter ;;;;
;; (setq-default elfeed-search-filter "@1-week-ago +unread ")
(add-hook 'elfeed-search-mode-hook #'elfeed-summary)
#+end_src

*** elfeed-mpv
#+begin_src emacs-lisp
;; "Watch a video from URL in MPV" ;;
(defun elfeed-v-mpv (url)
  "open URL in mpv"
  (async-shell-command (format "mpv %s" url)))

;;;###autoload
(defun elfeed-view-mpv (&optional use-generic-p)
  "Youtube-feed link"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (elfeed-v-mpv it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
#+end_src

*** elfeed-youtube
#+begin_src emacs-lisp
;; youtube downloader ;;;;
(defun yt-dl-it (url)
  "async yt-dlp download from url"
  (interactive)
  (let ((default-directory "~/Videos"))
    (async-shell-command (format "yt-dlp %s" url))))

(defun elfeed-youtube-dl ()
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (yt-dl-it it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
#+end_src

*** elfeed-eww
#+begin_src emacs-lisp
;; browse with eww ;;;;
(defun elfeed-eww-open ()
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (eww-browse-url it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
#+end_src

*** elfeed-subtitle-extractor
#+begin_src emacs-lisp
;; youtube-sub-extractor ;;;;
(defun yt-sub-ex ()
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (youtube-sub-extractor-extract-subs-at-point))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
#+end_src

*** elfeed-reddit
#+begin_src emacs-lisp
;; reddit show comments ;;;;
(defun my/elfeed-reddit-show-commments (&optional link)
  (interactive)
  (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                    elfeed-show-entry
                  (elfeed-search-selected :ignore-region)))
         (link (if link link (elfeed-entry-link entry))))
    (reddigg-view-comments link)))
#+end_src

*** elfeed-tag-star
#+begin_src emacs-lisp
;; define tag "star" ;;;;
(defun elfeed-expose (function &rest args)
    "Return an interactive version of FUNCTION, exposing it to the user."
  (lambda () (interactive) (apply function args)))
(defalias 'elfeed-toggle-star
       (elfeed-expose #'elfeed-search-toggle-all 'star))
#+end_src

*** elfeed-hackernews
#+begin_src emacs-lisp
;; hn-show-comments from search-mode ;;;;
;; hacker news comment reader
(defun dvs/elfeed-hn-show-comments ()
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (cdr (elfeed-entry-id entry))
             do (hnreader-promise-comment it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
;; this command could be added to the function
;; (setq-local hnreader-view-comments-in-same-window nil/t)
#+end_src
*** elfeed-goodies
#+begin_src emacs-lisp
;; elfeed-goodies
(use-package! elfeed-goodies
  :after elfeed
  :config
  (elfeed-goodies/setup))

#+end_src

** ;;;; elfeed-org ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(use-package! elfeed-org
  :after elfeed
  :preface
  (setq rmh-elfeed-org-files (list "elfeed-feeds.org"))
  ;; (setq rmh-elfeed-org-files (list "~/.config/doom/elfeed-feeds.org"))
  :config
  (elfeed-org)
  (defadvice! +rss-skip-missing-org-files-a (&rest _)
    :before '(elfeed rmh-elfeed-org-mark-feed-ignore elfeed-org-export-opml)
    (unless (file-name-absolute-p (car rmh-elfeed-org-files))
      (let* ((default-directory org-directory)
             (files (mapcar #'expand-file-name rmh-elfeed-org-files)))
        (dolist (file (cl-remove-if #'file-exists-p files))
          (message "elfeed-org: ignoring %S because it can't be read" file))
        (setq rmh-elfeed-org-files (cl-remove-if-not #'file-exists-p files))))))
#+end_src

** ;;;; elfeed-curate ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(after! elfeed
(use-package elfeed-curate))

(setq elfeed-curate-star-tag "cur8")

;; NOTE use this as an example of default way of keybinding
;; (after! elfeed
;;   ;; Your custom Elfeed configuration.
;;   ;; elfeed-curate key bindings:
;;   (define-key elfeed-search-mode-map "a" #'elfeed-curate-edit-entry-annoation)
;;   (define-key elfeed-search-mode-map "x" #'elfeed-curate-export-entries)
;;   (define-key elfeed-search-mode-map "m" #'elfeed-curate-toggle-star)

;;   (define-key elfeed-show-mode-map   "a" #'elfeed-curate-edit-entry-annoation)
;;   (define-key elfeed-show-mode-map   "m" #'elfeed-curate-toggle-star)
;;   (define-key elfeed-show-mode-map   "q" #'kill-buffer-and-window))
#+end_src

** ;;;; elfeed-tube ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[[https://github.com/karthink/elfeed-tube][GitHub - elfeed-tube]]

#+begin_src emacs-lisp
(after! elfeed
(use-package elfeed-tube
  :demand t
  :config
  (elfeed-tube-setup)))

(after! elfeed
(use-package elfeed-tube-mpv))
#+end_src

** ;;;; elfeed summary ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
:PROPERTIES:
:VISIBILITY: folded
:END:

[[https://github.com/SqrtMinusOne/elfeed-summary][GitHub - elfeed-summary]]

#+begin_src emacs-lisp


(use-package! elfeed-summary
  :defer t
  :after elfeed)
  ;; :init
  ;; (add-hook 'elfeed-summary-mode-hook
  ;;           #'my-elfeed-summary-move-point-to-fourth-line))

(setq elfeed-summary-other-window t)

(map! :map elfeed-summary-mode-map
      :desc "unjam elfeed"
      :n "m" #'elfeed-unjam)
#+end_src

*** elfeed-summary-buffer layout

#+begin_src emacs-lisp
(setq elfeed-summary-settings
      '((group (:title . "today")
         (:elements
          (search
           (:filter . "@1-day-ago")
           (:title . ""))))
        (group (:title . "Daily")
               (:elements
                (query . day))
               (:hide t))
        (group (:title . "searches Days")
               (:elements
                (group
                 (:title . "2 days")
                 (:elements
                  (search
                   (:filter . "@2-day-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "3 days")
                 (:elements
                  (search
                   (:filter . "@3-day-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "4 days")
                 (:elements
                  (search
                   (:filter . "@4-day-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "1 week")
                 (:elements
                  (search
                   (:filter . "@7-day-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "2 weeks")
                 (:elements
                  (search
                   (:filter . "@2-weeks-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "3 weeks")
                 (:elements
                  (search
                   (:filter . "@3-weeks-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "1 month")
                 (:elements
                  (search
                   (:filter . "@1-month-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "2 months")
                 (:elements
                  (search
                   (:filter . "@2-month-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "6 months")
                 (:elements
                  (search
                   (:filter . "@6-months-ago +unread")
                   (:title . "+unread"))
                  (search
                   (:filter . "@6-months-ago")
                   (:title . "+all")))))
               (:hide t))
        ;; ...

        ;; ...
        (group (:title . "stared")
               (:elements
                (search
                 (:filter . "+star")
                 (:title . "")))
               (:hide t))
        (group (:title . "forums")
               (:elements
                (query . forum))
               (:hide t))
        (group (:title . "Humor")
               (:elements
                (query . fun))
               (:hide t))
        (group (:title . "Repos")
               (:elements
                (query . github))
               (:hide t))
        (group (:title . "Doom")
               (:elements
                (query . doom))
               (:hide t))
        (group (:title . "Emacs")
               (:elements
                (query . emacs))
               (:hide t))
        (group (:title . "Linux")
               (:elements
                (query . linux))
               (:hide t))
        (group (:title . "Corbett")
               (:elements
                (query . corbett))
               (:hide t))
        (group (:title . "science")
               (:elements
                (query . sci))
               (:hide t))
        (group (:title . "Substack")
               (:elements
                (query . sub))
               (:hide t))
        (group (:title . "Videos")
               (:elements
                (group
                 (:title . "truth")
                 (:elements
                  (query . (and video truth)))
                 (:hide t))
                (group
                 (:title . "humor")
                 (:elements
                  (query . (and video fun)))
                 (hide t))
                (group
                 (:title . "real")
                 (:elements
                  (query . (and video real)))
                 (hide t))
                (group
                 (:title . "history")
                 (:elements
                  (query . (and video hist)))))
               (:hide t))
        (group (:title . "searches all")
               (:elements
                (group
                 (:title . "ungrouped")
                 (:elements :misc))))))

#+end_src

** ;;;; eww ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp

;; found in manual for eww w/spc h R ;;;;
(setq eww-retrieve-command
     '("brave" "--headless" "--dump-dom"))

;; open links in eww
(defun dvs-eww (url &optional arg)
    "Pass URL to appropriate client"
  (interactive
   (list (browse-url-interactive-arg "URL: ")
         current-prefix-arg))
  (let ((url-parsed (url-generic-parse-url url)))
    (pcase (url-type url-parsed)
            (_ (eww url arg)))))

;;
;; Produce buffer with RSS/Atom links from source
(defvar prot-eww--occur-feed-regexp
  (concat "\\(rss\\|atom\\)\\+xml.\\(.\\|\n\\)"
          ".*href=[\"']\\(.*?\\)[\"']")
    "Regular expression to match web feeds in HTML source.")
(defvar prot-common-url-regexp
  (concat
   "~?\\<\\([-a-zA-Z0-9+&@#/%?=~_|!:,.;]*\\)"
   "[.@]"
   "\\([-a-zA-Z0-9+&@#/%?=~_|!:,.;]+\\)\\>/?")
  "Regular expression to match (most?) URLs or email addresses.")
;;;###autoload
(defun prot-eww-find-feed ()
    "Produce buffer with RSS/Atom links from XML source."
  (interactive)
  (let* ((url (or (plist-get eww-data :start)
                  (plist-get eww-data :contents)
                  (plist-get eww-data :home)
                  (plist-get eww-data :url)))
         (title (or (plist-get eww-data :title) url))
         (source (plist-get eww-data :source))
         (buf-name (format "*feeds: %s # eww*" title)))
    (with-temp-buffer
      (insert source)
      (occur-1 prot-eww--occur-feed-regexp "\\3" (list (current-buffer)) buf-name))
    ;; Handle relative URLs, so that we get an absolute URL out of them.
    ;; Findings like "rss.xml" are not particularly helpful.
    ;;
    ;; NOTE 2021-03-31: the base-url heuristic may not always be
    ;; correct, though it has worked in all cases I have tested it on.
    (when (get-buffer buf-name)
      (with-current-buffer (get-buffer buf-name)
        (let ((inhibit-read-only t)
              (base-url (replace-regexp-in-string "\\(.*/\\)[^/]+\\'" "\\1" url)))
          (goto-char (point-min))
          (unless (re-search-forward prot-common-url-regexp nil t)
            (re-search-forward ".*")
            (replace-match (concat base-url "\\&"))))))))

;; https://emacs.stackexchange.com/questions/4089/
;; eww use pdf-tools
;; The behavior can be enabled or disabled by
;; setq-ing the variable tv/prefer-pdf-tools to t or nil
(defvar tv/prefer-pdf-tools (fboundp 'pdf-view-mode))
(defun tv/start-pdf-tools-if-pdf ()
  (when (and tv/prefer-pdf-tools
             (eq doc-view-doc-type 'pdf))
    (pdf-view-mode)))

(add-hook 'doc-view-mode-hook 'tv/start-pdf-tools-if-pdf)
#+end_src

** ;;;; osm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(use-package osm
  :defer t
  :bind ("C-x m" . osm-prefix-map) ;; Alternative: `osm-home'
  :custom
  ;; Take a look at the customization group `osm' for more options.
  (osm-server 'default) ;; Configure the tile server
  (osm-copyright t)     ;; Display the copyright information
:config

  ;; Add custom servers, see also https://github.com/minad/osm/wiki
  ;; (osm-add-server 'myserver
  ;;   :name "My tile server"
  ;;   :group "Custom"
  ;;   :description "Tiles based on aerial images"
  ;;   :url "https://myserver/tiles/%z/%x/%y.png?apikey=%k")
)
#+end_src
** ;;;; dwim shell command ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(use-package dwim-shell-command
  :defer t
  :bind (([remap shell-command] . dwim-shell-command)
         :map dired-mode-map
         ([remap dired-do-async-shell-command] . dwim-shell-command)
         ([remap dired-do-shell-command] . dwim-shell-command)
         ([remap dired-smart-shell-command] . dwim-shell-command))
  :config
;; pdf to text ;;;;
(defun dwim-shell-commands-pdf-to-txt ()
  "Convert pdf to txt."
  (interactive)
  (dwim-shell-command-on-marked-files
   "pdf to txt"
   "pdftotext -layout '<<f>>' '<<fne>>.txt'"
   :utils "pdftotext"))
;; Ping duckduckgo.com ;;;;
(defun dwim-shell-commands-ping-google ()
  (interactive)
  (dwim-shell-command-on-marked-files
   "Ping google.com"
   "ping -c 3 google.com"
   :utils "ping"
   :focus-now t))
;; Stream clipboard URL using mpv ;;;;
(defun dwim-shell-commands-mpv-stream-clipboard-url ()
  (interactive)
  (dwim-shell-command-on-marked-files
   "Streaming"
   "mpv --geometry=30%x30%+100%+0% \"<<cb>>\""
   :utils "mpv"
   :no-progress t
   :error-autofocus t
   :silent-success t))
;; Clone git URL in clipboard to "~/builds/" ;;;;
(defun dwim-shell-commands-git-clone-clipboard-url-to-builds ()
  (interactive)
  (cl-assert (string-match-p "^\\(http\\|https\\|ssh\\)://" (current-kill 0)) nil "No URL in clipboard")
  (let* ((url (current-kill 0))
         (download-dir (expand-file-name "~/builds/"))
         (project-dir (concat download-dir (file-name-base url)))
         (default-directory download-dir))
    (when (or (not (file-exists-p project-dir))
              (when (y-or-n-p (format "%s exists.  delete?" (file-name-base url)))
                (delete-directory project-dir t)
                t))
      (dwim-shell-command-on-marked-files
       (format "Clone %s" (file-name-base url))
       (format "git clone %s" url)
       :utils "git"
       :on-completion (lambda (buffer)
                        (kill-buffer buffer)
                        (dired project-dir)))))))
(require 'dwim-shell-commands)
#+end_src

** ;;;; engine-mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
|------------+-------|
| web-search | C-x / |
|------------+-------|
#+begin_src emacs-lisp
(use-package engine-mode
  :defer t
  :config
  (engine-mode t))
(defengine nitter
"https://nitter.net/search?f=tweets&q=%s"
  :keybinding "n")
(defengine githubcs
  "https://github.com/search?type=code&auto_enroll=true&q=%s"
  :keybinding "i")
(defengine github
  "https://github.com/search?ref=simplesearch&q=%s"
  :keybinding "h")
(defengine presearch
  "https://presearch.com/search?q=%s"
  :keybinding "p")
(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "g")
(defengine brave
  "https://search.brave.com/search?q=%s"
  :keybinding "b")
(defengine melpa
  "https://melpa.org/#/%s"
  :keybinding "m")
(defengine archwiki
  "https://wiki.archlinux.org/index.php?search="
  :keybinding "a")
(defengine aur
  "https://aur.archlinux.org/packages/?K="
  :keybinding "u")
#+end_src

** ;;;; Doom-hl-todo ;;;; Mod-Config ;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp :tangle no
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :hook (yaml-mode . hl-todo-mode)
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        '(;; For reminders to change or add something at a later date.
          ("TODO" warning bold)
          ;; For code (or code paths) that are broken, unimplemented, or slow,
          ;; and may become bigger problems later.
          ("FIXME" error bold)
          ;; For code that needs to be revisited later, either to upstream it,
          ;; improve it, or address non-critical issues.
          ("REVIEW" font-lock-keyword-face bold)
          ;; For code smells where questionable practices are used
          ;; intentionally, and/or is likely to break in a future update.
          ("HACK" font-lock-constant-face bold)
          ;; For sections of code that just gotta go, and will be gone soon.
          ;; Specifically, this means the code is deprecated, not necessarily
          ;; the feature it enables.
          ("DEPRECATED" font-lock-doc-face bold)
          ;; Extra keywords commonly found in the wild, whose meaning may vary
          ;; from project to project.
          ("NOTE" success bold)
          ("BUG" error bold)
          ("XXX" font-lock-constant-face bold)))


  (defadvice! +hl-todo-clamp-font-lock-fontify-region-a (fn &rest args)
    "Fix an `args-out-of-range' error in some modes."
    :around #'hl-todo-mode
    (letf! (defun font-lock-fontify-region (beg end &optional loudly)
             (funcall font-lock-fontify-region (max beg 1) end loudly))
      (apply fn args)))

  ;; Use a more primitive todo-keyword detection method in major modes that
  ;; don't use/have a valid syntax table entry for comments.
  (add-hook! '(pug-mode-hook haml-mode-hook)
    (defun +hl-todo--use-face-detection-h ()
      "Use a different, more primitive method of locating todo keywords."
      (set (make-local-variable 'hl-todo-keywords)
           '(((lambda (limit)
                (let (case-fold-search)
                  (and (re-search-forward hl-todo-regexp limit t)
                       (memq 'font-lock-comment-face (ensure-list (get-text-property (point) 'face))))))
              (1 (hl-todo-get-face) t t))))
      (when hl-todo-mode
        (hl-todo-mode -1)
        (hl-todo-mode +1)))))

#+end_src
** ;;;; typing exercises ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[[https://github.com/jpablobr/emacs-monkeytype?tab=readme-ov-file#options][github-monkeytype-options]]
[[file:~/.config/emacs/.local/straight/repos/emacs-monkeytype/][monkey-type local repo-directory]]
typing-exercise
#+begin_src emacs-lisp
(use-package monkeytype
  :init
  (setq monkeytype-downcase nil)
  :defer t)

(defun my/monkeytype-mode-hook ()
    "Hooks for monkeytype-mode."
  (evil-escape-mode -1)
  (flyspell-mode -0)
  (corfu-mode -0)
  (evil-insert -1)
  (+zen/toggle)
  (text-scale-set 3))

;; Toggle downcase text
(add-hook 'monkeytype-mode-hook #'my/monkeytype-mode-hook)

(after! monkeytype
(defun monkeytype--process-input-timer-init ()
  (unless monkeytype--start-time
    (setq monkeytype--current-run-start-datetime
          (format-time-string "%a-%d-%b-%Y %H:%M:%S"))
    (setq monkeytype--start-time (float-time))
    (monkeytype--utils-idle-timer 5000 'monkeytype-pause))))

(map! :after org
      :leader
      :prefix "o"
      :desc "open monkeytype"
      :n "m" #'monkeytype-load-words-from-file)
#+end_src

** ;;;; browser-history ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp

(use-package! browser-hist
  :defer t
  :commands (browser-hist-search)
  :init
  (require 'embark) ; load Embark before the command (if you're using it)
  (setq browser-hist-default-browser 'brave)
  :config
  (setq browser-hist-db-paths
        '((brave . "~/.config/BraveSoftware/Brave-Browser/Default/History"))))

(map! :leader
      :prefix "s"
      :desc "search browser history"
      :n "h" #'browser-hist-search)


#+end_src

** ;;;; yequake ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[[https://github.com/alphapapa/yequake][yequake github.com]]

#+begin_src emacs-lisp
(use-package! yequake
  :defer t
  :custom
  (yequake-frames
   '(("org-capture"
      (buffer-fns . (yequake-org-capture))
      (width . 0.75)
      (height . 0.5)
      (alpha . 0.95)
      (frame-parameters . ((undecorated . t)
                           (skip-taskbar . t)
                           (sticky . t))))
     ("Yequake & scratch" .
         ((width . 0.75)
          (height . 0.5)
          (alpha . 0.95)
          (buffer-fns . ("~/org/yequake/key-reminder.org"
                         split-window-horizontally
                         "*scratch*"))
          (frame-parameters . ((undecorated . t)))))
     ("evil-easymotion" .
         ((width . 0.75)
          (height . 0.5)
          (alpha . 0.95)
          (buffer-fns . ("~/org/yequake/evil-easymotion.org"))
          (frame-parameters . ((undecorated . t))))))))

;; use this in linux to call it outside of emacs
;; emacsclient -n -e '(yequake-toggle "org-capture")'

;; toggle yequakes-frames
(map! :leader
      :prefix "t"
      :desc "toggle yequakes-frames"
      :n "y" #'yequake-toggle)
;; use this to call from linux
;; emacsclient -n -e '(yequake-toggle "Yequake & scratch")'
#+end_src
** ;;;; ediff ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

|-------+--------------------|
| KEYS  | EDIFF-FUNCTION     |
|-------+--------------------|
| A     | diff-ediff-patch   |
| C-x u | diff-undo          |
| RET   | diff-goto-source   |
| TAB   | diff-hunk-next     |
| g     | revert-buffer      |
| h     | describe-mode      |
| k     | diff-hunk-kill     |
| n     | diff-hunk-next     |
| p     | diff-hunk-prev     |
| q     | quit-window        |
| r     | diff-restrict-view |
|-------+--------------------|
#+begin_src emacs-lisp

(use-package! ediff
  :defer t
  :custom-face
  (ediff-current-diff-A ((t (:background "#663333"))))
  (ediff-fine-diff-A ((t (:background "indian red"))))
  (ediff-current-diff-B ((t (:background "#336633"))))
  (ediff-fine-diff-B ((t (:background "#558855"))))
  :commands (ediff-files))
(after! ediff
  (setq ediff-diff-options "-w" ; turn off whitespace checking
        ediff-split-window-function #'split-window-horizontally
        ediff-window-setup-function #'ediff-setup-windows-plain)

  (defvar doom--ediff-saved-wconf nil)
  ;; restore window config after quitting ediff
  (add-hook! 'ediff-before-setup-hook
    (defun doom-ediff-save-wconf-h ()
      (setq doom--ediff-saved-wconf (current-window-configuration))))
  (add-hook! '(ediff-quit-hook ediff-suspend-hook) :append
    (defun doom-ediff-restore-wconf-h ()
      (when (window-configuration-p doom--ediff-saved-wconf)
        (set-window-configuration doom--ediff-saved-wconf)))))

#+end_src
