#+title:          Doom Emacs config.org'
:PROPERTIES:
:created: 2021-12-27
#+AUTHOR: dvsdude
#+startup: overview noindent
#+ARCHIVE: ~/org/wiki/config-change-log.org::** blocks removed
#+LocalWords:  yequake config
:END:

    #+begin_export ascii
    ==================================================================================
    #     .___                  .___          .___    "Welcome to my â˜ DOOM n'DIRE!â˜ 
    #   __| _/___  __ ______  __| _/__ __   __| _/ ____
    #  / __ | \  \/ //  ___/ / __ ||  |  \ / __ |_/ __ \   tis the only thing
    # / /_/ |  \   / \___ \ / /_/ ||  |  // /_/ |\  ___/   that fills the desire..ðŸ”¥"
    # \____ |   \_/ /____  >\____ ||____/ \____ | \___  >
    #      \/            \/      \/            \/     \/
    #  â˜ A DASTARDLY DVS DOOM CONFIGâ˜ 
    ==================================================================================
    #+end_export

* ;;;; the lexical-binding ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* ;;;; name ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

#+begin_src emacs-lisp
;; Some functionality uses this to identify you
(setq user-full-name "dvsdude"
      user-mail-address "john@doe.com")
#+end_src

* ;;;; package-management ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

Package management
#+begin_src emacs-lisp
;; add packages manually by downloading the repo

;; spray
;; (add-to-list 'load-path "~/builds/manual-packages/spray")

;; Corfu-extensions to load path
(add-to-list 'load-path
               (expand-file-name "~/.config/emacs/.local/straight/repos/corfu/extensions"))

;; add personal-repo to "load-path"
(add-to-list 'load-path "~/.config/doom/myrepo")

;; load my packaged function to open config.org named workspace
(load "~/.config/doom/myrepo/+config/+config.el")
#+end_src

* ;;;; FONTS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

Fonts
#+begin_src emacs-lisp
;; fontset ;;;;
(setq doom-font (font-spec :family "Hack Nerd Font" :size 17 :weight 'bold)
;; (setq doom-font (font-spec :family "Iosevka" :size 17 :weight 'heavy)
      doom-variable-pitch-font (font-spec :family "DroidSansMono Nerd Font" :size 17)
      ;; doom-variable-pitch-font (font-spec :family "Iosevka" :size 18)
      ;; doom-unicode-font (font-spec :family "DejaVu Sans Mono")
      doom-symbol-font (font-spec :family "DroidSansMono Nerd Font")
      doom-big-font (font-spec :family "Hack Nerd Font" :size 24 :weight 'bold))

(set-fontset-font t 'emoji
                      '("My New Emoji Font" . "iso10646-1") nil 'prepend)

#+end_src

* ;;;; theme ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

Theme
#+begin_src emacs-lisp
;; (setq doom-theme 'doom-one)
(setq doom-theme 'doom-Iosvkem)
#+end_src

* ;;;; startup-settings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

startup-settings
#+begin_src emacs-lisp
;; hl line mode
(global-hl-line-mode +1)
;; no fringe
(set-fringe-mode 0)
;; line number type
;; (setq display-line-numbers-type 'visual)
(setq display-line-numbers-type nil)
;; should put  focus in the new window ;;;;
(setq evil-split-window-below t
      evil-vsplit-window-right t)
;; set fancy splash-image
(setq fancy-splash-image "~/.config/doom/splash/doom-color.png")
;; set org-directory. It must be set before org loads
(setq org-directory "~/org/")
;; use trash
(setq trash-directory "~/.local/share/Trash/files/")
(setq delete-by-moving-to-trash t)
;; ignore-case
(setq read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t
      completion-ignore-case t)
;; gives isearch total number of matches
(setq-default isearch-lazy-count t)
;; move mouse out of the way
(mouse-avoidance-mode t)
(setq mouse-avoidance-mode "banish")
;; dictionary server ;;;;
(setq dictionary-server "dict.org")
;; number of lines of overlap in page flip ;;;;
(setq next-screen-context-lines 7)
;; this should replicate scrolloff in vim ;;
(setq scroll-margin 7)
(setq scroll-preserve-screen-position t)
;; Maximize the window upon startup
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
;;;  "Syntax color, highlighting code colors ;;;;
(add-hook 'prog-mode-hook #'rainbow-mode)
;; Sensible line breaking
(add-hook 'text-mode-hook 'visual-line-mode)
;; automatic chmod +x when you save a file with a #! shebang
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

(when (display-graphic-p)
  (global-unset-key (kbd "C-z"))
  (global-unset-key (kbd "C-x C-z")))

#+end_src

* ;;;; Dashboard ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

[[https://github.com/emacs-dashboard/emacs-dashboard][GitHub - emacs-dashboard]]

dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :demand t
  :custom
  (dashboard-startup-banner (concat  "~/.config/doom/splash/doom-color.png"))
  (dashboard-banner-logo-title "Welcome to my â˜  DOOM'nDIRE â˜  tis the only thing that fills the desire.ðŸ”¥")
  (dashboard-center-content t)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-init-info t)
  (dashboard-set-navigator t)
  (dashboard-navigator-buttons
   `(
     ((,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-rss_square" :height 1.0 :face 'font-lock-keyword-face))
       "elfeed"
       "open elfeed"
       (lambda (&rest _) (=rss)))
      (,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-book" :height 1.0 :face 'font-lock-keyword-face))
       "journal"
       "journal new entry"
       (lambda (&rest _) (org-journal-new-entry nil)))
      (,(and (display-graphic-p)
             (nerd-icons-codicon "nf-cod-settings" :height 1.0 :face 'font-lock-keyword-face))
       "config"
       "open config"
       (lambda (&rest _) (=config)))
      (,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-calendar" :height 1.0 :face 'font-lock-keyword-face))
       "calendar"
       "calendar"
       (lambda (&rest _) (=calendar)))
      (,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-tasks" :height 1.0 :face 'font-lock-keyword-face))
       "agenda"
       "agenda all todos"
       (lambda (&rest _) (org-agenda nil "n")))
      (,(and (display-graphic-p)
             (nerd-icons-mdicon "nf-md-restore" :height 1.0 :face 'font-lock-keyword-face))
       "restart"
       "restar emacs"
       (lambda (&rest _) (restart-emacs))))))
  :config
  (dashboard-setup-startup-hook)
  (add-to-list 'dashboard-items '(agenda) t)
  (setq dashboard-filter-agenda-entry 'dashboard-no-filter-agenda)
  (setq dashboard-items '((recents . 7)
                          (projects . 5)
                          (agenda . 5)))
  (setq initial-buffer-choice (lambda() (dashboard-refresh-buffer)(get-buffer "*dashboard*"))))

#+end_src

* ;;;; +Doom-dashboard ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

+doom-dashboard
#+begin_src emacs-lisp
(add-to-list '+doom-dashboard-menu-sections
             '("Add journal entry"
               :icon (nerd-icons-faicon "nf-fa-calendar" :face 'doom-dashboard-menu-title)
               :when (modulep! :lang org +journal)
               :face (:inherit (doom-dashboard-menu-title bold))
               :action org-journal-new-entry))

(add-to-list '+doom-dashboard-menu-sections
             '("open elfeed"
               :icon (nerd-icons-faicon "nf-fa-rss_square" :face 'doom-dashboard-menu-title)
               :when (modulep! :app rss +org)
               :face (:inherit (doom-dashboard-menu-title bold))
               :action =rss))

#+end_src
* ;;;; dired ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

dired
#+begin_src emacs-lisp
;; use open window for default target
(setq dired-dwim-target t)

(add-hook 'dired-mode-hook
          'dired-hide-details-mode)

;; this needed to use arrow-keys with dired-preview
(define-key! dired-mode-map
  ;; Evil remaps
  [remap evil-next-line]     #'dired-next-line
  [remap evil-previous-line] #'dired-previous-line)
#+end_src

** ;;;; dired-preview ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[[https://github.com/protesilaos/dired-preview][Dired-Preview on github]]

#+begin_src emacs-lisp

(require 'dired-preview)
(setq dired-preview-ignored-extensions-regexp
      (concat "\\."
              "\\(gz\\|"
              "zst\\|"
              "tar\\|"
              "xz\\|"
              "rar\\|"
              "zip\\|"
              "iso\\|"
              "epub"
              "\\)"))

(map! :map dired-mode-map
      :leader
      :prefix "t"
      :desc "dired preview mode"
      :n "p" 'dired-preview-mode)
#+end_src
** ;;;; ready-player ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[[https://github.com/xenodium/ready-player][ready-playeron github]]

#+begin_src emacs-lisp
(use-package! ready-player
  :hook (dired-preview-mode . ready-player-mode)
  :config
  (ready-player-mode +1))

#+end_src
** ;;;; dired-sub-tree ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(use-package! dired-subtree
  :after dired
  :config
  (bind-key "<tab>" #'dired-subtree-toggle dired-mode-map)
  (bind-key "<backtab>" #'dired-subtree-cycle dired-mode-map))
#+end_src
** ;;;; dired-open ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(after! dired
  (use-package! dired-open
    :config
    (setq dired-open-extensions '(("mkv" . "mpv")
                                  ("mp4" . "mpv")
                                  ("webm" . "mpv")))))
#+end_src

* ;;;; deft ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

deft
#+begin_src emacs-lisp
(use-package! deft
  :commands deft
  :init
  (setq deft-default-extension "org"
        deft-directory "~/org/"
        ;; de-couples filename and note title:
        deft-use-filename-as-title t
        deft-use-filter-string-for-filename t
        deft-recursive t
        ;; disable auto-save
        deft-auto-save-interval -1.0
        ;; converts the filter string into a readable file-name using kebab-case:
        deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase))
        deft-strip-summary-regexp
      (concat "\\("
          "[\n\t]" ;; blank
          "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
          "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
          "\\)"))
  :config
  (add-to-list 'deft-extensions '("md" "txt" "tex" "org"))
  (add-hook 'deft-mode-hook #'doom-mark-buffer-as-real-h)
  ;; start filtering immediately
  (set-evil-initial-state! 'deft-mode 'insert)
  (map! :map deft-mode-map
        :n "gr"  #'deft-refresh
        :n "C-s" #'deft-filter
        :i "C-n" #'deft-new-file
        :i "C-m" #'deft-new-file-named
        :i "C-d" #'deft-delete-file
        :i "C-r" #'deft-rename-file
        :n "r"   #'deft-rename-file
        :n "a"   #'deft-new-file
        :n "A"   #'deft-new-file-named
        :n "d"   #'deft-delete-file
        :n "D"   #'deft-archive-file
        :n "q"   #'kill-current-buffer))

#+end_src
* ;;;; org-settings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

[[https://orgmode.org/org.html][The Org Manual]]

org-settings
#+begin_src emacs-lisp
;; default file for notes
(setq org-default-notes-file (concat org-directory "notes.org"))
;; default diary files
(setq org-agenda-diary-file "~/org/notable-dates.org")
;; (setq diary-file "~/.config/doom/diary")

;; org insert structural template (C-c C-,) menu for adding code blocks
(after! org
(use-package! org-tempo
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))))

;; copy and paste images into an org-file
(after! org
  (use-package! org-ros
    :defer t))

;; org-refile
(setq org-refile-targets '((nil :maxlevel . 2) (org-agenda-files :maxlevel . 2)))
(setq org-outline-path-complete-in-steps nil)         ;; Refile in a single go
(setq org-refile-use-outline-path 'file)              ;; this also set by vertico

;; org-src edit window  C-c ' or spc m '
(setq org-src-window-setup 'reorganize-frame)  ;; default

;; set org-id to a timestamp instead of uuid
(setq org-id-method 'ts)

;; set one location for archives
(setq org-archive-location "~/org/archive.org::* From %s")
#+end_src

* ;;;; org-appearance ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

org-appearance
#+begin_src emacs-lisp

(with-eval-after-load 'org (global-org-modern-mode))
(after! org
  (setq org-modern-star '("â—‰" "â—‹" "â—ˆ" "â—‡" "âœ³")
        org-modern-hide-stars 'leading ;; can be nil,t,leading
        org-modern-todo nil
        org-modern-progress nil
        org-modern-tag nil))

(after! org
  (setq org-agenda-include-diary t
        org-agenda-timegrid-use-ampm 1
        org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300)))

;; un-hide emphasis-markers when under point ;;;;
(add-hook 'org-mode-hook 'org-appear-mode)
(add-hook 'org-mode-hook 'variable-pitch-mode)

;; set font size for headers ;;
(after! org
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
   '(org-document-title ((t (:height 1.7 :underline t))))
   ))

;; set `color' of emphasis types ;;;;
(after! org
  (setq org-emphasis-alist
        '(("*" my-org-emphasis-bold)
          ("/" italic)
          ("_" underline)
          ("=" org-verbatim verbatim)
          ("~" org-code verbatim)
          ("+" (:strike-through t)))))

(defface my-org-emphasis-bold
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#a60000")
    (((class color) (min-colors 88) (background dark))
     :foreground "#ff8059"))
  "My bold emphasis for Org."
  :group 'custom-faces)

(defface my-org-emphasis-italic
  '((default :inherit italic)
    (((class color) (min-colors 88) (background light))
     :foreground "#005e00")
    (((class color) (min-colors 88) (background dark))
     :foreground "#44bc44"))
  "My italic emphasis for Org."
  :group 'custom-faces)

(defface my-org-emphasis-underline
  '((default :inherit underline)
    (((class color) (min-colors 88) (background light))
     :foreground "#813e00")
    (((class color) (min-colors 88) (background dark))
     :foreground "#d0bc00"))
  "My underline emphasis for Org."
  :group 'custom-faces)

(defface my-org-emphasis-strike-through
  '((((class color) (min-colors 88) (background light))
     :strike-through "#972500" :foreground "#505050")
    (((class color) (min-colors 88) (background dark))
     :strike-through "#ef8b50" :foreground "#a8a8a8"))
  "My strike-through emphasis for Org."
  :group 'custom-faces)
#+end_src

* ;;;; org-capture ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

org-capture
#+begin_src emacs-lisp

;; brings up a buffer for capturing
;; org-capture-templates will be put in org-capture-projects-local
(defun set-org-capture-templates ()
  (setq! org-capture-templates
        '(("t" "todo Personal" entry
           (file+headline +org-capture-todo-file "Inbox")
           "** TODO %?\n%i\n%a" :prepend t)
          ("n" "notes Personal" entry
           (file+headline +org-capture-notes-file "Inbox")
           "**  %?\n%i\n%a" :prepend t)
          ("z" "organizer" entry
           (file+headline "~/org/organizer.org" "refile stuff")
           "** NEW %?\n  %i\n  " :prepend t)
          ("y" "tilt" entry
           (file+headline "~/org/wiki/tilt-doom.org" "TILT")
           "** NEW %?\n  %i\n  " :prepend t)
          ("s" "journal-schedule" plain #'org-journal-date-location
           "** TODO %?\n <%(princ org-journal--date-location-scheduled-time)>\n" :jump-to-captured t)
          ("j" "Journal entry" plain #'org-journal-find-location
           "** %(format-time-string org-journal-time-format)%?" :prepend t)
          ("k" "keybindings" entry
           (file+headline "~/org/wiki/my-keybinding-list.org" "new ones")
           "** NEW %?\n  %i\n  " :prepend t)
          ("x" "webmarks" entry
           (file+headline "~/org/webmarks.org" "bookmarks")
           "- %(org-cliplink-capture)\n" :prepend t)
          ("l" "check out later" entry
           (file+headline "todo.org" "Check out later")
           "** IDEA %?\n%i\n%a" :prepend t)
          ("p" "Templates for projects")
          ("pt" "Project-local todo" entry
           (file+headline +org-capture-project-todo-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t)
          ("pn" "Project-local notes" entry
           (file+headline +org-capture-project-notes-file "Inbox")
           "* %U %?\n%i\n%a" :prepend t)
          ("pc" "Project-local changelog" entry
           (file+headline +org-capture-project-changelog-file "Unreleased")
           "* %U %?\n%i\n%a" :prepend t)
          ("o" "Centralized templates for projects")
          ("ot" "Project todo" entry
           #'+org-capture-central-project-todo-file
           "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
          ("on" "Project notes" entry
           #'+org-capture-central-project-notes-file
           "* %U %?\n %i\n %a" :prepend t :heading "Notes")
          ("oc" "Project changelog" entry
           #'+org-capture-central-project-changelog-file
           "* %U %?\n %i\n %a" :prepend t :heading "Changelog"))))


(add-hook 'org-mode-hook #'set-org-capture-templates)


#+end_src

* ;;;; org-journal ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

org-journal
#+begin_src emacs-lisp

(setq org-journal-file-type 'daily)
(setq org-journal-date-format "%A, %d %B %Y")
(setq org-journal-enable-agenda-integration t)
(add-hook 'org-journal-mode-hook #'my/org-journal-mode-hook)

;; function needed to make an org-capture-template for org-journal
(defun org-journal-find-location ()
  (org-journal-new-entry t)
  (unless (eq org-journal-file-type 'daily)
    (org-narrow-to-subtree))
  (goto-char (point-max)))

(defvar org-journal--date-location-scheduled-time nil)
;; function to schedule things using capture templates
(defun org-journal-date-location (&optional scheduled-time)
  (let ((scheduled-time (or scheduled-time (org-read-date nil nil nil "Date:"))))
    (setq org-journal--date-location-scheduled-time scheduled-time)
    (org-journal-new-entry t (org-time-string-to-time scheduled-time))
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max))))

(defun my/org-journal-mode-hook ()
    "Hooks for org-journal-mode."
  (flyspell-mode)
  (auto-fill-mode)
  (doom-disable-line-numbers-h)
  (turn-on-visual-line-mode)
  (+zen/toggle))

;; ;; save and exit journal easily
(map! :after org
      :map org-journal-mode-map
      :prefix "C-x"
      :desc "save and kill journal"
      :ni "C-s" #'doom/save-and-kill-buffer)
;; ;; save and exit journal easily
(map! :after org
      :map org-journal-mode-map
      :prefix ("C-c j" . "kill")
      :desc "save and kill journal"
      :ni "f" #'doom/save-and-kill-buffer)
#+end_src

* ;;;; calendar ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

calendar
#+begin_src emacs-lisp
(setq +calendar-open-function #'+calendar/my-open-calendar)

;;;###autoload
(defun +calendar/my-open-calendar ()
  "change calendar sources"
  (interactive)
  (cfw:open-calendar-buffer
   ;; :custom-map cfw:my-cal-map
   :contents-sources
   (list
    (cfw:org-create-source "Green")  ; org-agenda source
    (cfw:org-create-file-source "cal" "~/org/notable-dates.org" "Cyan")  ; other org source
    (cfw:cal-create-source "Orange") ; diary source
    ;; (cfw:ical-create-source "Moon" "~/moon.ics" "Gray")  ; ICS source1
    )))

;; change calendar sources
;; By defining your own calendar commands, you can control what sources to pull
;; calendar data from:
;; example in ~/.config/emacs/modules/app/calendar/README.org

#+end_src

* ;;;; spell ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][Spelling (GNU Emacs Manual)]]
[[https://github.com/d12frosted/flyspell-correct][GitHub - flyspell-correct]]

|---------------------------+-------|
| go-to-next-error          | C-,   |
| auto-correct-word         | C-.   |
| correct-wrapper           | C-;   |
| auto-correct-word         | C-M-i |
| correct-word-before-point | C-c $ |
| correct-word-before-point | z =   |
| add word                  | z g   |
| remove word               | z w   |
|---------------------------+-------|

fly-spell
#+begin_src emacs-lisp
 ;; dict spell thesaurus transient
(use-package! powerthesaurus
    :init
    (require  'transient)
    (transient-define-prefix my/transient-spelling ()
       "Dict, Spell, PowerThesaurus transient."
      [ "Spelling"
        [ "Dictionary"
          ( "d"  "dict 1913 Lookup" dictionary-lookup-definition)
          ( "o" "doom lookup" +lookup/dictionary-definition)]
        [ "Lookups"
          ( "t"  "pt-thesaurus" powerthesaurus-lookup-word-dwim)
          ( "y"  "pt-Synonyms" powerthesaurus-lookup-synonyms-dwim)
          ( "a"  "pt-Antonyms" powerthesaurus-lookup-antonyms-dwim)
          ( "k"  "doom syn" +lookup/synonyms)]
        [ "Spelling Tools"
          ( "x"  "flyspell" flyspell-mode!)
          ( "c"  "flyspell correct" flyspell-correct-wrapper)]
        [ "Miscellaneous"
          ( "q"  "Quit" transient-quit-one)]])
    :bind
    ( "<f7>"  . my/transient-spelling))

;; remap
(define-key! [remap flyspell-auto-correct-previous-word] #'flyspell-correct-wrapper)

(setq flyspell-persistent-highlight nil)

(setq flyspell-issue-message-flag nil)

(setq ispell-personal-dictionary "/home/dvsdude/.aspell.en_CA.pws")
(setq ispell-program-name "aspell")
;; (setq ispell-extra-args '("--repl" "~/aspell.prepl"))
#+end_src

* ;;;; evil-surround ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

[[https://github.com/emacs-evil/evil-surround][GitHub - emacs-evil/evil-surround]]
[[https://github.com/emacs-evil/evil-surround#usage][usage]]

#+begin_src emacs-lisp
;; this is grabbed from Dooms config
(use-package! evil-surround
  :commands (global-evil-surround-mode
             evil-surround-edit
             evil-Surround-edit
             evil-surround-region)
  :config (global-evil-surround-mode 1))


(map! :prefix "C-c e"
      :desc "evil-embrace-dispatch"
      :n "e" #'embrace-commander)
#+end_src

* ;;;; evil-snipe ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

evil snipe
#+begin_src emacs-lisp
;; Using Doom config
(use-package! evil-snipe
  :commands evil-snipe-local-mode evil-snipe-override-local-mode
  :hook (doom-first-input . evil-snipe-override-mode)
  :hook (doom-first-input . evil-snipe-mode)
  :init
  (setq evil-snipe-smart-case t
        evil-snipe-scope 'line
        evil-snipe-repeat-scope 'visible
        evil-snipe-char-fold t))
(evil-snipe-mode t)
(evil-snipe-override-mode 1)

;; evil-snipe
 (map! :after evil-snipe
       :map evil-snipe-parent-transient-map
       "C-;" (cmd! (require 'evil-easymotion)
                   (call-interactively
                    (evilem-create #'evil-snipe-repeat
                                   :bind ((evil-snipe-scope 'whole-buffer)
                                          (evil-snipe-enable-highlight)
                                          (evil-snipe-enable-incremental-highlight))))))
(push '(?\[ "[[{(]") evil-snipe-aliases)
(add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode)

#+end_src

* ;;;; evil-easymotion/avy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

#+begin_src emacs-lisp
(map! :leader
      :prefix "s"
      :desc "avy goto char timer"
      :n "a" #'evil-avy-goto-char-timer)

(map! :leader
      :prefix "j"
      :desc "avy goto next line"
      :n "j" #'evilem-motion-next-line)
(map! :leader
      :prefix "k"
      :desc "avy goto prev line"
      :n "k" #'evilem-motion-previous-line)
(setq avy-timeout-seconds 1.0) ;;default 0.5
(setq avy-single-candidate-jump t)

;; evil-easymotion "prefix"
(evilem-default-keybindings "C-c a")
;; (evilem-default-keybindings "SPC")

#+end_src
* ;;;; Doom-vertico ;;;; mod-config ;;;;;;;;;;;;;;;;;;;;;
==================================================================================

[[https://github.com/minad/vertico][GitHub -vertico ]]

Vertico
#+begin_src emacs-lisp :tangle no

(use-package! vertico
  :hook (doom-first-input . vertico-mode)
  :init
  (defadvice! +vertico-crm-indicator-a (args)
    :filter-args #'completing-read-multiple
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  :config
  (setq vertico-resize nil
        vertico-count 17
        vertico-cycle t)
  (setq-default completion-in-region-function
                (lambda (&rest args)
                  (apply (if vertico-mode
                             #'consult-completion-in-region
                           #'completion--in-region)
                         args)))

  (map! :when (modulep! :editor evil +everywhere)
        :map vertico-map
        "M-RET" #'vertico-exit-input
        "C-SPC" #'+vertico/embark-preview
        "C-j"   #'vertico-next
        "C-M-j" #'vertico-next-group
        "C-k"   #'vertico-previous
        "C-M-k" #'vertico-previous-group
        "C-h" (cmds! (eq 'file (vertico--metadata-get 'category)) #'vertico-directory-up)
        "C-l" (cmds! (eq 'file (vertico--metadata-get 'category)) #'+vertico/enter-or-preview))

  ;; Cleans up path when moving directories with shadowed paths syntax, e.g.
  ;; cleans ~/foo/bar/// to /, and ~/foo/bar/~/ to ~/.
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
  (map! :map vertico-map "DEL" #'vertico-directory-delete-char)

  ;; These commands are problematic and automatically show the *Completions* buffer
  (advice-add #'tmm-add-prompt :after #'minibuffer-hide-completions)
  (defadvice! +vertico--suppress-completion-help-a (fn &rest args)
    :around #'ffap-menu-ask
    (letf! ((#'minibuffer-completion-help #'ignore))
      (apply fn args))))


(use-package! orderless
  :after-call doom-first-input-hook
  :config
  (defadvice! +vertico--company-capf--candidates-a (fn &rest args)
    "Highlight company matches correctly, and try default completion styles before
orderless."
    :around #'company-capf--candidates
    (let ((orderless-match-faces [completions-common-part])
          (completion-styles +vertico-company-completion-styles))
      (apply fn args)))

  (defun +vertico-orderless-dispatch (pattern _index _total)
    (cond
     ;; Ensure $ works with Consult commands, which add disambiguation suffixes
     ((string-suffix-p "$" pattern)
      `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
     ;; Ignore single !
     ((string= "!" pattern) `(orderless-literal . ""))
     ;; Without literal
     ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
     ;; Character folding
     ((string-prefix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 1)))
     ((string-suffix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 0 -1)))
     ;; Initialism matching
     ((string-prefix-p "`" pattern) `(orderless-initialism . ,(substring pattern 1)))
     ((string-suffix-p "`" pattern) `(orderless-initialism . ,(substring pattern 0 -1)))
     ;; Literal matching
     ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
     ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))
     ;; Flex matching
     ((string-prefix-p "~" pattern) `(orderless-flex . ,(substring pattern 1)))
     ((string-suffix-p "~" pattern) `(orderless-flex . ,(substring pattern 0 -1)))))
  (add-to-list
   'completion-styles-alist
   '(+vertico-basic-remote
     +vertico-basic-remote-try-completion
     +vertico-basic-remote-all-completions
     "Use basic completion on remote files only"))
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        ;; note that despite override in the name orderless can still be used in
        ;; find-file etc.
        completion-category-overrides '((file (styles +vertico-basic-remote orderless partial-completion)))
        orderless-style-dispatchers '(+vertico-orderless-dispatch)
        orderless-component-separator "[ &]")
  ;; ...otherwise find-file gets different highlighting than other commands
  (set-face-attribute 'completions-first-difference nil :inherit nil))

(defvar +vertico-company-completion-styles '(basic partial-completion orderless)
  "Completion styles for company to use.

The completion/vertico module uses the orderless completion style by default,
but this returns too broad a candidate set for company completion. This variable
overrides `completion-styles' during company completion sessions.")

(defvar +vertico-consult-fd-args nil
  "Shell command and arguments the vertico module uses for fd.")

#+end_src
* ;;;; Corfu ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

[[https://github.com/minad/corfu][GitHub -corfu ]]

corfu:
#+begin_src emacs-lisp
;;;###autoload
(defun +corfu-smart-sep-toggle-escape ()
  "Insert `corfu-separator' or toggle escape if it's already there."
  (interactive)
  (cond ((and (char-equal (char-before) corfu-separator)
              (char-equal (char-before (1- (point))) ?\\))
         (save-excursion (delete-char -2)))
        ((char-equal (char-before) corfu-separator)
         (save-excursion (backward-char 1)
                         (insert-char ?\\)))
        (t (call-interactively #'corfu-insert-separator))))


(defvar +corfu-want-ret-to-confirm t
  "Configure how the user expects RET to behave.
Possible values are
- t (default) Insert candidate if one is selected, pass-through otherwise;
- `minibuffer' Insert candidate if one is selected, pass-through otherwise,
              and immediatelly exit if in the minibuffer;
- nil Pass-through without inserting.")

(defvar +corfu-buffer-scanning-size-limit (* 1 1024 1024) ; 1 MB
  "Size limit for a buffer to be scanned by `cape-dabbrev'.")

(use-package! corfu
  :hook (doom-first-input . global-corfu-mode)
  :init
  (corfu-mode +1)
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous)
        ("RET" . nil))
  :config
  (setq corfu-auto t
        corfu-auto-delay 0.18
        corfu-auto-prefix 3
        global-corfu-modes '((not help-mode
                                  vterm-mode)t)
        corfu-cycle t
        corfu-preselect 'prompt
        corfu-count 6
        corfu-max-width 120
        corfu-on-exact-match nil
        corfu-quit-at-boundary 'separator
        corfu-quit-no-match corfu-quit-at-boundary
        tab-always-indent 'complete)
  (add-to-list 'completion-category-overrides `(lsp-capf (styles ,@completion-styles)))
  (add-to-list 'corfu-auto-commands #'lispy-colon)
  (add-to-list 'corfu-continue-commands #'+corfu-smart-sep-toggle-escape)
  (add-hook 'evil-insert-state-exit-hook #'corfu-quit))

;; Enable auto completion and configure quitting
(use-package! orderless
  :config
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles orderless partial-completion)))
        orderless-component-separator #'orderless-escapable-split-on-space)
  (set-face-attribute 'completions-first-difference nil :inherit nil))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package! savehist
  ;; persist variables across sessions
  :defer-incrementally custom
  :hook (doom-first-input . savehist-mode)
  :custom (savehist-file (concat doom-cache-dir "savehist"))
  :config
  (setq savehist-save-minibuffer-history t
        savehist-autosave-interval nil     ; save on kill only
        savehist-additional-variables
        '(kill-ring                        ; persist clipboard
          register-alist                   ; persist macros
          mark-ring global-mark-ring       ; persist marks
          search-ring regexp-search-ring)) ; persist searches
  (add-hook! 'savehist-save-hook
    (defun doom-savehist-unpropertize-variables-h ()
      "Remove text properties from `kill-ring' to reduce savehist cache size."
      (setq kill-ring
            (mapcar #'substring-no-properties
                    (cl-remove-if-not #'stringp kill-ring))
            register-alist
            (cl-loop for (reg . item) in register-alist
                     if (stringp item)
                     collect (cons reg (substring-no-properties item))
                     else collect (cons reg item))))
    (defun doom-savehist-remove-unprintable-registers-h ()
      "Remove unwriteable registers (e.g. containing window configurations).
Otherwise, `savehist' would discard `register-alist' entirely if we don't omit
the unwritable tidbits."
      ;; Save new value in the temp buffer savehist is running
      ;; `savehist-save-hook' in. We don't want to actually remove the
      ;; unserializable registers in the current session!
      (setq-local register-alist
                  (cl-remove-if-not #'savehist-printable register-alist)))))

;; corfu history
(use-package! corfu-history
  :hook ((corfu-mode . corfu-history-mode))
  :config
  (after! savehist (add-to-list 'savehist-additional-variables 'corfu-history)))

#+end_src

* ;;;; cape ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

[[https://github.com/minad/cape][github - cape]]

cape
#+begin_src emacs-lisp
(use-package! cape
  :defer t
  :init
  (add-hook! 'text-mode-hook
    (defun +corfu-add-cape-dict-h ()
      (add-hook 'completion-at-point-functions #'cape-dict -15 t)))
  (add-hook! 'prog-mode-hook
    (defun +corfu-add-cape-file-h ()
      (add-hook 'completion-at-point-functions #'cape-file -10 t)))
  (add-hook! '(org-mode-hook markdown-mode-hook)
    (defun +corfu-add-cape-elisp-block-h ()
      (add-hook 'completion-at-point-functions #'cape-elisp-block 0 t)))
  ;; Enable Dabbrev completion basically everywhere as a fallback.
    (setq cape-dabbrev-check-other-buffers t)
    ;; Set up `cape-dabbrev' options.
    (defun +dabbrev-friend-buffer-p (other-buffer)
      (< (buffer-size other-buffer) +corfu-buffer-scanning-size-limit))
    (add-hook! '(prog-mode-hook
                 text-mode-hook
                 conf-mode-hook
                 comint-mode-hook
                 eshell-mode-hook)
      (defun +corfu-add-cape-history-h ()
        (add-hook 'completion-at-point-functions #'cape-history -5 t)))
    (add-hook! '(prog-mode-hook
                 text-mode-hook
                 conf-mode-hook
                 comint-mode-hook
                 eshell-mode-hook)
      (defun +corfu-add-cape-dabbrev-h ()
        (add-hook 'completion-at-point-functions #'cape-dabbrev 20 t)))
    (after! dabbrev
      (setq dabbrev-friend-buffer-function #'+dabbrev-friend-buffer-p
            dabbrev-ignored-buffer-regexps
            '("\\` "
              "\\(TAGS\\|tags\\|ETAGS\\|etags\\|GTAGS\\|GRTAGS\\|GPATH\\)\\(<[0-9]+>\\)?")
            dabbrev-upcase-means-case-search t)
      (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
      (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
      (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))

  ;; Make these capfs composable.
  (advice-add #'lsp-completion-at-point :around #'cape-wrap-noninterruptible)
  (advice-add #'lsp-completion-at-point :around #'cape-wrap-nonexclusive)
  (advice-add #'comint-completion-at-point :around #'cape-wrap-nonexclusive)
  (advice-add #'eglot-completion-at-point :around #'cape-wrap-nonexclusive)
  (advice-add #'pcomplete-completions-at-point :around #'cape-wrap-nonexclusive))
#+end_src

* ;;;; consult ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=================================================================================

consult
#+begin_src emacs-lisp

(map! :prefix ("M-s i" . "consult-info")
      :desc "consult info emacs"
      :n "e" #'consult-info-emacs
      :desc "consult info org"
      :n "o" #'consult-info-org
      :desc "consult-info-completion"
      :n "c" #'consult-info-completion)

(defun consult-info-emacs ()
    "Search through Emacs info pages."
  (interactive)
  (consult-info "emacs" "efaq" "elisp" "cl"))

(defun consult-info-org ()
    "Search through the Org info page."
  (interactive)
  (consult-info "org"))

(defun consult-info-completion ()
    "Search through completion info pages."
  (interactive)
  (consult-info  "orderless" "embark"
                "corfu" "cape" "tempel"))
#+end_src

* ;;;; Doom-consult ;;;; mod-config ;;;;;;;;;;;;;;;;;;;;;
=================================================================================
:PROPERTIES:
:VISIBILITY: folded
:END:

#+begin_src emacs-lisp :tangle no
;; doom default-mod configuration for Consult
(use-package! consult
  :defer t
  :preface
  (define-key!
    [remap bookmark-jump]                 #'consult-bookmark
    [remap evil-show-marks]               #'consult-mark
    [remap evil-show-jumps]               #'+vertico/jump-list
    [remap evil-show-registers]           #'consult-register
    [remap goto-line]                     #'consult-goto-line
    [remap imenu]                         #'consult-imenu
    [remap Info-search]                   #'consult-info
    [remap locate]                        #'consult-locate
    [remap load-theme]                    #'consult-theme
    [remap man]                           #'consult-man
    [remap recentf-open-files]            #'consult-recent-file
    [remap switch-to-buffer]              #'consult-buffer
    [remap switch-to-buffer-other-window] #'consult-buffer-other-window
    [remap switch-to-buffer-other-frame]  #'consult-buffer-other-frame
    [remap yank-pop]                      #'consult-yank-pop
    [remap persp-switch-to-buffer]        #'+vertico/switch-workspace-buffer)
  :config
  (defadvice! +vertico--consult-recent-file-a (&rest _args)
    "`consult-recent-file' needs to have `recentf-mode' on to work correctly"
    :before #'consult-recent-file
    (recentf-mode +1))

  (setq consult-project-root-function #'doom-project-root
        consult-narrow-key "<"
        consult-line-numbers-widen t
        consult-async-min-input 2
        consult-async-refresh-delay  0.15
        consult-async-input-throttle 0.2
        consult-async-input-debounce 0.1)
  (unless +vertico-consult-fd-args
    (setq +vertico-consult-fd-args
          (if doom-projectile-fd-binary
              (format "%s --color=never -i -H -E .git --regex %s"
                      doom-projectile-fd-binary
                      (if IS-WINDOWS "--path-separator=/" ""))
            consult-find-args)))

  (consult-customize
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file
   +default/search-project +default/search-other-project
   +default/search-project-for-symbol-at-point
   +default/search-cwd +default/search-other-cwd
   +default/search-notes-for-symbol-at-point
   +default/search-emacsd
   consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   :preview-key "C-SPC")
  (consult-customize
   consult-theme
   :preview-key (list "C-SPC" :debounce 0.5 'any))
  (when (modulep! :lang org)
    (defvar +vertico--consult-org-source
      (list :name     "Org Buffer"
            :category 'buffer
            :narrow   ?o
            :hidden   t
            :face     'consult-buffer
            :history  'buffer-name-history
            :state    #'consult--buffer-state
            :new
            (lambda (name)
              (with-current-buffer (get-buffer-create name)
                (insert "#+title: " name "\n\n")
                (org-mode)
                (consult--buffer-action (current-buffer))))
            :items
            (lambda ()
              (mapcar #'buffer-name
                      (if (featurep 'org)
                          (org-buffer-list)
                        (seq-filter
                         (lambda (x)
                           (eq (buffer-local-value 'major-mode x) 'org-mode))
                         (buffer-list)))))))
    (add-to-list 'consult-buffer-sources '+vertico--consult-org-source 'append)))


(use-package! consult-dir
  :bind (([remap list-directory] . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file))
  :config
  (when (modulep! :tools docker)
    (defun +vertico--consult-dir-docker-hosts ()
      "Get a list of hosts from docker."
      (when (if (>= emacs-major-version 29)
                (require 'tramp-container nil t)
              (setq-local docker-tramp-use-names t)
              (require 'docker-tramp nil t))
        (let ((hosts)
              (docker-query-fn #'docker-tramp--parse-running-containers))
          (when (>= emacs-major-version 29)
            (setq docker-query-fn #'tramp-docker--completion-function))
          (dolist (cand (funcall docker-query-fn))
            (let ((user (unless (string-empty-p (car cand))
                          (concat (car cand) "@")))
                  (host (car (cdr cand))))
              (push (concat "/docker:" user host ":/") hosts)))
          hosts)))

    (defvar +vertico--consult-dir-source-tramp-docker
      `(:name     "Docker"
        :narrow   ?d
        :category file
        :face     consult-file
        :history  file-name-history
        :items    ,#'+vertico--consult-dir-docker-hosts)
      "Docker candiadate source for `consult-dir'.")

    (add-to-list 'consult-dir-sources '+vertico--consult-dir-source-tramp-docker t))

  (add-to-list 'consult-dir-sources 'consult-dir--source-tramp-ssh t)
  (add-to-list 'consult-dir-sources 'consult-dir--source-tramp-local t))

(use-package! consult-flycheck
  :when (modulep! :checkers syntax)
  :after (consult flycheck))
#+end_src
* ;;;; Doom-embark ;;;; mod-config ;;;;;;;;;;;;;;;;;;;;;;
=================================================================================

#+begin_src emacs-lisp :tangle no
(use-package! embark
  :defer t
  :init
  (setq which-key-use-C-h-commands nil
        prefix-help-command #'embark-prefix-help-command)
  (map! [remap describe-bindings] #'embark-bindings
        "C-;"               #'embark-act  ; to be moved to :config default if accepted
        (:map minibuffer-local-map
         "C-;"               #'embark-act
         "C-c C-;"           #'embark-export
         "C-c C-l"           #'embark-collect
         :desc "Export to writable buffer" "C-c C-e" #'+vertico/embark-export-write)
        (:leader
         :desc "Actions" "a" #'embark-act)) ; to be moved to :config default if accepted
  :config
  (require 'consult)

  (set-popup-rule! "^\\*Embark Export:" :size 0.35 :ttl 0 :quit nil)

  (defadvice! +vertico--embark-which-key-prompt-a (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    :around #'embark-completing-read-prompter
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))
  (cl-nsubstitute #'+vertico-embark-which-key-indicator #'embark-mixed-indicator embark-indicators)
  ;; add the package! target finder before the file target finder,
  ;; so we don't get a false positive match.
  (let ((pos (or (cl-position
                  'embark-target-file-at-point
                  embark-target-finders)
                 (length embark-target-finders))))
    (cl-callf2
        cons
        '+vertico-embark-target-package-fn
        (nthcdr pos embark-target-finders)))
  (defvar-keymap +vertico/embark-doom-package-map
    :doc "Keymap for Embark package actions for packages installed by Doom."
    :parent embark-general-map
    "h" #'doom/help-packages
    "b" #'doom/bump-package
    "c" #'doom/help-package-config
    "u" #'doom/help-package-homepage)
  (setf (alist-get 'package embark-keymap-alist) #'+vertico/embark-doom-package-map)
  (map! (:map embark-file-map
         :desc "Open target with sudo"        "s"   #'doom/sudo-find-file
         (:when (modulep! :tools magit)
          :desc "Open magit-status of target" "g"   #'+vertico/embark-magit-status)
         (:when (modulep! :ui workspaces)
          :desc "Open in new workspace"       "TAB" #'+vertico/embark-open-in-new-workspace))))
#+end_src
* ;;;; Doom-pdf-tools ;;;; mod-config ;;;;;;;;;;;;;;;;;;;
===================================================================================

#+begin_src emacs-lisp :tangle no
(use-package! pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :init
  (after! pdf-annot
    (defun +pdf-cleanup-windows-h ()
      "Kill left-over annotation buffers when the document is killed."
      (when (buffer-live-p pdf-annot-list-document-buffer)
        (pdf-info-close pdf-annot-list-document-buffer))
      (when (buffer-live-p pdf-annot-list-buffer)
        (kill-buffer pdf-annot-list-buffer))
      (let ((contents-buffer (get-buffer "*Contents*")))
        (when (and contents-buffer (buffer-live-p contents-buffer))
          (kill-buffer contents-buffer))))
    (add-hook! 'pdf-view-mode-hook
      (add-hook 'kill-buffer-hook #'+pdf-cleanup-windows-h nil t)))

  :config
  (defadvice! +pdf--install-epdfinfo-a (fn &rest args)
    "Install epdfinfo after the first PDF file, if needed."
    :around #'pdf-view-mode
    (if (and (require 'pdf-info nil t)
             (or (pdf-info-running-p)
                 (ignore-errors (pdf-info-check-epdfinfo) t)))
        (apply fn args)
      ;; If we remain in pdf-view-mode, it'll spit out cryptic errors. This
      ;; graceful failure is better UX.
      (fundamental-mode)
      (message "Viewing PDFs in Emacs requires epdfinfo. Use `M-x pdf-tools-install' to build it")))

  ;; Despite its namesake, this does not call `pdf-tools-install', it only sets
  ;; up hooks, auto-mode-alist/magic-mode-alist entries, global modes, and
  ;; refreshes pdf-view-mode buffers, if any.
  ;;
  ;; I avoid calling `pdf-tools-install' directly because `pdf-tools' is easy to
  ;; prematurely load in the background (e.g. when exporting an org file or by
  ;; packages like org-pdftools). And I don't want pdf-tools to suddenly block
  ;; Emacs and spew out compiler output for a few minutes in those cases. It's
  ;; abysmal UX. The `pdf-view-mode' advice above works around this with a less
  ;; cryptic failure message, at least.
  (pdf-tools-install-noverify)

  ;; For consistency with other special modes
  (map! :map pdf-view-mode-map :gn "q" #'kill-current-buffer)

  (setq-default pdf-view-display-size 'fit-page)
  ;; Enable hiDPI support, but at the cost of memory! See politza/pdf-tools#51
  (setq pdf-view-use-scaling t
        pdf-view-use-imagemagick nil)

  ;; Handle PDF-tools related popups better
  (set-popup-rules!
    '(("^\\*Outline*" :side right :size 40 :select nil)
      ("^\\*Edit Annotation " :quit nil)
      ("\\(?:^\\*Contents\\|'s annots\\*$\\)" :ignore t)))

  ;; The mode-line does serve any useful purpose is annotation windows
  (add-hook 'pdf-annot-list-mode-hook #'hide-mode-line-mode)

  ;; HACK Fix #1107: flickering pdfs when evil-mode is enabled
  (setq-hook! 'pdf-view-mode-hook evil-normal-state-cursor (list nil))

  ;; HACK Refresh FG/BG for pdfs when `pdf-view-midnight-colors' is changed by a
  ;;      theme or with `setq!'.
  ;; TODO PR this upstream?
  (defun +pdf-reload-midnight-minor-mode-h ()
    (when pdf-view-midnight-minor-mode
      (pdf-info-setoptions
       :render/foreground (car pdf-view-midnight-colors)
       :render/background (cdr pdf-view-midnight-colors)
       :render/usecolors t)
      (pdf-cache-clear-images)
      (pdf-view-redisplay t)))
  (put 'pdf-view-midnight-colors 'custom-set
       (lambda (sym value)
         (set-default sym value)
         (dolist (buffer (doom-buffers-in-mode 'pdf-view-mode))
           (with-current-buffer buffer
             (if (get-buffer-window buffer)
                 (+pdf-reload-midnight-minor-mode-h)
               ;; Defer refresh for buffers that aren't visible, to avoid
               ;; blocking Emacs for too long while changing themes.
               (add-hook 'doom-switch-buffer-hook #'+pdf-reload-midnight-minor-mode-h
                         nil 'local))))))

  ;; Silence "File *.pdf is large (X MiB), really open?" prompts for pdfs
  (defadvice! +pdf-suppress-large-file-prompts-a (fn size op-type filename &optional offer-raw)
    :around #'abort-if-file-too-large
    (unless (string-match-p "\\.pdf\\'" filename)
      (funcall fn size op-type filename offer-raw))))
#+end_src

* ;;;; my-personal-functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=================================================================================

personal-functions

*** ;;;; Insert a file link. ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
- At the prompt, enter the filename

#+begin_src emacs-lisp
;; Insert a file link. At the prompt, enter the filename
(defun +org-insert-file-link ()
  (interactive)
  (insert (format "[[%s]]" (org-link-complete-file))))
;; `map': insert-file-link (space f L)
(map! :after org
      :map org-mode-map
      :leader
      (:prefix "f"
       :desc "create link to file" "L" #'+org-insert-file-link))
#+end_src
*** ;;;; set transparency interactivly ;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; set transparency interactivly
(defun transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha-background value))

(map! :leader
     (:prefix ("t" . "toggle")
      :desc "toggle transparency" "T" #'transparency))
#+end_src
*** ;;;; my/comment-line ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; Comment or uncomment the current line
(defun my/comment-line ()
  ;; "Comment or uncomment the current line."
  (interactive)
  (save-excursion
    (if (use-region-p)
        (comment-or-uncomment-region (region-beginning) (region-end))
      (push-mark (beginning-of-line) t t)
      (end-of-line)
      (comment-dwim nil))))
(map! :desc "comment or uncomment"
      :n "M-;" #'my/comment-line)
#+end_src
*** ;;;; display workspaces in minibuffer ;;;;;;;;;;;;;;;;
#+begin_src emacs-lisp
;; this keeps the workspace-bar visable
(after! persp-mode
  (defun display-workspaces-in-minibuffer ()
    (with-current-buffer " *Minibuf-0*"
      (erase-buffer)
      (insert (+workspace--tabline))))
  (run-with-idle-timer 1 t #'display-workspaces-in-minibuffer)
  (+workspace/display))
#+end_src
*** ;;;; my/zen-scratch-pad ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+begin_src emacs-lisp
(defun dvs/zen-scratch-pad ()
   "Create a new org-mode buffer for random stuff."
   (interactive)
   (let ((buffer (generate-new-buffer "org-scratchy")))
     (switch-to-buffer buffer)
     (setq buffer-offer-save t)
     (org-mode)
     (auto-fill-mode)
     (doom-disable-line-numbers-h)
     (turn-on-visual-line-mode)
     (+zen/toggle)))

(map! :leader
      :prefix "o"
      :desc "open zen scratch"
      "X" #'dvs/zen-scratch-pad)
#+end_src
*** ;;;; my-make-new-buffer ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+begin_src emacs-lisp
(defun my-make-new-buffer ()
  (interactive)
  (let ((buffer (generate-new-buffer "*new*")))
    (set-window-buffer nil buffer)
    (with-current-buffer buffer
      (funcall (default-value 'major-mode))
      (setq doom-real-buffer-p t))))

(map! :leader
      :prefix "n"
      :desc "make new buffer"
      "b" #'my-make-new-buffer)
#+end_src
*** ;;;; Org empty buffer creation ;;;;;;;;;;;;;;;;;;;;;;;
#+begin_src emacs-lisp
;; https://tecosaur.github.io/emacs-config/config.html#org-buffer-creation
(evil-define-command +evil-buffer-org-new (_count file)
  "Creates a new ORG buffer replacing the current window, optionally
   editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)
        (auto-fill-mode)
        (setq-local doom-real-buffer-p t)))))

;; new-org-buffer (space b o)
(map! :leader
      :prefix "b"
      :desc "New empty Org buffer" "o" #'+evil-buffer-org-new)
#+end_src
*** ;;;; strip table from a org-table ;;;;;;;;;;;;;;;;;;;;
#+begin_src emacs-lisp
(defun org-table-strip-table-at-point ()
  (interactive)
  (let* ((table (delete 'hline (org-table-to-lisp)))
     (contents (orgtbl-to-generic
            table '(:sep "\t"))))
    (goto-char (org-table-begin))
    (re-search-forward "|")
    (backward-char)
    (delete-region (point) (org-table-end))
    (insert contents)))
#+end_src
*** ;;;; add time to full screen toggle ;;;;;;;;;;;;;;;;;;
#+begin_src emacs-lisp
;;;###autoload
;; add time only on fullscreen
(defun bram85-show-time-for-fullscreen (frame)
  "Show the time in the modeline when the FRAME becomes full screen."
  (let ((fullscreen (frame-parameter frame 'fullscreen)))
    (if (memq fullscreen '(fullscreen fullboth))
        (display-time-mode 1)
      (display-time-mode -1))))

(add-hook 'window-size-change-functions #'bram85-show-time-for-fullscreen)
#+end_src
*** ;;;; update config readme using ediff ;;;;;;;;;;;;;;;;

readme-update
#+begin_src emacs-lisp
(defun my/readme-update-ediff ()
    "Update git README\\ using ediff."
  (interactive)
  (ediff "~/.config/doom/config.org" "~/.config/doom/README.org"))

#+end_src
*** ;;;; consult-rg-doom-mod-dir ;;;;;;;;;;;;;;;;;;;;;;;;;
#+begin_src emacs-lisp
;; This is a command that I grabbed and assumed it to search dir.
;; the --type flag must be why
;; NOTE search results are just from the readmes
(defun doom-mod-readme-search ()
  "Search doom-modules directory using consult-ripgrep. With live-preview."
  (interactive)
  (let ((consult-ripgrep-args "rg --null --ignore-case --type org --line-buffered --color=never --max-columns=500 --no-heading --line-number"))
    (consult-ripgrep "~/.config/emacs/modules/")))

(defun dvs/doom-mod-code-search ()
  "Search doom-modules directory using consult-ripgrep. With live-preview."
  (interactive)
  (let ((consult-ripgrep-args "rg --null --ignore-case --line-buffered --color=never --max-columns=500 --no-heading --line-number"))
    (consult-ripgrep "~/.config/emacs/modules/")))

(defun dvs/dotemacs-dir-code-search ()
  "Search examples directory using consult-ripgrep. With live-preview."
  (interactive)
  (let ((consult-ripgrep-args "rg --null --ignore-case --line-buffered --color=never --max-columns=500 --no-heading --line-number"))
    (consult-ripgrep "~/dotconfig-examples/dotemacs")))

;; NOTE +default/org-note-search does this (SPC n s)
(defun dvs/org-directory-search ()
  "Search org directory using consult-ripgrep. With live-preview."
  (interactive)
  (let ((consult-ripgrep-args "rg --null --ignore-case --type org --line-buffered --color=never --max-columns=500 --no-heading --line-number"))
    (consult-ripgrep org-directory)))

;; consult directories
(map! :prefix "M-s d"
      :desc "doom-modules code search"
      :n "m" #'dvs/doom-mod-code-search
      :desc "consult org-directory"
      :n "x" #'dvs/dotemacs-dir-code-search)
#+end_src
* ;;;; my-personal-added-pkgs ;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

personal-added-pkgs

** ;;;; org-rich-yank ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

way of pasting that automatically surrounds the snippet in blocks,
marked with the major mode of where the code came from, and adds a
link to the source file after the block.
- first select code, yank, then use org-rich-yank to paste in org file.
[[file:~/.config/emacs/.local/straight/repos/org-rich-yank/README.org][org-rich-yank]]
[[https://github.com/unhammer/org-rich-yank][org-rich-yank on github]]
org-rich-yank
#+BEGIN_SRC emacs-lisp
(after! org
(use-package org-rich-yank
  :demand t
  :bind (:map org-mode-map
              ("M-p" . org-rich-yank))))
#+END_SRC

** ;;;; zone ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; (zone-when-idle 60)
#+end_src

** ;;;; beacon highlight cursor ;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(beacon-mode t)
#+end_src

** ;;;; plantuml jar configuration ;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(setq plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
  ;; Enable plantuml-mode for PlantUML files
(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  ;; Enable exporting
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))

#+end_src

** ;;;; org-web-tools ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[[https://github.com/alphapapa/org-web-tools][org-web-tools on github]]

#+begin_src emacs-lisp
(require 'org-web-tools)
;; use to download webpage text content
;; (use-package! org-web-tools)

#+end_src

** ;;;; hacker news comments ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(use-package! hnreader
  :after elfeed)

#+end_src

** ;;;; use xournal with emacs ;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(use-package! org-xournalpp
  :defer t
  :config
  (add-hook 'org-mode-hook 'org-xournalpp-mode))

#+end_src

** ;;;; journalctl-mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(use-package! journalctl-mode
  :defer t)

#+end_src
** ;;;; olivetti ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(use-package! olivetti
  :defer t)

#+end_src
** ;;;; eshell-git-prompt ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(use-package! eshell-git-prompt
  :after eshell
  :config
  (eshell-git-prompt-use-theme 'powerline))


#+end_src
* ;;;; Doom-keybindings ;;;; mod-config ;;;;;;;;;;;;;;;;;
=================================================================================

Doom-Keybindings
#+begin_src emacs-lisp :tangle no
;; Highjacks backspace to delete up to nearest column multiple of `tab-width' at
;; a time. If you have smartparens enabled, it will also:
;;  a) balance spaces inside brackets/parentheses ( | ) -> (|)
;;  b) close empty multiline brace blocks in one step:
;;     {
;;     |
;;     }
;;     becomes {|}
;;  c) refresh smartparens' :post-handlers, so SPC and RET expansions work even
;;     after a backspace.
;;  d) properly delete smartparen pairs when they are encountered, without the
;;     need for strict mode.
;;  e) do none of this when inside a string
(advice-add #'delete-backward-char :override #'+default--delete-backward-char-a)

;; HACK Makes `newline-and-indent' continue comments (and more reliably).
;;      Consults `doom-point-in-comment-functions' to detect a commented region
;;      and uses that mode's `comment-line-break-function' to continue comments.
;;      If neither exists, it will fall back to the normal behavior of
;;      `newline-and-indent'.
;;
;;      We use an advice here instead of a remapping because many modes define
;;      and remap to their own newline-and-indent commands, and tackling all
;;      those cases was judged to be more work than dealing with the edge cases
;;      on a case by case basis.
(defadvice! +default--newline-indent-and-continue-comments-a (&rest _)
  "A replacement for `newline-and-indent'.

Continues comments if executed from a commented line. Consults
`doom-point-in-comment-functions' to determine if in a comment."
  :before-until #'newline-and-indent
  (interactive "*")
  (when (and +default-want-RET-continue-comments
             (doom-point-in-comment-p)
             (functionp comment-line-break-function))
    (funcall comment-line-break-function nil)
    t))

;; This section is dedicated to "fixing" certain keys so that they behave
;; sensibly (and consistently with similar contexts).

;; Consistently use q to quit windows
(after! tabulated-list
  (define-key tabulated-list-mode-map "q" #'quit-window))

;;; Keybind schemes

;; Custom help keys -- these aren't under `+bindings' because they ought to be
;; universal.
(define-key! help-map
  ;; new keybinds
  "'"    #'describe-char
  "u"    #'doom/help-autodefs
  "E"    #'doom/sandbox
  "M"    #'doom/describe-active-minor-mode
  "O"    #'+lookup/online
  "T"    #'doom/toggle-profiler
  "V"    #'doom/help-custom-variable
  "W"    #'+default/man-or-woman
  "C-k"  #'describe-key-briefly
  "C-l"  #'describe-language-environment
  "C-m"  #'info-emacs-manual

  ;; Unbind `help-for-help'. Conflicts with which-key's help command for the
  ;; <leader> h prefix. It's already on ? and F1 anyway.
  "C-h"  nil

  ;; replacement keybinds
  ;; replaces `info-emacs-manual' b/c it's on C-m now
  "r"    nil
  "rr"   #'doom/reload
  "rt"   #'doom/reload-theme
  "rp"   #'doom/reload-packages
  "rf"   #'doom/reload-font
  "re"   #'doom/reload-env

  ;; make `describe-bindings' available under the b prefix which it previously
  ;; occupied. Add more binding related commands under that prefix as well
  "b"    nil
  "bb"   #'describe-bindings
  "bi"   #'which-key-show-minor-mode-keymap
  "bm"   #'which-key-show-major-mode
  "bt"   #'which-key-show-top-level
  "bf"   #'which-key-show-full-keymap
  "bk"   #'which-key-show-keymap

  ;; replaces `apropos-documentation' b/c `apropos' covers this
  "d"    nil
  "db"   #'doom/report-bug
  "dc"   #'doom/goto-private-config-file
  "dC"   #'doom/goto-private-init-file
  "dd"   #'doom-debug-mode
  "df"   #'doom/help-faq
  "dh"   #'doom/help
  "dl"   #'doom/help-search-load-path
  "dL"   #'doom/help-search-loaded-files
  "dm"   #'doom/help-modules
  "dn"   #'doom/help-news
  "dN"   #'doom/help-search-news
  "dpc"  #'doom/help-package-config
  "dpd"  #'doom/goto-private-packages-file
  "dph"  #'doom/help-package-homepage
  "dpp"  #'doom/help-packages
  "ds"   #'doom/help-search-headings
  "dS"   #'doom/help-search
  "dt"   #'doom/toggle-profiler
  "du"   #'doom/help-autodefs
  "dv"   #'doom/version
  "dx"   #'doom/sandbox

  ;; replaces `apropos-command'
  "a"    #'apropos
  "A"    #'apropos-documentation
  ;; replaces `describe-copying' b/c not useful
  "C-c"  #'describe-coding-system
  ;; replaces `Info-got-emacs-command-node' b/c redundant w/ `Info-goto-node'
  "F"    #'describe-face
  ;; replaces `view-hello-file' b/c annoying
  "h"    nil
  ;; replaces `view-emacs-news' b/c it's on C-n too
  "n"    #'doom/help-news
  ;; replaces `help-with-tutorial', b/c it's less useful than `load-theme'
  "t"    #'load-theme
  ;; replaces `finder-by-keyword' b/c not useful
  "p"    #'doom/help-packages
  ;; replaces `describe-package' b/c redundant w/ `doom/help-packages'
  "P"    #'find-library)

(after! which-key
  (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) d\\'" prefix-re))
                  nil . "doom")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) r\\'" prefix-re))
                  nil . "reload")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) b\\'" prefix-re))
                  nil . "bindings")
                which-key-replacement-alist)))


(when (modulep! +bindings)
  ;; Make M-x harder to miss
  (define-key! 'override
    "M-x" #'execute-extended-command
    "A-x" #'execute-extended-command)

  ;; A Doom convention where C-s on popups and interactive searches will invoke
  ;; ivy/helm/vertico for their superior filtering.
  (when-let (command (cond ((modulep! :completion ivy)
                            #'counsel-minibuffer-history)
                           ((modulep! :completion helm)
                            #'helm-minibuffer-history)
                           ((modulep! :completion vertico)
                            #'consult-history)))
    (define-key!
      :keymaps (append +default-minibuffer-maps
                       (when (modulep! :editor evil +everywhere)
                         '(evil-ex-completion-map)))
      "C-s" command))

  ;; Smarter C-a/C-e for both Emacs and Evil. C-a will jump to indentation.
  ;; Pressing it again will send you to the true bol. Same goes for C-e, except
  ;; it will ignore comments+trailing whitespace before jumping to eol.
  (map! :gi "C-a" #'doom/backward-to-bol-or-indent
        :gi "C-e" #'doom/forward-to-last-non-comment-or-eol
        ;; Standardizes the behavior of modified RET to match the behavior of
        ;; other editors, particularly Atom, textedit, textmate, and vscode, in
        ;; which ctrl+RET will add a new "item" below the current one and
        ;; cmd+RET (Mac) / meta+RET (elsewhere) will add a new, blank line below
        ;; the current one.

        ;; C-<mouse-scroll-up>   = text scale increase
        ;; C-<mouse-scroll-down> = text scale decrease
        [C-down-mouse-2] (cmd! (text-scale-set 0))

        ;; auto-indent on newline by default
        :gi [remap newline] #'newline-and-indent
        ;; insert literal newline
        :i  "S-RET"         #'+default/newline
        :i  [S-return]      #'+default/newline
        :i  "C-j"           #'+default/newline

        ;; Add new item below current (without splitting current line).
        :gi "C-RET"         #'+default/newline-below
        :gn [C-return]      #'+default/newline-below
        ;; Add new item above current (without splitting current line)
        :gi "C-S-RET"       #'+default/newline-above
        :gn [C-S-return]    #'+default/newline-above

#+end_src

* ;;;; my-keybindings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

my-keybindings
** ;;;; (]) next ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; (]) next visible header in org
(map! :after org
      :map org-mode-map
      :prefix "]"
      :desc "next org visible header"
      :n "j" #'org-next-visible-heading)
#+end_src

** ;;;; ([) previous ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
(map! :after org
      :map org-mode-map
      :prefix "["
      :desc "prev org visible header"
      :n "k" #'org-previous-visible-heading)
#+end_src

** ;;;; (D) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; (d) demarcate or create source-block
(map! :after org
      :leader
      :prefix "d"
      :desc "demarcate/create source-block"
      :n "b" #'org-babel-demarcate-block)
#+end_src
** ;;;; (f) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+begin_src emacs-lisp
(map! :after dired
      :map dired-mode-map
      :leader
      :prefix "f"
      :desc "open all marked files at once"
      :n "m" #'dired-do-find-marked-files)
#+end_src
** ;;;; (i) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; (i) insert
(map! :leader
      :prefix "i"
      ;; inserts selected text to chosen buffer
      :desc "append to buffer"
      :n "t" #'append-to-buffer
      ;; inserts entire buffer at point
      :desc "insert buffer at point"
      :n "b" #'insert-buffer
      ;; inserts contents of webpage
      :desc "websites-content to org"
      :n "w" #'org-web-tools-read-url-as-org)
#+end_src

** ;;;; (l) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; (l) list-processes
(map! :leader
      :prefix "l"
      :desc "list processes" "p" #'list-processes)
#+end_src

** ;;;; (o) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; (o) open
(map! :after org
      :leader
      :prefix ("o" . "open")
      ;; cycle agenda files
      :desc "cycle agenda files"
      :n "a f" #'org-cycle-agenda-files
      ;; open calendar in named workspace
      :desc "open calendar"
      :n "c" #'=calendar
      ;; toggle default-scratch buffer
      :desc "open defalt scratch-buffer"
      :n "x" #'scratch-buffer
      :desc "open org config"
      :n "i" (lambda () (interactive) (find-file "~/.config/doom/config.org"))
      ;; jump to todo.org
      :desc "open org todos"
      :n "t" (lambda () (interactive) (find-file "~/org/todo.org"))
      ;; jump to notes.org
      :desc "open org notes"
      :n "n" (lambda () (interactive) (find-file "~/org/notes.org"))
      ;; jump to org organizer
      :desc "open org organizer"
      :n "0" (lambda () (interactive) (find-file "~/org/organizer.org"))
      ;; jump to org folder
      :desc "open org Directory"
      :n "o" (lambda () (interactive) (find-file "~/org/"))
      ;; jump to org wiki folder
      :desc "open org wiki"
      :n "k" (lambda () (interactive) (find-file "~/org/wiki/")))
#+end_src

** ;;;; (t) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; (t) toogle
(map! :leader
      :prefix ("t" . "toggle")
      :desc "toggle olivetti-mode"
      :n "o" 'olivetti-mode
      ;; :desc "toggle vertico grid"
      ;; :n "p" #'pomidor
      :desc "toggle vertico grid"
      :n "g" 'vertico-grid-mode
      :desc "toggle eshell"
      :n "e" #'+eshell/toggle)
#+end_src
** ;;;; C-c ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+begin_src emacs-lisp
;; Minibuffer history
(map! "C-c h" #'consult-history)
;; tranpose function for missed punctuation
(map! "C-c t" #'transpose-chars)
;; insert structural template
(map! "C-c b" #'org-insert-structure-template)
;; ;; start modes
(map! :prefix ("C-c m" . "mode command")
      "o" #'org-mode
      "i" #'lisp-interaction-mode
      "e" #'emacs-lisp-mode
      "f" #'fundamental-mode)
#+end_src
** ;;;; global ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; scroll-lock
(map! "<f9>" #'scroll-lock-mode)
;; quick-calc
(map! "M-# q" #'quick-calc)
;; close other window ;;;;
(map! "C-1" #'delete-other-windows)
;; switch other window
(map! "C-2" #'switch-to-buffer-other-window)
;; Make `v$' not include the newline character ;;;;
(general-define-key
:states '(visual state)
"$" '(lambda ()
        (interactive)
        (evil-end-of-line)))
#+end_src

* ;;;; Key-chords ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://github.com/emacsorphanage/key-chord][GitHub -key-chord.]]

key-chords
#+begin_src emacs-lisp
(use-package! key-chord
  :defer t
  :init
  (key-chord-mode 1))
;; Exit insert mode by pressing j and then j quickly
;; Max time delay between two key presses to be considered a key chord
(setq key-chord-two-keys-delay 0.1) ; default 0.1
;; Max time delay between two presses of the same key to be considered a key chord.
;; Should normally be a little longer than;key-chord-two-keys-delay.
(setq key-chord-one-key-delay 0.2) ; default 0.2
;; (key-chord-define evil-insert-state-map "hb" '+default--delete-backward-char-a)
(key-chord-define evil-insert-state-map "jn" '+default--delete-backward-char-a)
(key-chord-define evil-insert-state-map "gb" 'transpose-chars)
(key-chord-define evil-insert-state-map "ji" 'backward-kill-word)
(key-chord-define evil-normal-state-map "vv" 'evil-visual-line)
(key-chord-define evil-normal-state-map "cx" 'evilnc-comment-or-uncomment-lines)
#+end_src

* ;;;; which-key ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

 - the paging commands do not work reliably with the minibuffer option.
 Use the side window on the bottom option if you need paging.

 - NOTE #2 "?" and <f1> seem to work. found comment claiming <f5>
 is the pager command will need to try.

#+begin_src emacs-lisp
;; this should help with paging in which-key
;; NOTE #1 commented this out doom says it is a problem and "?" and <f1> should work
  ;; Unbind `help-for-help'. Conflicts with which-key's help command for the
  ;; <leader> h prefix. It's already on ? and F1 anyway.
  ;; "C-h"  nil
;; will give it a go,
;; (setq which-key-use-C-h-commands t)

;; delay
(setq which-key-idle-delay 1.5)

;; (which-key-setup-minibuffer)
(which-key-setup-side-window-bottom)
;;(which-key-setup-side-window-right)
;;(which-key-setup-side-window-right-bottom)
;; (setq which-key-use-C-h-commands nil)

#+end_src

* ;;;; mpv.el ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

mpv.el
#+begin_src emacs-lisp
;; mpv commands

;; make mpv type link
(defun org-mpv-complete-link (&optional arg)
  (replace-regexp-in-string
   "file:" "mpv:"
   (org-link-complete-file arg)
   t t))
(org-link-set-parameters "mpv"
  :follow #'mpv-play :complete #'org-mpv-complete-link)

;; mpv-play-clipboard - play url from clipboard
(defun mpv-play-clipboard ()
  "Start an mpv process playing the video stream at URL."
  (interactive)
  (let ((url (current-kill 0 t)))
  (unless (mpv--url-p url)
    (user-error "Invalid argument: `%s' (must be a valid URL)" url))
  (if (not mpv--process)
      ;; mpv isnt running play file
      (mpv-start url)
      ;; mpv running append file to playlist
    (mpv--playlist-append url))))

;; frame step forward
(with-eval-after-load 'mpv
  (defun mpv-frame-step ()
    "Step one frame forward."
    (interactive)
    (mpv--enqueue '("frame-step") #'ignore)))


;; frame step backward
(with-eval-after-load 'mpv
  (defun mpv-frame-back-step ()
    "Step one frame backward."
    (interactive)
    (mpv--enqueue '("frame-back-step") #'ignore)))


;; mpv take a screenshot
(with-eval-after-load 'mpv
  (defun mpv-screenshot ()
    "Take a screenshot"
    (interactive)
    (mpv--enqueue '("screenshot") #'ignore)))


;; mpv show osd
(with-eval-after-load 'mpv
  (defun mpv-osd ()
    "Show the osd"
    (interactive)
    (mpv--enqueue '("set_property" "osd-level" "3") #'ignore)))


;; add a newline in the current document
(defun end-of-line-and-indented-new-line ()
  (interactive)
  (end-of-line)
  (newline-and-indent))

;; mpv-hydra ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defhydra hydra-mpv (global-map "<f8> m")
  "
  ^Seek^                    ^Actions^                ^General^
  ^^^^^^^^---------------------------------------------------------------------------
  _h_: seek back -5         _,_: back frame          _i_: insert playback position
  _j_: seek back -60        _._: forward frame       _n_: insert a newline
  _k_: seek forward 60      _SPC_: pause             _s_: take a screenshot
  _l_: seek forward 5       _q_: quit mpv            _o_: show the osd
  ^
  "
  ("h" mpv-seek-backward "-5")
  ("j" mpv-seek-backward "-60")
  ("k" mpv-seek-forward "60")
  ("l" mpv-seek-forward "5")
  ("," mpv-frame-back-step)
  ("." mpv-frame-step)
  ("SPC" mpv-pause)
  ("q" mpv-kill)
  ("s" mpv-screenshot)
  ("i" mpv-insert-playback-position)
  ("o" mpv-osd)
  ("n" end-of-line-and-indented-new-line))

#+end_src

* ;;;; media-note ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
====================================================================================

[[file:~/.config/emacs/.local/straight/repos/org-media-note/README.org][org-media-note README]]

media-note
#+begin_src emacs-lisp

(after! org
(use-package! org-media-note
  :hook (org-mode .  org-media-note-mode)
  :bind (("<f8> n" . org-media-note-hydra/body))  ;; Main entrance
  :config
  (setq org-media-note-screenshot-image-dir "~/pictures/")))  ;; Folder to save screenshot

#+end_src
* ;;;; web-url-handlers ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

web-url-handlers
#+begin_src emacs-lisp
;; ;; this is mostly the original that worked
(defun my/mpv-play-url (&optional url &rest args)
  "Start mpv for URL ARGS."
  (interactive (browse-url-interactive-arg "URL: "))
  (mpv-start url))

(defun elfeed-open-hnreader-url (url &optional new-window)
  "Open HN-comments URL in a NEW-WINDOW as a org-buffer."
  (interactive (browse-url-interactive-arg "URL: "))
  (hnreader-comment url))

;; open links in eww
(defun dvs-eww (url &optional arg)
    "Pass URL to appropriate client"
  (interactive
   (list (browse-url-interactive-arg "URL: ")
         current-prefix-arg))
  (let ((url-parsed (url-generic-parse-url url)))
    (pcase (url-type url-parsed)
            (_ (eww url arg)))))

;;;; `browse-url'
(setq browse-url-browser-function 'eww-browse-url)
(setq browse-url-secondary-browser-function 'browse-url-default-browser)
(setq browse-url-handlers
      '(("\\.\\(gifv?\\|avi\\|AVI\\|mp[4g]\\|MP4\\|MP3\\|webm\\)$" . my/mpv-play-url)
        ("^https?://\\(www\\.youtube\\.com\\|youtu\\.be\\)/" . my/mpv-play-url)
        ("^https?://\\(odysee\\.com\\|rumble\\.com\\)/" . my/mpv-play-url)
        ("^https?://\\(t\\.co/[a-zA-Z0-9]?*\\|x\\.com/[a-zA-Z]?*/status/[0-9]?*\\)" . my/mpv-play-url)
        ("^https?://\\(off-guardian\.org\\|\.substack\\.com\\|tomluongo\\.me\\)/" . dvs-eww)
        ;; ("^https?://\\(emacs.stackexchange.com\\|news.ycombinator.com\\)/" . dvs-eww)
        ("^https?://\\(news.ycombinator.com\\)/" . elfeed-open-hnreader-url)
        ("." . browse-url-default-browser)))
;; * NOTE this `was' a customized variable
#+end_src

* ;;;; you-tube-sub-extractor ;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://github.com/agzam/youtube-sub-extractor.el][GitHub - agzam/youtube-sub-extractor.el]]

yt-sub-ext
#+begin_src emacs-lisp
(use-package! youtube-sub-extractor
  :defer t
  :commands
  (youtube-sub-extractor-extract-subs)
  :config
  (map! :map youtube-sub-extractor-subtitles-mode-map
      :desc "copy timestamp URL"
      :n "RET" #'youtube-sub-extractor-copy-ts-link
      :desc "browse at timestamp"
      :n "C-c C-o" #'youtube-sub-extractor-browse-ts-link))

(setq youtube-sub-extractor-timestamps 'left-margin)
(setq youtube-sub-extractor-min-chunk-size 30)

(require 'thingatpt)
(defun youtube-sub-extractor-extract-subs-at-point ()
   "extract subtitles from a youtube link at point"
(interactive)
(youtube-sub-extractor-extract-subs (thing-at-point-url-at-point)))

(map! :leader
      :prefix "v"
      :desc "YouTube subtitles"
      :n "E" #'youtube-sub-extractor-extract-subs)

(map! :leader
      :prefix "v"
      :desc "YouTube subtitles at point"
      :n "e" #'youtube-sub-extractor-extract-subs-at-point)
#+end_src

* ;;;; yeetube ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=================================================================================

yeetube
#+begin_src emacs-lisp

(use-package! yeetube
  :defer t
  :init (define-prefix-command 'my/yeetube-map)
  :config
  (setq yeetube-download-directory "~/Videos")
  :bind (("C-c y" . 'my/yeetube-map)
          :map my/yeetube-map
                  ("s" . 'yeetube-search)
                  ("b" . 'yeetube-play-saved-video)
                  ("d" . 'yeetube-download-videos)
                  ("p" . 'yeetube-mpv-toggle-pause)
                  ("v" . 'yeetube-mpv-toggle-video)
                  ("V" . 'yeetube-mpv-toggle-no-video-flag)
                  ("k" . 'yeetube-remove-saved-video)))

(map! :map yeetube-mode-map
     [remap evil-ret] #'yeetube-play)

(map! :leader
      :prefix "s"
      :desc "search yeetube" "y" #'yeetube-search)
#+end_src
* ;;;; spray ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://tecosaur.github.io/emacs-config/config.html#spray][tecosaur-config #spray]]

spray
#+begin_src emacs-lisp
(use-package spray
  ;; :load-path "~/builds/manual-packages/spray"
  :defer t
  :commands (spray-mode)
  :config
  (setq spray-wpm 220
        spray-height 800))

(defun spray-mode-hide-cursor ()
    "Hide or unhide the cursor as is appropriate."
    (if spray-mode
        (setq-local spray--last-evil-cursor-state evil-normal-state-cursor
                    evil-normal-state-cursor '(nil))
      (setq-local evil-normal-state-cursor spray--last-evil-cursor-state)))
  (add-hook 'spray-mode-hook #'spray-mode-hide-cursor)

(map! "<f6>" #'spray-mode)
(map! :after spray
      :map spray-mode-map
      :n "<return>" #'spray-start/stop
      :n "M-f" #'spray-faster
      :n "M-s" #'spray-slower
      :n [remap keyboard-quit] 'spray-quit
      :n "q" #'spray-quit)
;; "Minor modes to toggle off when in spray mode."
(setq spray-unsupported-minor-modes
  '(beacon-mode buffer-face-mode smartparens-mode
		     column-number-mode line-number-mode ))
(setq cursor-in-non-selected-windows nil)
#+end_src

* ;;;; elfeed-functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

elfeed-functions

*** ;;;; elfeed-mpv ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; "Watch a video from URL in MPV" ;;
;;;###autoload
(defun elfeed-v-mpv (url)
  "open URL in mpv"
  (message "just a sec...video will start soon")
  (start-process "mpv" nil "mpv" url))

;;;###autoload
(defun elfeed-view-mpv (&optional use-generic-p)
  "Youtube-feed link"
  (interactive "P")
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (elfeed-v-mpv it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
#+end_src

*** ;;;; elfeed-youtube ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; youtube downloader ;;;;
(defun yt-dl-it (url)
  "async yt-dlp download from url"
  (interactive)
  (let ((default-directory "~/Videos"))
    (async-shell-command (format "yt-dlp %s" url))))

(defun elfeed-youtube-dl ()
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (yt-dl-it it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
#+end_src

*** ;;;; elfeed-eww ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; browse with eww ;;;;
(defun elfeed-eww-open ()
  "Open in eww."
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (eww-browse-url it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

(defun elfeed-open-with-eww ()
  "Open in eww with `eww-readable'."
  (interactive)
  (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
    (eww  (elfeed-entry-link entry))
    (add-hook 'eww-after-render-hook 'eww-readable t)))

#+end_src

*** ;;;; elfeed-subtitle-extractor ;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; youtube-sub-extractor ;;;;
(defun yt-sub-ex ()
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (youtube-sub-extractor-extract-subs-at-point))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
#+end_src

*** ;;;; elfeed-reddit ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; reddit show comments ;;;;
(defun my/elfeed-reddit-show-commments (&optional link)
  (interactive)
  (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                    elfeed-show-entry
                  (elfeed-search-selected :ignore-region)))
         (link (if link link (elfeed-entry-link entry))))
    (reddigg-view-comments link)))
#+end_src

*** ;;;; elfeed-tag-star ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; define tag "star" ;;;;
(defun elfeed-expose (function &rest args)
    "Return an interactive version of FUNCTION, exposing it to the user."
  (lambda () (interactive) (apply function args)))
(defalias 'elfeed-toggle-star
       (elfeed-expose #'elfeed-search-toggle-all 'star))
#+end_src

*** ;;;; elfeed-hacker-news ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; hn-show-comments from search-mode ;;;;
(defun dvs/elfeed-hn-show-comments ()
  "hacker news comment reader"
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'read) ;; mark as read use "'unread"
             when (cdr (elfeed-entry-id entry))
             do (hnreader-promise-comment it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))
;; this command could be added to the function
;; (setq-local hnreader-view-comments-in-same-window nil/t)
#+end_src
*** ;;;; elfeed-goodies ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; elfeed-goodies
(use-package! elfeed-goodies
  :after elfeed
  :config
  (elfeed-goodies/setup))

#+end_src
* ;;;; elfeed ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

Elfeed
#+begin_src emacs-lisp
;; This is an opinionated workflow that turns Emacs into an RSS reader, inspired
;; by apps Reeder and Readkit. It can be invoked via `=rss'. Otherwise, if you
;; don't care for the UI you can invoke elfeed directly with `elfeed'.

(defvar +rss-split-direction 'below
  "What direction to pop up the entry buffer in elfeed.")

(defvar +rss-enable-sliced-images t
  "scroll images smoother")

(defvar +rss-workspace-name "*rss*"
  "Name of the workspace that contains the elfeed buffer.")

;; keymap ;;
(map! :leader
      :prefix "o"
      :desc "open elfeed" "e" #'=rss)

;; elfeed
(use-package! elfeed
  :commands elfeed
  :init
  (setq elfeed-db-directory (concat doom-local-dir "elfeed/db/")
        elfeed-enclosure-default-dir (concat doom-local-dir "elfeed/enclosures/"))
  :config
  (setq elfeed-search-filter "@2-week-ago "
        elfeed-show-entry-switch #'pop-to-buffer
        elfeed-show-entry-delete #'+rss/delete-pane
        shr-max-image-proportion 0.8)

  (set-popup-rule! "^\\*elfeed-entry"
    :size 0.75 :actions '(display-buffer-below-selected)
    :select t :quit nil :ttl t)

  (make-directory elfeed-db-directory t)

  ;; Ensure elfeed buffers are treated as real
  (add-hook! 'doom-real-buffer-functions
    (defun +rss-buffer-p (buf)
      (string-match-p "^\\*elfeed" (buffer-name buf))))

  ;; Enhance readability of a post
  (add-hook 'elfeed-show-mode-hook #'+rss-elfeed-wrap-h)
  (add-hook! 'elfeed-search-mode-hook
    (add-hook 'kill-buffer-hook #'+rss-cleanup-h nil 'local))
  (add-hook 'elfeed-search-mode-hook #'elfeed-summary)

  ;; Large images are annoying to scroll through, because scrolling follows the
  ;; cursor, so we force shr to insert images in slices.
  (when +rss-enable-sliced-images
    (setq-hook! 'elfeed-show-mode-hook
      shr-put-image-function #'+rss-put-sliced-image-fn
      shr-external-rendering-functions '((img . +rss-render-image-tag-without-underline-fn))))

  ;; keymap
  (map! :after elfeed
        :map elfeed-search-mode-map
        :n [remap save-buffer] 'elfeed-tube-save
        :n "8" #'elfeed-toggle-star
        :n "a" #'elfeed-curate-edit-entry-annoation
        :n "d" #'elfeed-youtube-dl
        :n "e" #'elfeed-eww-open
        :n "F" #'elfeed-tube-fetch
        :n "h" #'dvs/elfeed-hn-show-comments
        :n "m" #'elfeed-curate-toggle-star
        :n "r" #'elfeed-search-update--force
        :n "R" #'elfeed-summary
        :n "q" #'elfeed-kill-buffer
        :n "T" #'my/elfeed-reddit-show-commments
        :n "v" #'elfeed-view-mpv
        :n "x" #'elfeed-curate-export-entries
        :n "Y" #'yt-sub-ex
        :n (kbd "M-RET") #'elfeed-search-browse-url)
  (map! :after elfeed-show
        :map elfeed-show-mode-map
        :n [remap next-buffer] #'+rss/next
        :n [remap previous-buffer] #'+rss/previous
        :n [remap save-buffer] 'elfeed-tube-save
        :n "a" #'elfeed-curate-edit-entry-annoation
        :n "d" #'yt-dl-it
        :n "e" #'elfeed-open-with-eww
        :n "m" #'elfeed-curate-toggle-star
        :n "x" #'elfeed-kill-buffer
        :n "gc" nil
        :n "gc" #'elfeed-kill-link-url-at-point))

#+end_src

* ;;;; elfeed-org ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

elfeed-org
#+begin_src emacs-lisp
(use-package! elfeed-org
  :after elfeed
  :preface
  (setq rmh-elfeed-org-files (list "elfeed-feeds.org"))
  ;; (setq rmh-elfeed-org-files (list "~/.config/doom/elfeed-feeds.org"))
  :config
  (elfeed-org)
  (defadvice! +rss-skip-missing-org-files-a (&rest _)
    :before '(elfeed rmh-elfeed-org-mark-feed-ignore elfeed-org-export-opml)
    (unless (file-name-absolute-p (car rmh-elfeed-org-files))
      (let* ((default-directory org-directory)
             (files (mapcar #'expand-file-name rmh-elfeed-org-files)))
        (dolist (file (cl-remove-if #'file-exists-p files))
          (message "elfeed-org: ignoring %S because it can't be read" file))
        (setq rmh-elfeed-org-files (cl-remove-if-not #'file-exists-p files))))))
#+end_src

* ;;;; elfeed-curate ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

elfeed-curate
#+begin_src emacs-lisp
(after! elfeed
(use-package elfeed-curate))

(setq elfeed-curate-star-tag "cur8")

#+end_src

* ;;;; elfeed-tube ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://github.com/karthink/elfeed-tube][GitHub - elfeed-tube]]

#+begin_src emacs-lisp
(after! elfeed
(use-package elfeed-tube
  :demand t
  :config
  (elfeed-tube-setup)))

(after! elfeed
(use-package elfeed-tube-mpv))
#+end_src

* ;;;; elfeed-summary ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================
:PROPERTIES:
:VISIBILITY: folded
:END:

[[https://github.com/SqrtMinusOne/elfeed-summary][GitHub - elfeed-summary]]

Elfeed-summary
#+begin_src emacs-lisp

(use-package! elfeed-summary
  :defer t
  :after elfeed)

(setq elfeed-summary-other-window t)

(map! :map elfeed-summary-mode-map
      :desc "unjam elfeed"
      :n "m" #'elfeed-unjam)
#+end_src

** elfeed-summary-buffer layout

#+begin_src emacs-lisp
(setq elfeed-summary-settings
      '((group (:title . "today")
         (:elements
          (search
           (:filter . "@1-day-ago")
           (:title . ""))))
        (group (:title . "Daily")
               (:elements
                (query . day))
               (:hide t))
        (group (:title . "searches Days")
               (:elements
                (group
                 (:title . "2 days")
                 (:elements
                  (search
                   (:filter . "@2-day-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "3 days")
                 (:elements
                  (search
                   (:filter . "@3-day-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "4 days")
                 (:elements
                  (search
                   (:filter . "@4-day-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "1 week")
                 (:elements
                  (search
                   (:filter . "@7-day-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "2 weeks")
                 (:elements
                  (search
                   (:filter . "@2-weeks-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "3 weeks")
                 (:elements
                  (search
                   (:filter . "@3-weeks-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "1 month")
                 (:elements
                  (search
                   (:filter . "@1-month-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "2 months")
                 (:elements
                  (search
                   (:filter . "@2-month-ago")
                   (:title . "")))
                 (:hide t))
                (group
                 (:title . "6 months")
                 (:elements
                  (search
                   (:filter . "@6-months-ago +unread")
                   (:title . "+unread"))
                  (search
                   (:filter . "@6-months-ago")
                   (:title . "+all")))))
               (:hide t))
        ;; ...

        ;; ...
        (group (:title . "stared")
               (:elements
                (search
                 (:filter . "+star")
                 (:title . "")))
               (:hide t))
        (group (:title . "Videos")
               (:elements
                (group
                 (:title . "truth")
                 (:elements
                  (query . (and vid truth)))
                 (:hide t))
                (group
                 (:title . "humor")
                 (:elements
                  (query . (and vid fun)))
                 (hide t))
                (group
                 (:title . "real")
                 (:elements
                  (query . (and vid real)))
                 (hide t))
                (group
                 (:title . "history")
                 (:elements
                  (query . (and vid hist)))
                 (hide t))
                (group
                 (:title . "emacs")
                 (:elements
                  (query . (and vid emacs)))
                 (hide t))
                (group
                 (:title . "websites")
                 (:elements
                  (query . (and vid web)))
                 (hide t))
                (group
                 (:title . "youtube")
                 (:elements
                  (query . (and vid yt)))
                 (:hide t))
                (group
                 (:title . "odysee")
                 (:elements
                  (query . (and vid odys)))
                 (:hide t))
                (group
                 (:title . "bitchute")
                 (:elements
                  (query . (and vid bit)))))
               (:hide t))
        (group (:title . "forums")
               (:elements
                (query . forum))
               (:hide t))
        (group (:title . "Humor")
               (:elements
                (query . fun))
               (:hide t))
        (group (:title . "Repos")
               (:elements
                (query . github))
               (:hide t))
        (group (:title . "Doom")
               (:elements
                (query . doom))
               (:hide t))
        (group (:title . "Emacs")
               (:elements
                (query . emacs))
               (:hide t))
        (group (:title . "Linux")
               (:elements
                (query . linux))
               (:hide t))
        (group (:title . "Corbett")
               (:elements
                (query . corbett))
               (:hide t))
        (group (:title . "science")
               (:elements
                (query . sci))
               (:hide t))
        (group (:title . "Substack")
               (:elements
                (query . sub))
               (:hide t))
        (group (:title . "searches all")
               (:elements
                (group
                 (:title . "ungrouped")
                 (:elements :misc))))))

#+end_src

* ;;;; eww ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

EWW
#+begin_src emacs-lisp

;; found in manual for eww w/spc h R ;;;;
(setq eww-retrieve-command
     '("brave" "--headless" "--dump-dom"))
#+end_src

** ;;;; eww use pdf-tools ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; https://emacs.stackexchange.com/questions/4089/
;; The behavior can be enabled or disabled by
;; setq-ing the variable tv/prefer-pdf-tools to t or nil
(defvar tv/prefer-pdf-tools (fboundp 'pdf-view-mode))
(defun tv/start-pdf-tools-if-pdf ()
  (when (and tv/prefer-pdf-tools
             (eq doc-view-doc-type 'pdf))
    (pdf-view-mode)))

(add-hook 'doc-view-mode-hook 'tv/start-pdf-tools-if-pdf)
#+end_src

** ;;;; 'eww-readable-to-org ;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+begin_src emacs-lisp
;; may want this on a keybinding
;; https://jao.io/blog/eww-to-org.html
;; command to generate an org-mode rendering of an eww page
(defun jao-eww-to-org (&optional dest)
  "Render the current eww buffer using org markup.
If DEST, a buffer, is provided, insert the markup there."
  (interactive)
  (unless (org-region-active-p)
    (let ((shr-width 80)) (eww-readable)))
  (let* ((start (if (org-region-active-p) (region-beginning) (point-min)))
         (end (if (org-region-active-p) (region-end) (point-max)))
         (buff (or dest (generate-new-buffer "*eww-to-org*")))
         (link (eww-current-url))
         (title (or (plist-get eww-data :title) "")))
    (with-current-buffer buff
      (insert "#+title: " title "\n#+link: " link "\n\n")
      (org-mode))
    (save-excursion
      (goto-char start)
      (while (< (point) end)
        (let* ((p (point))
               (props (text-properties-at p))
               (k (seq-find (lambda (x) (plist-get props x))
                            '(shr-url image-url outline-level face)))
               (prop (and k (list k (plist-get props k))))
               (next (if prop
                         (next-single-property-change p (car prop) nil end)
                       (next-property-change p nil end)))
               (txt (buffer-substring (point) next))
               (txt (replace-regexp-in-string "\\*" "Â·" txt)))
          (with-current-buffer buff
            (insert
             (pcase prop
               ((and (or `(shr-url ,url) `(image-url ,url))
                     (guard (string-match-p "^http" url)))
                (let ((tt (replace-regexp-in-string "\n\\([^$]\\)" " \\1" txt)))
                  (org-link-make-string url tt)))
               (`(outline-level ,n)
                (concat (make-string (- (* 2 n) 1) ?*) " " txt "\n"))
               ('(face italic) (format "/%s/ " (string-trim txt)))
               ('(face bold) (format "*%s* " (string-trim txt)))
               (_ txt))))
          (goto-char next))))
    (pop-to-buffer buff)
    (goto-char (point-min))))

(with-eval-after-load "shr"
    (defun shr-put-image (spec alt &optional flags)
      "Insert image SPEC with a string ALT.  Return image.
SPEC is either an image data blob, or a list where the first
element is the data blob and the second element is the content-type.
Hack to use `insert-sliced-image' to avoid jerky image scrolling."
      (if (display-graphic-p)
          (let* ((size (cdr (assq 'size flags)))
                 (data (if (consp spec)
                           (car spec)
                         spec))
                 (content-type (and (consp spec)
                                    (cadr spec)))
                 (start (point))
                 (image (cond
                         ((eq size 'original)
                          (create-image data nil t :ascent 100
                                        :format content-type))
                         ((eq content-type 'image/svg+xml)
                          (create-image data 'svg t :ascent 100))
                         ((eq size 'full)
                          (ignore-errors
                            (shr-rescale-image data content-type
                                               (plist-get flags :width)
                                               (plist-get flags :height))))
                         (t
                          (ignore-errors
                            (shr-rescale-image data content-type
                                               (plist-get flags :width)
                                               (plist-get flags :height)))))))
            (when image
              (let* ((image-pixel-cons (image-size image t))
                     (image-pixel-width (car image-pixel-cons))
                     (image-pixel-height (cdr image-pixel-cons))
                     (image-scroll-rows (round (/ image-pixel-height (default-font-height)))))
                ;; When inserting big-ish pictures, put them at the
                ;; beginning of the line.
                (when (and (> (current-column) 0)
                           (> (car (image-size image t)) 400))
                  (insert "\n"))

                (insert-sliced-image image (or alt "*") nil image-scroll-rows 1)
                ;; (if (eq size 'original)
                ;;     (insert-sliced-image image (or alt "*") nil image-scroll-rows 1)
                ;;   (insert-image image (or alt "*")))

                (put-text-property start (point) 'image-size size)
                (when (and shr-image-animate
                           (cond ((fboundp 'image-multi-frame-p)
                                  ;; Only animate multi-frame things that specify a
                                  ;; delay; eg animated gifs as opposed to
                                  ;; multi-page tiffs.  FIXME?
                                  (cdr (image-multi-frame-p image)))
                                 ((fboundp 'image-animated-p)
                                  (image-animated-p image))))
                  (image-animate image nil 60))))
            image)
        (insert (or alt "")))))

#+end_src

* ;;;; osm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

Open source map
#+begin_src emacs-lisp
(use-package osm
  :defer t
  :bind ("C-x m" . osm-prefix-map) ;; Alternative: `osm-home'
  :custom
  ;; Take a look at the customization group `osm' for more options.
  (osm-server 'default) ;; Configure the tile server
  (osm-copyright t)     ;; Display the copyright information
:config

  ;; Add custom servers, see also https://github.com/minad/osm/wiki
  ;; (osm-add-server 'myserver
  ;;   :name "My tile server"
  ;;   :group "Custom"
  ;;   :description "Tiles based on aerial images"
  ;;   :url "https://myserver/tiles/%z/%x/%y.png?apikey=%k")
)
#+end_src
* ;;;; dwim-shell-command ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

dwim-shell-command
#+begin_src emacs-lisp
(use-package dwim-shell-command
  :defer t
  :bind (([remap shell-command] . dwim-shell-command)
         :map dired-mode-map
         ([remap dired-do-async-shell-command] . dwim-shell-command)
         ([remap dired-do-shell-command] . dwim-shell-command)
         ([remap dired-smart-shell-command] . dwim-shell-command))
  :config
;; pdf to text ;;;;
(defun dwim-shell-commands-pdf-to-txt ()
  "Convert pdf to txt."
  (interactive)
  (dwim-shell-command-on-marked-files
   "pdf to txt"
   "pdftotext -layout '<<f>>' '<<fne>>.txt'"
   :utils "pdftotext"))
;; Ping duckduckgo.com ;;;;
(defun dwim-shell-commands-ping-google ()
  (interactive)
  (dwim-shell-command-on-marked-files
   "Ping google.com"
   "ping -c 3 google.com"
   :utils "ping"
   :focus-now t))
;; Stream clipboard URL using mpv ;;;;
(defun dwim-shell-commands-mpv-stream-clipboard-url ()
  (interactive)
  (dwim-shell-command-on-marked-files
   "Streaming"
   "mpv --geometry=30%x30%+100%+0% \"<<cb>>\""
   :utils "mpv"
   :no-progress t
   :error-autofocus t
   :silent-success t))
;; Clone git URL in clipboard to "~/builds/" ;;;;
(defun dwim-shell-commands-git-clone-clipboard-url-to-builds ()
  (interactive)
  (cl-assert (string-match-p "^\\(http\\|https\\|ssh\\)://" (current-kill 0)) nil "No URL in clipboard")
  (let* ((url (current-kill 0))
         (download-dir (expand-file-name "~/builds/"))
         (project-dir (concat download-dir (file-name-base url)))
         (default-directory download-dir))
    (when (or (not (file-exists-p project-dir))
              (when (y-or-n-p (format "%s exists.  delete?" (file-name-base url)))
                (delete-directory project-dir t)
                t))
      (dwim-shell-command-on-marked-files
       (format "Clone %s" (file-name-base url))
       (format "git clone %s" url)
       :utils "git"
       :on-completion (lambda (buffer)
                        (kill-buffer buffer)
                        (dired project-dir)))))))
(require 'dwim-shell-commands)
#+end_src

* ;;;; engine-mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
|------------+-------|
| web-search | C-x / |
|------------+-------|

engine-mode
#+begin_src emacs-lisp
(use-package! engine-mode
  :defer t
  :config
  (engine-mode t)
  (defengine nitter
    "https://nitter.net/search?f=tweets&q=%s"
    :keybinding "n")
  (defengine githubcs
    "https://github.com/search?type=code&auto_enroll=true&q=%s"
    :keybinding "g")
  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "h")
  (defengine presearch
    "https://presearch.com/search?q=%s"
    :keybinding "p")
  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "o")
  (defengine brave
    "https://search.brave.com/search?q=%s"
    :keybinding "b")
  (defengine melpa
    "https://melpa.org/#/%s"
    :keybinding "m")
  (defengine archwiki
    "https://wiki.archlinux.org/index.php?search="
    :keybinding "a")
  (defengine aur
    "https://aur.archlinux.org/packages/?K="
    :keybinding "u"))
#+end_src

* ;;;; Markdown ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://jblevins.org/projects/markdown-mode/][GitHub -Markdown Mode for Emacs]]

;; use C-c / for menu

markdown-mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :defer t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
;; start pandoc with every markdown file ;;;;
(add-hook 'markdown-mode-hook 'pandoc-mode)

;; default markdown-mode's markdown-live-preview-mode to vertical split
(setq markdown-split-window-direction 'right)
#+end_src

* ;;;; language-tool ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=====================================================================================

language-tool
#+begin_src emacs-lisp
(use-package languagetool
  :defer t
  :commands (languagetool-check
             languagetool-clear-suggestions
             languagetool-correct-at-point
             languagetool-correct-buffer
             languagetool-set-language
             languagetool-server-mode
             languagetool-server-start
             languagetool-server-stop)
  :config
  (setq languagetool-java-arguments '("-Dfile.encoding=UTF-8"
                                      "-cp" "/usr/share/languagetool:/usr/share/java/languagetool/*")
        languagetool-console-command "org.languagetool.commandline.Main"
        languagetool-server-command "org.languagetool.server.HTTPServer"))

(map! :after org
      :map org-mode-map
      :leader
      (:prefix ("l" . "link")
       :desc "insert file link" "k" 'languagetool-check
       :desc "langtool correct buffer" "b" 'languagetool-correct-buffer
       :desc "langtool check done" "d" 'languagetool-clear-suggestions
       :desc "langtool server start" "s" 'languagetool-server-start
       :desc "langtool server mode" "m" 'languagetool-server-mode
       :desc "langtool sever stop" "f" 'languagetool-server-stop))
#+end_src

* ;;;; denote ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
================================================================================

[[https://www.youtube.com/watch?v=mLzFJcLpDFI][denote youtube demo]]
[[https://git.sr.ht/~protesilaos/denote denote][git.sr.ht]]

denote
#+begin_src emacs-lisp
(use-package! denote
  :defer t
  :hook (dired-mode . denote-dired-mode)
  (org-mode . denote-rename-buffer-mode)
  :custom
  (denote-directory (expand-file-name "~/org/denote/"))
  (denote-known-keywords '("emacs" "package" "info" "perman"))
;; Pick dates, with Org's advanced interface:
  (denote-date-prompt-use-org-read-date t)
  (denote-infer-keywords t)
  (denote-sort-keywords t)
  :config
  (denote-rename-buffer-mode)
  (require 'denote-org-extras))

;; ;; By default, we do not show the context of links.  We just display
;; ;; file names.  This provides a more informative view.
;; (setq denote-backlinks-show-context t)

;; map! "spc d n" #'denote
(map! :leader
      :prefix "d"
      :desc "denote"
      :n "n" #'denote)
#+end_src

* ;;;; typing-exercises ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

[[https://github.com/jpablobr/emacs-monkeytype?tab=readme-ov-file#options][github-monkeytype-options]]
[[file:~/.config/emacs/.local/straight/repos/emacs-monkeytype/][monkey-type local repo-directory]]

typing-exercise
#+begin_src emacs-lisp
(use-package! monkeytype
  :defer t
  :config
  (setq monkeytype-downcase nil)
  ;; (setq monkeytype-randomize nil)
  (defun monkeytype--process-input-timer-init ()
    (unless monkeytype--start-time
      (setq monkeytype--current-run-start-datetime
            (format-time-string "%a-%d-%b-%Y %H:%M:%S"))
      (setq monkeytype--start-time (float-time))
      (monkeytype--utils-idle-timer 5000 'monkeytype-pause)))
  (add-hook 'monkeytype-mode-hook #'my/monkeytype-mode-hook))

(defun my/monkeytype-mode-hook ()
  "Hooks for monkeytype-mode."
  (evil-escape-mode -1)
  (flyspell-mode -0)
  (corfu-mode -0)
  (evil-insert -1)
  ;; (text-scale-set 3)
  (+zen/toggle))


(map! :after org
      :leader
      :prefix "o"
      :desc "open monkeytype"
      :n "m" #'monkeytype-load-words-from-file)

(defvar monkeytype-mode-map
  (let ((map (make-sparse-keymap))
        (mappings '("C-c m p" monkeytype-pause
                    "C-c m r" monkeytype-resume
                    "C-c m s" monkeytype-stop
                    "C-c m t" monkeytype-repeat
                    "C-c m f" monkeytype-fortune
                    "C-c m m" monkeytype-mistyped-words
                    "C-c m h" monkeytype-hard-transitions
                    "C-c m a" monkeytype-save-mistyped-words
                    "C-c m l" monkeytype-toggle-mode-line
                    "C-c m e" monkeytype-wpm-peek
                    "C-c m o" monkeytype-save-hard-transitions)))
    (cl-loop for (key fn) on mappings by #'cddr
             do (define-key map (kbd key) fn))
    map)
  "Keymap for `monkeytype-mode' buffers.")
#+end_src

* ;;;; browser-history ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
====================================================================================
[[https://github.com/agzam/browser-hist.el][GitHub - agzam/browser-hist.el]]

browser-history
#+begin_src emacs-lisp

(use-package! browser-hist
  :defer t
  :commands (browser-hist-search)
  :init
  (require 'embark) ; load Embark before the command (if you're using it)
  (setq browser-hist-default-browser 'brave)
  :config
  (setq browser-hist-db-paths
        '((brave . "~/.config/BraveSoftware/Brave-Browser/Default/History"))))

(map! :leader
      :prefix "s"
      :desc "search browser history"
      :n "h" #'browser-hist-search)


#+end_src

* ;;;; yequake ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
====================================================================================
[[https://github.com/alphapapa/yequake][yequake github.com]]

yequake
#+begin_src emacs-lisp
(use-package! yequake
  :defer t
  :custom
  (yequake-frames
   '(("org-capture"
      (buffer-fns . (yequake-org-capture))
      (width . 0.75)
      (height . 0.5)
      (alpha . 0.95)
      (frame-parameters . ((undecorated . t)
                           (skip-taskbar . t)
                           (sticky . t))))
     ("Yequake & scratch" .
      ((width . 0.75)
       (height . 0.5)
       (alpha . 0.95)
       (buffer-fns . ("~/org/yequake/key-reminder.org"
                      split-window-horizontally
                      "*scratch*"))
       (frame-parameters . ((undecorated . t)))))
     ("org-table-cheatsheet" .
      ((width . 0.75)
       (height . 0.5)
       (alpha . 0.95)
       (buffer-fns . ("~/org/yequake/org-table-cheatsheet.org"))
       (frame-parameters . ((undecorated . t)))))
     ("evil-easymotion" .
      ((width . 0.75)
       (height . 0.5)
       (alpha . 0.95)
       (buffer-fns . ("~/org/yequake/evil-easymotion.org"))
       (frame-parameters . ((undecorated . t))))))))

;; use this in linux to call it outside of emacs
;; emacsclient -n -e '(yequake-toggle "org-capture")'

;; toggle yequakes-frames
(map! :leader
      :prefix "t"
      :desc "toggle yequakes-frames"
      :n "y" #'yequake-toggle)
;; use this to call from linux
;; emacsclient -n -e '(yequake-toggle "Yequake & scratch")'
#+end_src
* ;;;; ediff ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
====================================================================================

|-------+--------------------|
| KEYS  | EDIFF-FUNCTION     |
|-------+--------------------|
| A     | diff-ediff-patch   |
| C-x u | diff-undo          |
| RET   | diff-goto-source   |
| TAB   | diff-hunk-next     |
| g     | revert-buffer      |
| h     | describe-mode      |
| k     | diff-hunk-kill     |
| n     | diff-hunk-next     |
| p     | diff-hunk-prev     |
| q     | quit-window        |
| r     | diff-restrict-view |
|-------+--------------------|

ediff
#+begin_src emacs-lisp

(use-package! ediff
  :defer t
  :custom-face
  (ediff-current-diff-A ((t (:background "#663333"))))
  (ediff-fine-diff-A ((t (:background "indian red"))))
  (ediff-current-diff-B ((t (:background "#336633"))))
  (ediff-fine-diff-B ((t (:background "#558855"))))
  :commands (ediff-files))
(after! ediff
  (setq ediff-diff-options "-w" ; turn off whitespace checking
        ediff-split-window-function #'split-window-horizontally
        ediff-window-setup-function #'ediff-setup-windows-plain)
  (defvar doom--ediff-saved-wconf nil)
  ;; restore window config after quitting ediff
  (add-hook! 'ediff-before-setup-hook
    (defun doom-ediff-save-wconf-h ()
      (setq doom--ediff-saved-wconf (current-window-configuration))))
  (add-hook! '(ediff-quit-hook ediff-suspend-hook) :append
    (defun doom-ediff-restore-wconf-h ()
      (when (window-configuration-p doom--ediff-saved-wconf)
        (set-window-configuration doom--ediff-saved-wconf)))))

;; get ediff to unfold everthing before
(with-eval-after-load 'outline
   (add-hook 'ediff-prepare-buffer-hook #'org-fold-show-all))
#+end_src
pomidor
* ;;;; pomidor ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

[[https://github.com/TatriX/pomidor][pomidor on github]]
pomidor
#+begin_src emacs-lisp
(use-package! pomidor
  :defer t
  :config (setq pomidor-sound-tick nil
                pomidor-sound-tack nil)
  (map! (:map pomidor-mode-map
         :desc "quit window"
         :n "q" #'+popup/quit-window
         :desc "pomidor quit"
         :n "M-Q" #'pomidor-quit
         :desc "pomidor reset"
         :n "M-R" #'pomidor-reset
         :desc "pomidor-hold"
         :n "M-h" #'pomidor-hold
         :desc "pomidor-unhold"
         :n "M-H" #'pomidor-unhold
         :desc "pomidor-stop"
         :n "M-RET" #'pomidor-stop
         :desc "pomidor-break"
         :n "M-SPC" #'pomidor-break)))
#+end_src

* ;;;; D-slide ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[[https://github.com/positron-solutions/dslide?tab=readme-ov-file][dslide on github]]

#+begin_src emacs-lisp
(use-package! dslide
  :after org
  :defer t
  :config
  (add-hook 'dslide-start-hook #'my-present-start-hook)
  (add-hook 'dslide-stop-hook #'my-present-quit-hook))

(map! :prefix "C-c d"
      :desc "dslide-deck-start"
      :n "s" #'dslide-deck-start
      :desc "dslide deck stop"
      :n "q" #'dslide-deck-stop)

(map! :map dslide-mode-map
      [remap evil-next-line] #'dslide-deck-forward
      [remap evil-previous-line] #'dslide-deck-backward
      :desc "dslide deck stop"
      :n "q" #'dslide-deck-stop
      :desc "dslide deck forward"
      :n "j" #'dslide-deck-forward
      :desc "dslide deck backwards"
      :n "k" #'dslide-deck-backward)

(defun my-present-start-hook ()
  (+zen/toggle-fullscreen)
  (hide-mode-line-mode)
  (org-display-inline-images))

(defun my-present-quit-hook ()
  (toggle-frame-fullscreen)
  (hide-mode-line-mode -0)
  (org-remove-inline-images))
#+end_src
