#+title:     Doom Emacs config.org'
:preamble:
#+created: 2021-12-27
#+startup: entitiespretty noindent
#+ARCHIVE: ~/org/wiki/config-change-log.org::** blocks removed
#+AUTHOR: dvsdude
:END:

    #+begin_export ascii
    ==================================================================================
    #     .___                  .___          .___       "stole all"*
    #   __| _/___  __ ______  __| _/__ __   __| _/ ____
    #  / __ | \  \/ //  ___/ / __ ||  |  \ / __ |_/ __ \  "regret none"...
    # / /_/ |  \   / \___ \ / /_/ ||  |  // /_/ |\  ___/
    # \____ |   \_/ /____  >\____ ||____/ \____ | \___  >
    #      \/            \/      \/            \/     \/
    #  ☠A DASTARDLY DVS DOOM CONFIG☠                          *"OK! so I wrote ..some"
    ==================================================================================
    #+end_export

* ;;;; the lexical-binding ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+end_src

* ;;;; name ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

#+begin_src emacs-lisp
;; Some functionality uses this to identify you
(setq user-full-name "dvsdude"
      user-mail-address "john@doe.com")
#+end_src

* ;;;; package management ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

Package management
#+begin_src emacs-lisp
;; add packages manually by downloading the repo

;; spray
;; (add-to-list 'load-path "~/builds/manual-packages/spray")

;; (add-load-path! "/myrepo/+config/")

;; Corfu-extensions to load path
(add-to-list 'load-path
               (expand-file-name "~/.emacs.d/.local/straight/repos/corfu/extensions/"))

(load "~/.config/doom/myrepo/+config/+config.el")
#+end_src

* ;;;; FONTS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

Fonts
#+begin_src emacs-lisp
;; fontset ;;;;
(setq doom-font (font-spec :family "Hack Nerd Font" :size 17 :weight 'bold)
;; (setq doom-font (font-spec :family "Iosevka" :size 17 :weight 'heavy)
      doom-variable-pitch-font (font-spec :family "DroidSansMono Nerd Font" :size 17)
      ;; doom-variable-pitch-font (font-spec :family "Iosevka" :size 18)
      ;; doom-unicode-font (font-spec :family "DejaVu Sans Mono")
      doom-unicode-font (font-spec :family "DroidSansMono Nerd Font")
      doom-big-font (font-spec :family "Hack Nerd Font" :size 24 :weight 'bold))

(set-fontset-font t 'emoji
                      '("My New Emoji Font" . "iso10646-1") nil 'prepend)

#+end_src

* ;;;; theme ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

Theme
#+begin_src emacs-lisp
;; (setq doom-theme 'doom-one)
(setq doom-theme 'doom-Iosvkem)
#+end_src

* ;;;; startup settings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

startup-settings
#+begin_src emacs-lisp
;; hl line mode
(global-hl-line-mode +1)
;; no fringe
(set-fringe-mode 0)
;; declare language
(set-language-environment "UTF-8")
;; save last place edited & update bookmarks
(save-place-mode 1)
(setq save-place-file "~/.config/doom/saveplace")
(setq save-place-forget-unreadable-files nil)
(setq bookmark-save-flag t)
;; line number type
(setq display-line-numbers-type 'visual)
;; should put  focus in the new window ;;;;
(setq evil-split-window-below t
      evil-vsplit-window-right t)
;; set fancy splash-image
(setq fancy-splash-image "~/.config/doom/splash/doom-color.png")
;; set org-directory. It must be set before org loads
(setq org-directory "~/org/")
;; number of lines of overlap in page flip ;;;;
(setq next-screen-context-lines 7)
;; use trash
(setq trash-directory "~/.local/share/Trash/files/")
(setq delete-by-moving-to-trash t)
;; lazy-load agenda-files
(setq org-agenda-inhibit-startup nil)
;; ignore-case
(setq read-file-name-completion-ignore-case t
      read-buffer-completion-ignore-case t
      completion-ignore-case t)
;; set scratch buffer mode
(setq doom-scratch-initial-major-mode 'org-mode)
;; gives isearch total number of matches
(setq-default isearch-lazy-count t)
;; move mouse out of the way
(mouse-avoidance-mode t)
(setq mouse-avoidance-mode "banish")
;; dictionary server ;;;;
(setq dictionary-server "dict.org")
;; Sensible line breaking
(add-hook 'text-mode-hook 'visual-line-mode)
;; Maximize the window upon startup
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
;;;  "Syntax color, highlighting code colors ;;;;
(add-hook 'prog-mode-hook #'rainbow-mode)
;; automatic chmod +x when you save a file with a #! shebang
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+end_src

* ;;;; Dashboard ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://github.com/emacs-dashboard/emacs-dashboard][GitHub - emacs-dashboard]]

dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :demand t
  :custom
  (dashboard-startup-banner (concat  "~/.config/doom/splash/doom-color.png"))
  (dashboard-banner-logo-title "wecome to dvsdude's e to the mother f*ck*n macs")
  (dashboard-center-content t)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-init-info t)
  (dashboard-set-navigator t)
  (dashboard-navigator-buttons
   `(
     ((,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-rss_square" :height 1.0 :face 'font-lock-keyword-face))
       "elfeed"
       "open elfeed"
       (lambda (&rest _) (=rss)))
      (,(and (display-graphic-p)
             (nerd-icons-codicon "nf-cod-settings" :height 1.0 :face 'font-lock-keyword-face))
       "config"
       "open config"
       ;;(lambda (&rest _) (+workspace/load "config")))
       (lambda (&rest _) (=config)))
      (,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-calendar" :height 1.0 :face 'font-lock-keyword-face))
       "calendar"
       "calendar"
       (lambda (&rest _) (=calendar)))
      (,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-tasks" :height 1.0 :face 'font-lock-keyword-face))
       "agenda"
       "agenda all todos"
       (lambda (&rest _) (org-agenda nil "n")))
      (,(and (display-graphic-p)
             (nerd-icons-faicon "nf-fa-book" :height 1.0 :face 'font-lock-keyword-face))
       "journal"
       "journal new entry"
       (lambda (&rest _) (org-journal-new-entry nil)))
      (,(and (display-graphic-p)
             (nerd-icons-mdicon "nf-md-restore" :height 1.0 :face 'font-lock-keyword-face))
       "restart"
       "restar emacs"
       (lambda (&rest _) (restart-emacs))))))
  :config
       (setq dashboard-items '((recents . 7)
                              (bookmarks . 6)
                               (agenda . 3)))

       (dashboard-setup-startup-hook))
       ;; this is for use with emacsclient
(setq initial-buffer-choice (lambda() (dashboard-refresh-buffer)(get-buffer "*dashboard*")))
#+end_src

* ;;;; +doom-dashboard ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================
[[file:~/.emacs.d/modules/ui/doom-dashboard/config.el][Doom-dashboard-mod-config]]

+doom-dashboard
#+begin_src emacs-lisp
(add-to-list '+doom-dashboard-menu-sections
             '("Add journal entry"
               :icon (nerd-icons-faicon "nf-fa-calendar" :face 'doom-dashboard-menu-title)
               :when (modulep! :lang org +journal)
               :face (:inherit (doom-dashboard-menu-title bold))
               :action org-journal-new-entry))

(add-to-list '+doom-dashboard-menu-sections
             '("open elfeed"
               :icon (nerd-icons-faicon "nf-fa-rss_square" :face 'doom-dashboard-menu-title)
               :when (modulep! :app rss +org)
               :face (:inherit (doom-dashboard-menu-title bold))
               :action =rss))
#+end_src
* ;;;; org-settings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://orgmode.org/org.html][The Org Manual]]

org-settings
#+begin_src emacs-lisp
;; default file for notes
(setq org-default-notes-file (concat org-directory "notes.org"))
;; default diary files
(setq org-agenda-diary-file "~/org/notable-dates.org")
;; (setq diary-file "~/.config/doom/diary")

;; Insert a file link. At the prompt, enter the filename
(defun +org-insert-file-link ()
  (interactive)
  (insert (format "[[%s]]" (org-link-complete-file))))
;; `map': insert-file-link (space f L)
(map! :after org
      :map org-mode-map
      :leader
      (:prefix "f"
       :desc "create link to file" "L" #'+org-insert-file-link))

;; Org empty buffer creation
"https://tecosaur.github.io/emacs-config/config.html#org-buffer-creation"
(evil-define-command +evil-buffer-org-new (count file)
  "Creates a new ORG buffer replacing the current window, optionally
    editing a certain FILE"
  :repeat nil
  (interactive "P<f>")
  (if file
      (evil-edit file)
    (let ((buffer (generate-new-buffer "*new org*")))
      (set-window-buffer nil buffer)
      (with-current-buffer buffer
        (org-mode)
        (setq-local doom-real-buffer-p t)))))
;; new-org-buffer (space b o)
(map! :leader
      :prefix "b"
      :desc "New empty Org buffer" "o" #'+evil-buffer-org-new)

;; org insert structural temolate (C-c C-,) menu for adding code blocks
(after! org
(use-package! org-tempo
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))))

;; copy and paste images into an org-file
(after! org
  (use-package! org-ros
    :defer t))

;; org-refile
(setq org-refile-targets '((nil :maxlevel . 2) (org-agenda-files :maxlevel . 2)))
(setq org-outline-path-complete-in-steps nil)         ;; Refile in a single go
(setq org-refile-use-outline-path 'file)              ;; this also set by vertico

;; pkg tecosaur/org-pandoc-import
;; uses Pandoc to convert selected file types to org
(after! org
 (use-package! org-pandoc-import))

(map! :leader
      :prefix "i"
      :desc "import to Org buffer" "o" #'org-pandoc-import-as-org  ;; opens in new buf
      :desc "import to org file" "O" #'org-pandoc-import-to-org)  ;; saves to file opens file

(map! :leader
      :prefix "e"
      :desc "export to Org buffer" "o" #'org-org-export-as-org  ;; opens in new buf
      :desc "export to org file" "O" #'org-org-export-to-org)  ;; saves to file opens file

;; org-src edit window  C-c ' or spc m '
(setq org-src-window-setup 'reorganize-frame)  ;; default

;; set org-id to a timestamp instead of uuid
(setq org-id-method 'ts)

;; this for images
;; NOTE believe this doesnt work with evil, needs looking into
;; (setq org-return-follows-link t)

#+end_src

* ;;;; org-appearance ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

org-appearance
#+begin_src emacs-lisp

(with-eval-after-load 'org (global-org-modern-mode))
(after! org
  (setq org-modern-star '("◉" "○" "◈" "◇" "✳")
        org-modern-hide-stars 'leading ;; can be nil,t,leading
        org-modern-todo nil
        org-modern-progress nil
        org-modern-tag nil))

(after! org
  (setq org-agenda-include-diary t
        org-agenda-timegrid-use-ampm 1
        org-startup-indented t
        org-pretty-entities t
        org-hide-emphasis-markers t
        org-startup-with-inline-images t
        org-image-actual-width '(300)))

;; un-hide emphasis-markers when under point ;;;;
(add-hook 'org-mode-hook 'org-appear-mode)
(add-hook 'org-mode-hook 'variable-pitch-mode)

;; set font size for headers ;;
(after! org
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.4))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.1))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.0))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
   '(org-document-title ((t (:height 1.7 :underline t))))
   ))

;; set `color' of emphasis types ;;;;
(after! org
  (setq org-emphasis-alist
        '(("*" my-org-emphasis-bold)
          ("/" italic)
          ("_" underline)
          ("=" org-verbatim verbatim)
          ("~" org-code verbatim)
          ("+" (:strike-through t)))))

(defface my-org-emphasis-bold
  '((default :inherit bold)
    (((class color) (min-colors 88) (background light))
     :foreground "#a60000")
    (((class color) (min-colors 88) (background dark))
     :foreground "#ff8059"))
  "My bold emphasis for Org."
  :group 'custom-faces)

(defface my-org-emphasis-italic
  '((default :inherit italic)
    (((class color) (min-colors 88) (background light))
     :foreground "#005e00")
    (((class color) (min-colors 88) (background dark))
     :foreground "#44bc44"))
  "My italic emphasis for Org."
  :group 'custom-faces)

(defface my-org-emphasis-underline
  '((default :inherit underline)
    (((class color) (min-colors 88) (background light))
     :foreground "#813e00")
    (((class color) (min-colors 88) (background dark))
     :foreground "#d0bc00"))
  "My underline emphasis for Org."
  :group 'custom-faces)

(defface my-org-emphasis-strike-through
  '((((class color) (min-colors 88) (background light))
     :strike-through "#972500" :foreground "#505050")
    (((class color) (min-colors 88) (background dark))
     :strike-through "#ef8b50" :foreground "#a8a8a8"))
  "My strike-through emphasis for Org."
  :group 'custom-faces)
#+end_src

* ;;;; org-capture ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

org-capture
#+begin_src emacs-lisp
;; brings up a buffer for capturing
;; (require 'org-capture)
(after! org
  (use-package! org-capture
  :defer t))
;; org-capture-templates will be put in org-capture-projects-local
;; older ones left for reference, eval the `add-to-list' function

(defcustom org-capture-templates nil
  '(("y" "TILT" entry
     (file+headline "~/org/wiki/tilt-doom.org " "TILT")
     "** NEW %?\n           %i  " :prepend t)
    ("s" "notable dates" plain #'org-journal-date-location "** TODO %?\n <%(princ org-journal--date-location-scheduled-time)>\n" :jump-to-captured t)
    ("j" "Journal entry" plain #'org-journal-find-location "** %(format-time-string org-journal-time-format)%?" :prepend t)
    ("k" "keybindings" entry
     (file+headline "~/org/wiki/my-keybinding-list.org" "new ones")
     "** NEW %?\n  %i\n  " :prepend t)
    ("z" "organizer" entry
     (file+headline "~/org/organizer.org" "refile stuff")
     "** NEW %?\n  %i\n  " :prepend t)
    ("x" "Cliplink capture task" entry
     (file+headline "~/org/webmarks.org" "bookmarks")
     "* TODO %(org-cliplink-capture)\nSCHEDULED: %t\n" :empty-lines 1)
    ("t" "Personal todo" entry
     (file+headline +org-capture-todo-file "Inbox")
     "** TODO %?\n%i\n%a" :prepend t)
    ("l" "check out later" entry
     (file+headline "todo.org" "Check out later")
     "** IDEA %?\n%i\n%a" :prepend t)
    ("n" "Personal notes" entry
     (file+headline +org-capture-notes-file "Inbox")
     "*  %?\n%i\n%a" :prepend t)
    ("p" "Templates for projects")
    ("pt" "Project-local todo" entry
     (file+headline +org-capture-project-todo-file "Inbox")
     "* TODO %?\n%i\n%a" :prepend t)
    ("pn" "Project-local notes" entry
     (file+headline +org-capture-project-notes-file "Inbox")
     "* %U %?\n%i\n%a" :prepend t)
    ("pc" "Project-local changelog" entry
     (file+headline +org-capture-project-changelog-file "Unreleased")
     "* %U %?\n%i\n%a" :prepend t)
    ("o" "Centralized templates for projects")
    ("ot" "Project todo" entry #'+org-capture-central-project-todo-file "* TODO %?\n %i\n %a" :heading "Tasks" :prepend nil)
    ("on" "Project notes" entry #'+org-capture-central-project-notes-file "* %U %?\n %i\n %a" :prepend t :heading "Notes")
    ("oc" "Project changelog" entry #'+org-capture-central-project-changelog-file "* %U %?\n %i\n %a" :prepend t :heading "Changelog")))
#+end_src
* ;;;; org-journal ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

org-journal
#+begin_src emacs-lisp
(setq org-journal-dir "~/org/journal/")
;; NOTE might want to change this to doom macros
(require 'org-journal)
(setq org-journal-file-type 'yearly)
(setq org-journal-enable-agenda-integration t)
(setq org-journal-carryover-items "")
;; (add-hook 'org-journal-mode-hook #'org-modern-mode)

;; function needed to make an org-capture-template for org-journal
(defun org-journal-find-location ()
  (org-journal-new-entry t)
  (unless (eq org-journal-file-type 'yearly)
    (org-narrow-to-subtree))
  (goto-char (point-max)))

(defvar org-journal--date-location-scheduled-time nil)
;; function to schedule things using capture templates
(defun org-journal-date-location (&optional scheduled-time)
  (let ((scheduled-time (or scheduled-time (org-read-date nil nil nil "Date:"))))
    (setq org-journal--date-location-scheduled-time scheduled-time)
    (org-journal-new-entry t (org-time-string-to-time scheduled-time))
    (unless (eq org-journal-file-type 'daily)
      (org-narrow-to-subtree))
    (goto-char (point-max))))

;; save and exit journal easily
(map! :after org
      :map org-journal-mode-map
      :desc "doom save and kill" "C-c C-c" #'doom/save-and-kill-buffer)
#+end_src

* ;;;; doom-Smartparens ;;;; mod-config ;;;;;;;;;;;;;;;;;
=================================================================================

#+begin_src emacs-lisp  :tangle no
(when (modulep! +smartparens)
  ;; You can disable :unless predicates with (sp-pair "'" nil :unless nil)
  ;; And disable :post-handlers with (sp-pair "{" nil :post-handlers nil)
  ;; or specific :post-handlers with:
  ;;   (sp-pair "{" nil :post-handlers '(:rem ("| " "SPC")))
  (after! smartparens
    ;; Smartparens' navigation feature is neat, but does not justify how
    ;; expensive it is. It's also less useful for evil users. This may need to
    ;; be reactivated for non-evil users though. Needs more testing!
    (add-hook! 'after-change-major-mode-hook
      (defun doom-disable-smartparens-navigate-skip-match-h ()
        (setq sp-navigate-skip-match nil
              sp-navigate-consider-sgml-tags nil)))

    ;; Autopair quotes more conservatively; if I'm next to a word/before another
    ;; quote, I don't want to open a new pair or it would unbalance them.
    (let ((unless-list '(sp-point-before-word-p
                         sp-point-after-word-p
                         sp-point-before-same-p)))
      (sp-pair "'"  nil :unless unless-list)
      (sp-pair "\"" nil :unless unless-list))

    ;; Expand {|} => { | }
    ;; Expand {|} => {
    ;;   |
    ;; }
    (dolist (brace '("(" "{" "["))
      (sp-pair brace nil
               :post-handlers '(("||\n[i]" "RET") ("| " "SPC"))
               ;; Don't autopair opening braces if before a word character or
               ;; other opening brace. The rationale: it interferes with manual
               ;; balancing of braces, and is odd form to have s-exps with no
               ;; whitespace in between, e.g. ()()(). Insert whitespace if
               ;; genuinely want to start a new form in the middle of a word.
               :unless '(sp-point-before-word-p sp-point-before-same-p)))

    ;; In lisps ( should open a new form if before another parenthesis
    (sp-local-pair sp-lisp-modes "(" ")" :unless '(:rem sp-point-before-same-p))

    ;; Reasonable default pairs for HTML-style comments
    (sp-local-pair (append sp--html-modes '(markdown-mode gfm-mode))
                   "<!--" "-->"
                   :unless '(sp-point-before-word-p sp-point-before-same-p)
                   :actions '(insert) :post-handlers '(("| " "SPC")))

    (after! smartparens-ml
      (sp-with-modes '(tuareg-mode fsharp-mode)
        (sp-local-pair "(*" "*)" :actions nil)
        (sp-local-pair "(*" "*"
                       :actions '(insert)
                       :post-handlers '(("| " "SPC") ("|[i]*)[d-2]" "RET")))))

    (after! smartparens-markdown
      (sp-with-modes '(markdown-mode gfm-mode)
        (sp-local-pair "```" "```" :post-handlers '(:add ("||\n[i]" "RET")))

        ;; The original rules for smartparens had an odd quirk: inserting two
        ;; asterixex would replace nearby quotes with asterixes. These two rules
        ;; set out to fix this.
        (sp-local-pair "**" nil :actions :rem)
        (sp-local-pair "*" "*"
                       :actions '(insert skip)
                       :unless '(:rem sp-point-at-bol-p)
                       ;; * then SPC will delete the second asterix and assume
                       ;; you wanted a bullet point. * followed by another *
                       ;; will produce an extra, assuming you wanted **|**.
                       :post-handlers '(("[d1]" "SPC") ("|*" "*"))))

      ;; This keybind allows * to skip over **.
      (map! :map markdown-mode-map
            :ig "*" (general-predicate-dispatch nil
                      (looking-at-p "\\*\\* *")
                      (cmd! (forward-char 2)))))
      ;; Original keybind interferes with smartparens rules
      (define-key python-mode-map (kbd "DEL") nil)
      ;; Interferes with the def snippet in doom-snippets
      ;; TODO Fix this upstream, in doom-snippets, instead
      (setq sp-python-insert-colon-in-function-definitions nil)))
#+end_src

* ;;;; evil surround ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================
[[https://github.com/emacs-evil/evil-surround][GitHub - emacs-evil/evil-surround]]

evil-surround
#+begin_src emacs-lisp
(require 'evil-surround)
(add-hook 'org-mode-hook (lambda ()
                           (push '(?= . ("=" . "=")) evil-surround-pairs-alist)))
(add-hook 'org-mode-hook (lambda ()
                                  (push '(?' . ("`" . "'")) evil-surround-pairs-alist)))
#+end_src

* ;;;; evil embrace ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================
 [[https://github.com/cute-jumper/evil-embrace.el][evil-embrace]]

embrace
#+begin_src emacs-lisp
;;   To enable the `evil-surround' integration:
(evil-embrace-enable-evil-surround-integration)
;;   And use `evil-embrace-disable-evil-surround-integration' to disable
;;   whenever you don't like it.

;;   Note that this variable is buffer-local. You should change it in the
;;   hook:
;; (add-hook 'latex-mode-hook
;;     (lambda ()
;;       (add-to-list 'evil-embrace-evil-surround-keys ?o)))

;;   If you find the help message popup annoying, use the following code to
;;   disable it:
;; (setq evil-embrace-show-help-p nil)

;;   Use the following settings:
(add-hook 'org-mode-hook 'embrace-org-mode-hook)
(evil-embrace-enable-evil-surround-integration)
#+end_src

* ;;;; evil snipe ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

evil snipe
#+begin_src emacs-lisp
(require 'evil-snipe)
(evil-snipe-mode t)
(evil-snipe-override-mode 1)
(after! evil-snipe
(define-key! evil-snipe-parent-transient-map (kbd "C-;")
  (evilem-create 'evil-snipe-repeat
                 :bind ((evil-snipe-scope 'line)
                        (evil-snipe-enable-highlight)
                        (evil-snipe-enable-incremental-highlight)))))
(push '(?\[ "[[{(]") evil-snipe-aliases)
(add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode)

#+end_src

* ;;;; avy ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

#+begin_src emacs-lisp
(map! :leader
     (:prefix ("s". "search")
      :desc "avy goto char timer" "a" #'evil-avy-goto-char-timer))

(setq avy-timeout-seconds 1.0) ;;default 0.5
(setq avy-single-candidate-jump t)


;; evil-easymotion "prefix"
(evilem-default-keybindings "C-c a")
#+end_src
* ;;;; doom-avy ;;;; mod-config ;;;;;;;;;;;;;;;;;;;;;;;;;
=================================================================================

#+begin_src emacs-lisp :tangle no
;;;###package avy
(setq avy-all-windows nil
      avy-all-windows-alt t
      avy-background t
      ;; the unpredictability of this (when enabled) makes it a poor default
      ;; avy-single-candidate-jump nil)

#+end_src
* ;;;; Key chords ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://github.com/emacsorphanage/key-chord][GitHub -key-chord.]]

key-chords
#+begin_src emacs-lisp
(require 'key-chord)
(key-chord-mode 1)
;; Exit insert mode by pressing j and then j quickly
;; Max time delay between two key presses to be considered a key chord
(setq key-chord-two-keys-delay 0.1) ; default 0.1
;; Max time delay between two presses of the same key to be considered a key chord.
;; Should normally be a little longer than;key-chord-two-keys-delay.
(setq key-chord-one-key-delay 0.2) ; default 0.2
(key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
(key-chord-define evil-insert-state-map "dw" 'backward-kill-word)
(key-chord-define evil-insert-state-map ";l" 'org-end-of-line)
(key-chord-define evil-insert-state-map "hh" 'org-beginning-of-line)
(key-chord-define evil-normal-state-map "vv" 'evil-visual-line)
(key-chord-define evil-normal-state-map "cx" 'evilnc-comment-or-uncomment-lines)
#+end_src

* ;;;; scroll margin ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

#+begin_src emacs-lisp
;; this should replicate scrolloff in vim ;;
;; NOTE look for diff (setq scroll-conservatively 10)
(setq scroll-margin 7)
(setq scroll-preserve-screen-position t)
#+end_src

* ;;;; doom-vertico ;;;; mod-config ;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://github.com/minad/vertico][GitHub -vertico ]]
[[file:~/.emacs.d/modules/completion/vertico/config.el][vertico doom-mod config]]

Vertico
#+begin_src emacs-lisp :tangle no

(use-package! vertico
  :hook (doom-first-input . vertico-mode)
  :init
  (defadvice! +vertico-crm-indicator-a (args)
    :filter-args #'completing-read-multiple
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  :config
  (setq vertico-resize nil
        vertico-count 17
        vertico-cycle t)
  (setq-default completion-in-region-function
                (lambda (&rest args)
                  (apply (if vertico-mode
                             #'consult-completion-in-region
                           #'completion--in-region)
                         args)))

  (map! :when (modulep! :editor evil +everywhere)
        :map vertico-map
        "M-RET" #'vertico-exit-input
        "C-SPC" #'+vertico/embark-preview
        "C-j"   #'vertico-next
        "C-M-j" #'vertico-next-group
        "C-k"   #'vertico-previous
        "C-M-k" #'vertico-previous-group
        "C-h" (cmds! (eq 'file (vertico--metadata-get 'category)) #'vertico-directory-up)
        "C-l" (cmds! (eq 'file (vertico--metadata-get 'category)) #'+vertico/enter-or-preview))

  ;; Cleans up path when moving directories with shadowed paths syntax, e.g.
  ;; cleans ~/foo/bar/// to /, and ~/foo/bar/~/ to ~/.
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save)
  (map! :map vertico-map "DEL" #'vertico-directory-delete-char)

  ;; These commands are problematic and automatically show the *Completions* buffer
  (advice-add #'tmm-add-prompt :after #'minibuffer-hide-completions)
  (defadvice! +vertico--suppress-completion-help-a (fn &rest args)
    :around #'ffap-menu-ask
    (letf! ((#'minibuffer-completion-help #'ignore))
      (apply fn args))))


(use-package! orderless
  :after-call doom-first-input-hook
  :config
  (defadvice! +vertico--company-capf--candidates-a (fn &rest args)
    "Highlight company matches correctly, and try default completion styles before
orderless."
    :around #'company-capf--candidates
    (let ((orderless-match-faces [completions-common-part])
          (completion-styles +vertico-company-completion-styles))
      (apply fn args)))

  (defun +vertico-orderless-dispatch (pattern _index _total)
    (cond
     ;; Ensure $ works with Consult commands, which add disambiguation suffixes
     ((string-suffix-p "$" pattern)
      `(orderless-regexp . ,(concat (substring pattern 0 -1) "[\x200000-\x300000]*$")))
     ;; Ignore single !
     ((string= "!" pattern) `(orderless-literal . ""))
     ;; Without literal
     ((string-prefix-p "!" pattern) `(orderless-without-literal . ,(substring pattern 1)))
     ;; Character folding
     ((string-prefix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 1)))
     ((string-suffix-p "%" pattern) `(char-fold-to-regexp . ,(substring pattern 0 -1)))
     ;; Initialism matching
     ((string-prefix-p "`" pattern) `(orderless-initialism . ,(substring pattern 1)))
     ((string-suffix-p "`" pattern) `(orderless-initialism . ,(substring pattern 0 -1)))
     ;; Literal matching
     ((string-prefix-p "=" pattern) `(orderless-literal . ,(substring pattern 1)))
     ((string-suffix-p "=" pattern) `(orderless-literal . ,(substring pattern 0 -1)))
     ;; Flex matching
     ((string-prefix-p "~" pattern) `(orderless-flex . ,(substring pattern 1)))
     ((string-suffix-p "~" pattern) `(orderless-flex . ,(substring pattern 0 -1)))))
  (add-to-list
   'completion-styles-alist
   '(+vertico-basic-remote
     +vertico-basic-remote-try-completion
     +vertico-basic-remote-all-completions
     "Use basic completion on remote files only"))
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        ;; note that despite override in the name orderless can still be used in
        ;; find-file etc.
        completion-category-overrides '((file (styles +vertico-basic-remote orderless partial-completion)))
        orderless-style-dispatchers '(+vertico-orderless-dispatch)
        orderless-component-separator "[ &]")
  ;; ...otherwise find-file gets different highlighting than other commands
  (set-face-attribute 'completions-first-difference nil :inherit nil))

(defvar +vertico-company-completion-styles '(basic partial-completion orderless)
  "Completion styles for company to use.

The completion/vertico module uses the orderless completion style by default,
but this returns too broad a candidate set for company completion. This variable
overrides `completion-styles' during company completion sessions.")

(defvar +vertico-consult-fd-args nil
  "Shell command and arguments the vertico module uses for fd.")

#+end_src
* ;;;; doom-marginalia ;;;; mod-config ;;;;;;;;;;;;;;;;;;
==================================================================================

marginalia
#+begin_src emacs-lisp :tangle no
(use-package! marginalia
  :hook (doom-first-input . marginalia-mode)
  :init
  (map! :map minibuffer-local-map
        :desc "Cycle marginalia views" "M-A" #'marginalia-cycle)
  :config
  (when (modulep! +icons)
    (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
  (advice-add #'marginalia--project-root :override #'doom-project-root)
  (pushnew! marginalia-command-categories
            '(+default/find-file-under-here . file)
            '(doom/find-file-in-emacsd . project-file)
            '(doom/find-file-in-other-project . project-file)
            '(doom/find-file-in-private-config . file)
            '(doom/describe-active-minor-mode . minor-mode)
            '(flycheck-error-list-set-filter . builtin)
            '(persp-switch-to-buffer . buffer)
            '(projectile-find-file . project-file)
            '(projectile-recentf . project-file)
            '(projectile-switch-to-buffer . buffer)
            '(projectile-switch-project . project-file)))
#+end_src
* ;;;; corfu ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://github.com/minad/corfu][GitHub -corfu ]]

corfu
#+begin_src emacs-lisp
(use-package corfu
;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
;; (corfu-separator ?\s)         ;; Orderless field separator
  (corfu-quit-at-boundary t)     ;; Never quit at completion boundary
  (corfu-quit-no-match t)        ;; Never quit, even if there is no match
  (corfu-preselect 'prompt)      ;; Always preselect the prompt
;; (corfu-preview-current nil)   ;; Disable current candidate preview
;; (corfu-preselect-first nil)   ;; Disable candidate preselection
;; (corfu-on-exact-match nil)    ;; Configure handling of exact matches
  (corfu-scroll-margin 3)        ;; Use scroll margin
  ;; (corfu-auto-prefix 4)
;; Use TAB for cycling, default is `corfu-complete'.
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))
;; Recommended: Enable Corfu globally.
  :init
  (global-corfu-mode))
(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))

(use-package emacs
  :init
;; Enable indentation+completion using the TAB key.
  (setq tab-always-indent 'complete))

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))

;; corfu history
(use-package corfu-history
  :after corfu
  :hook (corfu-mode . (lambda ()
                        (corfu-history-mode 1)
                        (savehist-mode 1)
                        (add-to-list 'savehist-additional-variables 'corfu-history))))

#+end_src

* ;;;; cape ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://github.com/minad/cape][github - cape]]

cape
#+begin_src emacs-lisp
(use-package cape
  :after corfu
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c c p" . completion-at-point) ;; capf
         ("C-c c t" . complete-tag)        ;; etags
         ("C-c c d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c c h" . cape-history)
         ("C-c c f" . cape-file)
         ("C-c c k" . cape-keyword)
         ("C-c c s" . cape-elisp-symbol)
         ("C-c p e" . cape-elisp-block)
         ("C-c c a" . cape-abbrev)
         ("C-c c l" . cape-line)
         ("C-c c w" . cape-dict))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-history)
  (add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;; (add-to-list 'completion-at-point-functions #'cape-abbrev)
  (add-to-list 'completion-at-point-functions #'cape-dict)
  ;; (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
  )

;; ;; grab this from github wiki page
;;      "https://github.com/minad/corfu/wiki#using-cape-to-tweak-and-combine-capfs"
;; (defun my/ignore-elisp-keywords (cand)
;;   (or (not (keywordp cand))
;;       (eq (char-after (car completion-in-region--data)) ?:)))

;; NOTE this is an older version left for reference
;; (defun my/elisp-capf ()
;;   (setq-local completion-at-point-functions
;;               `(,(cape-super-capf
;;                   (cape-capf-predicate
;;                    #'elisp-completion-at-point
;;                    #'my/ignore-elisp-keywords)
;;                   #'cape-dabbrev
;;                   #'cape-file))
;;               cape-dabbrev-min-length 5))
;; (add-hook 'emacs-lisp-mode-hook #'my/elisp-capf)

;; NOTE check to see what difference after shutting this down
;; new capf function
;; (defun dvs/elisp-capf ()
;;    (setq-local completion-at-point-functions
;;         (list (cape-capf-super
;;                #'elisp-completion-at-point
;;                #'cape-dabbrev
;;                #'cape-history
;;                #'cape-keyword
;;                #'cape-elisp-symbol
;;                ;; #'cape-file
;;                ))))
;; (add-hook 'prog-mode-hook #'dvs/elisp-capf)

;; (defun dvs/text-capf ()
;;    (setq-local completion-at-point-functions
;;         (list (cape-capf-super
;;                #'cape-dict
;;                #'cape-dabbrev
;;                #'cape-history
;;                #'cape-elisp-block))))
;; (add-hook 'text-mode-hook #'dvs/text-capf)

#+end_src

* TODO last checked vvvv
* ;;;; consult ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=================================================================================
consult

#+begin_src emacs-lisp
;; Example configuration for Consult
;; (use-package consult
;;   ;; Replace bindings. Lazily loaded due by `use-package'.
;;   :bind (;; C-c bindings in `mode-specific-map'
;;          ("C-c M-x" . consult-mode-command)
;;          ("C-c h" . consult-history)
;;          ("C-c k" . consult-kmacro)
;;          ("C-c m" . consult-man)
;;          ("C-c i" . consult-info)
;;          ([remap Info-search] . consult-info)
;;          ;; C-x bindings in `ctl-x-map'
;;          ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
;;          ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
;;          ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
;;          ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
;;          ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
;;          ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
;;          ;; Custom M-# bindings for fast register access
;;          ("M-#" . consult-register-load)
;;          ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
;;          ("C-M-#" . consult-register)
;;          ;; Other custom bindings
;;          ("M-y" . consult-yank-pop)                ;; orig. yank-pop
;;          ;; M-g bindings in `goto-map'
;;          ("M-g e" . consult-compile-error)
;;          ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
;;          ("M-g g" . consult-goto-line)             ;; orig. goto-line
;;          ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
;;          ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
;;          ("M-g m" . consult-mark)
;;          ("M-g k" . consult-global-mark)
;;          ("M-g i" . consult-imenu)
;;          ("M-g I" . consult-imenu-multi)
;;          ;; M-s bindings in `search-map'
;;          ("M-s d" . consult-find)                  ;; Alternative: consult-fd
;;          ("M-s D" . consult-locate)
;;          ("M-s g" . consult-grep)
;;          ("M-s G" . consult-git-grep)
;;          ("M-s r" . consult-ripgrep)
;;          ("M-s l" . consult-line)
;;          ("M-s L" . consult-line-multi)
;;          ("M-s k" . consult-keep-lines)
;;          ("M-s u" . consult-focus-lines)
;;          ;; Isearch integration
;;          ("M-s e" . consult-isearch-history)
;;          :map isearch-mode-map
;;          ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
;;          ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
;;          ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
;;          ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
;;          ;; Minibuffer history
;;          :map minibuffer-local-map
;;          ("M-s" . consult-history)                 ;; orig. next-matching-history-element
;;          ("M-r" . consult-history)))                ;; orig. previous-matching-history-element


(map! :prefix "M-s i"
      :desc "consult info emacs"
      :n "e" #'consult-info-emacs
      :desc "consult info org"
      :n "o" #'consult-info-org
      :desc "consult-info-completion"
      :n "c" #'consult-info-completion)

(defun consult-info-emacs ()
    "Search through Emacs info pages."
  (interactive)
  (consult-info "emacs" "efaq" "elisp" "cl"))

(defun consult-info-org ()
    "Search through the Org info page."
  (interactive)
  (consult-info "org"))

(defun consult-info-completion ()
    "Search through completion info pages."
  (interactive)
  (consult-info  "orderless" "embark"
                "corfu" "cape" "tempel"))
#+end_src

* ;;;; doom-consult ;;;; mod-config ;;;;;;;;;;;;;;;;;;;;;
=================================================================================
:PROPERTIES:
:VISIBILITY: folded
:END:
[[file:~/.emacs.d/modules/completion/vertico/config.el][doom mod config]]

consult-doom
#+begin_src emacs-lisp :tangle no
;; doom default-mod configuration for Consult
(use-package! consult
  :defer t
  :preface
  (define-key!
    [remap bookmark-jump]                 #'consult-bookmark
    [remap evil-show-marks]               #'consult-mark
    [remap evil-show-jumps]               #'+vertico/jump-list
    [remap evil-show-registers]           #'consult-register
    [remap goto-line]                     #'consult-goto-line
    [remap imenu]                         #'consult-imenu
    [remap Info-search]                   #'consult-info
    [remap locate]                        #'consult-locate
    [remap load-theme]                    #'consult-theme
    [remap man]                           #'consult-man
    [remap recentf-open-files]            #'consult-recent-file
    [remap switch-to-buffer]              #'consult-buffer
    [remap switch-to-buffer-other-window] #'consult-buffer-other-window
    [remap switch-to-buffer-other-frame]  #'consult-buffer-other-frame
    [remap yank-pop]                      #'consult-yank-pop
    [remap persp-switch-to-buffer]        #'+vertico/switch-workspace-buffer)
  :config
  (defadvice! +vertico--consult-recent-file-a (&rest _args)
    "`consult-recent-file' needs to have `recentf-mode' on to work correctly"
    :before #'consult-recent-file
    (recentf-mode +1))

  (setq consult-project-root-function #'doom-project-root
        consult-narrow-key "<"
        consult-line-numbers-widen t
        consult-async-min-input 2
        consult-async-refresh-delay  0.15
        consult-async-input-throttle 0.2
        consult-async-input-debounce 0.1)
  (unless +vertico-consult-fd-args
    (setq +vertico-consult-fd-args
          (if doom-projectile-fd-binary
              (format "%s --color=never -i -H -E .git --regex %s"
                      doom-projectile-fd-binary
                      (if IS-WINDOWS "--path-separator=/" ""))
            consult-find-args)))

  (consult-customize
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file
   +default/search-project +default/search-other-project
   +default/search-project-for-symbol-at-point
   +default/search-cwd +default/search-other-cwd
   +default/search-notes-for-symbol-at-point
   +default/search-emacsd
   consult--source-recent-file consult--source-project-recent-file consult--source-bookmark
   :preview-key "C-SPC")
  (consult-customize
   consult-theme
   :preview-key (list "C-SPC" :debounce 0.5 'any))
  (when (modulep! :lang org)
    (defvar +vertico--consult-org-source
      (list :name     "Org Buffer"
            :category 'buffer
            :narrow   ?o
            :hidden   t
            :face     'consult-buffer
            :history  'buffer-name-history
            :state    #'consult--buffer-state
            :new
            (lambda (name)
              (with-current-buffer (get-buffer-create name)
                (insert "#+title: " name "\n\n")
                (org-mode)
                (consult--buffer-action (current-buffer))))
            :items
            (lambda ()
              (mapcar #'buffer-name
                      (if (featurep 'org)
                          (org-buffer-list)
                        (seq-filter
                         (lambda (x)
                           (eq (buffer-local-value 'major-mode x) 'org-mode))
                         (buffer-list)))))))
    (add-to-list 'consult-buffer-sources '+vertico--consult-org-source 'append)))


(use-package! consult-dir
  :bind (([remap list-directory] . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file))
  :config
  (when (modulep! :tools docker)
    (defun +vertico--consult-dir-docker-hosts ()
      "Get a list of hosts from docker."
      (when (if (>= emacs-major-version 29)
                (require 'tramp-container nil t)
              (setq-local docker-tramp-use-names t)
              (require 'docker-tramp nil t))
        (let ((hosts)
              (docker-query-fn #'docker-tramp--parse-running-containers))
          (when (>= emacs-major-version 29)
            (setq docker-query-fn #'tramp-docker--completion-function))
          (dolist (cand (funcall docker-query-fn))
            (let ((user (unless (string-empty-p (car cand))
                          (concat (car cand) "@")))
                  (host (car (cdr cand))))
              (push (concat "/docker:" user host ":/") hosts)))
          hosts)))

    (defvar +vertico--consult-dir-source-tramp-docker
      `(:name     "Docker"
        :narrow   ?d
        :category file
        :face     consult-file
        :history  file-name-history
        :items    ,#'+vertico--consult-dir-docker-hosts)
      "Docker candiadate source for `consult-dir'.")

    (add-to-list 'consult-dir-sources '+vertico--consult-dir-source-tramp-docker t))

  (add-to-list 'consult-dir-sources 'consult-dir--source-tramp-ssh t)
  (add-to-list 'consult-dir-sources 'consult-dir--source-tramp-local t))

(use-package! consult-flycheck
  :when (modulep! :checkers syntax)
  :after (consult flycheck))
#+end_src
* ;;;; doom-embark ;;;; mod-config ;;;;;;;;;;;;;;;;;;;;;;
=================================================================================

[[file:~/.emacs.d/modules/completion/vertico/config.el][doom mod config]]

#+begin_src emacs-lisp :tangle no
(use-package! embark
  :defer t
  :init
  (setq which-key-use-C-h-commands nil
        prefix-help-command #'embark-prefix-help-command)
  (map! [remap describe-bindings] #'embark-bindings
        "C-;"               #'embark-act  ; to be moved to :config default if accepted
        (:map minibuffer-local-map
         "C-;"               #'embark-act
         "C-c C-;"           #'embark-export
         "C-c C-l"           #'embark-collect
         :desc "Export to writable buffer" "C-c C-e" #'+vertico/embark-export-write)
        (:leader
         :desc "Actions" "a" #'embark-act)) ; to be moved to :config default if accepted
  :config
  (require 'consult)

  (set-popup-rule! "^\\*Embark Export:" :size 0.35 :ttl 0 :quit nil)

  (defadvice! +vertico--embark-which-key-prompt-a (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    :around #'embark-completing-read-prompter
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))
  (cl-nsubstitute #'+vertico-embark-which-key-indicator #'embark-mixed-indicator embark-indicators)
  ;; add the package! target finder before the file target finder,
  ;; so we don't get a false positive match.
  (let ((pos (or (cl-position
                  'embark-target-file-at-point
                  embark-target-finders)
                 (length embark-target-finders))))
    (cl-callf2
        cons
        '+vertico-embark-target-package-fn
        (nthcdr pos embark-target-finders)))
  (defvar-keymap +vertico/embark-doom-package-map
    :doc "Keymap for Embark package actions for packages installed by Doom."
    :parent embark-general-map
    "h" #'doom/help-packages
    "b" #'doom/bump-package
    "c" #'doom/help-package-config
    "u" #'doom/help-package-homepage)
  (setf (alist-get 'package embark-keymap-alist) #'+vertico/embark-doom-package-map)
  (map! (:map embark-file-map
         :desc "Open target with sudo"        "s"   #'doom/sudo-find-file
         (:when (modulep! :tools magit)
          :desc "Open magit-status of target" "g"   #'+vertico/embark-magit-status)
         (:when (modulep! :ui workspaces)
          :desc "Open in new workspace"       "TAB" #'+vertico/embark-open-in-new-workspace))))
#+end_src
* ;;;; doom-drag-stuff ;;;; mod-config ;;;;;;;;;;;;;;;;;;
=================================================================================

#+begin_src emacs-lisp :tangle no
(use-package! drag-stuff
  :defer t
  :init
  (map! "<M-up>"    #'drag-stuff-up
        "<M-down>"  #'drag-stuff-down
        "<M-left>"  #'drag-stuff-left
        "<M-right>" #'drag-stuff-right))
#+end_src
* ;;;; spell ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][Spelling (GNU Emacs Manual)]]
[[https://github.com/d12frosted/flyspell-correct][GitHub - flyspell-correct]]

|---------------------------+-------|
| go-to-next-error          | C-,   |
| auto-correct-word         | C-.   |
| correct-wrapper           | C-;   |
| auto-correct-word         | C-M-i |
| correct-word-before-point | C-c $ |
| correct-word-before-point | z =   |
| add word                  | z g   |
| remove word               | z w   |
|---------------------------+-------|

fly-spell
#+begin_src emacs-lisp
(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

;; this should stop the warnings given in reg elisp docs/test files ;;;;
;; NOTE turned this off to see what it is doing exactly
;; (with-eval-after-load 'flycheck
;;   (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))

(setq flyspell-persistent-highlight nil)

(setq flyspell-issue-message-flag nil)

#+end_src

* ;;;; spray ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://tecosaur.github.io/emacs-config/config.html#spray][tecosaur-config #spray]]

#+name:spray
#+begin_src emacs-lisp
(use-package spray
  ;; :load-path "~/builds/manual-packages/spray"
  :defer t
  :commands spray-mode
  :config
  (setq spray-wpm 220
        spray-height 800))

(defun spray-mode-hide-cursor ()
    "Hide or unhide the cursor as is appropriate."
    (if spray-mode
        (setq-local spray--last-evil-cursor-state evil-normal-state-cursor
                    evil-normal-state-cursor '(nil))
      (setq-local evil-normal-state-cursor spray--last-evil-cursor-state)))
  (add-hook 'spray-mode-hook #'spray-mode-hide-cursor)

(map! "<f6>" #'spray-mode)
(map! :after spray
      :map spray-mode-map
      :nm doom-leader-key nil
      :nm "spc" #'spray-start/stop
      :nm "<return>" #'spray-start/stop
      :nm "f" #'spray-faster
      :nm "s" #'spray-slower
      :nm "t" #'spray-time
      :nm "<right>" #'spray-forward-word
      :nm "h" #'spray-forward-word
      :nm "<left>" #'spray-backward-word
      :nm "l" #'spray-backward-word
      :nm [remap keyboard-quit] 'spray-quit
      :nm "q" #'spray-quit)
;; "Minor modes to toggle off when in spray mode."
(setq spray-unsupported-minor-modes
  '(beacon-mode buffer-face-mode smartparens-mode
		     column-number-mode line-number-mode ))
(setq cursor-in-non-selected-windows nil)
#+end_src

* ;;;; doom-pdf-tools ;;;; mod-config ;;;;;;;;;;;;;;;;;;;
===================================================================================

#+begin_src emacs-lisp :tangle no
(use-package! pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :init
  (after! pdf-annot
    (defun +pdf-cleanup-windows-h ()
      "Kill left-over annotation buffers when the document is killed."
      (when (buffer-live-p pdf-annot-list-document-buffer)
        (pdf-info-close pdf-annot-list-document-buffer))
      (when (buffer-live-p pdf-annot-list-buffer)
        (kill-buffer pdf-annot-list-buffer))
      (let ((contents-buffer (get-buffer "*Contents*")))
        (when (and contents-buffer (buffer-live-p contents-buffer))
          (kill-buffer contents-buffer))))
    (add-hook! 'pdf-view-mode-hook
      (add-hook 'kill-buffer-hook #'+pdf-cleanup-windows-h nil t)))

  :config
  (defadvice! +pdf--install-epdfinfo-a (fn &rest args)
    "Install epdfinfo after the first PDF file, if needed."
    :around #'pdf-view-mode
    (if (and (require 'pdf-info nil t)
             (or (pdf-info-running-p)
                 (ignore-errors (pdf-info-check-epdfinfo) t)))
        (apply fn args)
      ;; If we remain in pdf-view-mode, it'll spit out cryptic errors. This
      ;; graceful failure is better UX.
      (fundamental-mode)
      (message "Viewing PDFs in Emacs requires epdfinfo. Use `M-x pdf-tools-install' to build it")))

  ;; Despite its namesake, this does not call `pdf-tools-install', it only sets
  ;; up hooks, auto-mode-alist/magic-mode-alist entries, global modes, and
  ;; refreshes pdf-view-mode buffers, if any.
  ;;
  ;; I avoid calling `pdf-tools-install' directly because `pdf-tools' is easy to
  ;; prematurely load in the background (e.g. when exporting an org file or by
  ;; packages like org-pdftools). And I don't want pdf-tools to suddenly block
  ;; Emacs and spew out compiler output for a few minutes in those cases. It's
  ;; abysmal UX. The `pdf-view-mode' advice above works around this with a less
  ;; cryptic failure message, at least.
  (pdf-tools-install-noverify)

  ;; For consistency with other special modes
  (map! :map pdf-view-mode-map :gn "q" #'kill-current-buffer)

  (setq-default pdf-view-display-size 'fit-page)
  ;; Enable hiDPI support, but at the cost of memory! See politza/pdf-tools#51
  (setq pdf-view-use-scaling t
        pdf-view-use-imagemagick nil)

  ;; Handle PDF-tools related popups better
  (set-popup-rules!
    '(("^\\*Outline*" :side right :size 40 :select nil)
      ("^\\*Edit Annotation " :quit nil)
      ("\\(?:^\\*Contents\\|'s annots\\*$\\)" :ignore t)))

  ;; The mode-line does serve any useful purpose is annotation windows
  (add-hook 'pdf-annot-list-mode-hook #'hide-mode-line-mode)

  ;; HACK Fix #1107: flickering pdfs when evil-mode is enabled
  (setq-hook! 'pdf-view-mode-hook evil-normal-state-cursor (list nil))

  ;; HACK Refresh FG/BG for pdfs when `pdf-view-midnight-colors' is changed by a
  ;;      theme or with `setq!'.
  ;; TODO PR this upstream?
  (defun +pdf-reload-midnight-minor-mode-h ()
    (when pdf-view-midnight-minor-mode
      (pdf-info-setoptions
       :render/foreground (car pdf-view-midnight-colors)
       :render/background (cdr pdf-view-midnight-colors)
       :render/usecolors t)
      (pdf-cache-clear-images)
      (pdf-view-redisplay t)))
  (put 'pdf-view-midnight-colors 'custom-set
       (lambda (sym value)
         (set-default sym value)
         (dolist (buffer (doom-buffers-in-mode 'pdf-view-mode))
           (with-current-buffer buffer
             (if (get-buffer-window buffer)
                 (+pdf-reload-midnight-minor-mode-h)
               ;; Defer refresh for buffers that aren't visible, to avoid
               ;; blocking Emacs for too long while changing themes.
               (add-hook 'doom-switch-buffer-hook #'+pdf-reload-midnight-minor-mode-h
                         nil 'local))))))

  ;; Silence "File *.pdf is large (X MiB), really open?" prompts for pdfs
  (defadvice! +pdf-suppress-large-file-prompts-a (fn size op-type filename &optional offer-raw)
    :around #'abort-if-file-too-large
    (unless (string-match-p "\\.pdf\\'" filename)
      (funcall fn size op-type filename offer-raw))))
#+end_src

* ;;;; personal-functions ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=================================================================================

*** ;;;; my/kill-current-path

personal-functions
#+begin_src emacs-lisp

;; Show the current location and put it into the kill ring ;;;;
(defun my/kill-current-path (no-line-number)
  ;;     "\"Location\" means the filename and line number (after a colon).
  ;; Use the filename relative to the parent of the current VC root
  ;; directory, so it starts with the main project dir.  With \\[universal-argument],
  ;; the line number is omitted."
  (interactive "P")
  (let* ((file-name (file-relative-name
             buffer-file-name
             (file-name-concat (vc-root-dir) "..")))
     (line-number (line-number-at-pos nil t))
     (location
      (format (if no-line-number "%s" "%s:%s")
          file-name line-number)))
    (kill-new location)
    (message location)))

;; copy current path to kill ring
(map! :leader
      :prefix "k"
      :desc "copy current path to kill-ring" "l" #'my/kill-current-path)
#+end_src
*** ;;;; my/comment-line

#+begin_src emacs-lisp
;; Comment or uncomment the current line
(defun my/comment-line ()
  ;; "Comment or uncomment the current line."
  (interactive)
  (save-excursion
    (if (use-region-p)
        (comment-or-uncomment-region (region-beginning) (region-end))
      (push-mark (beginning-of-line) t t)
      (end-of-line)
      (comment-dwim nil))))
(map! :desc "comment or uncomment"
      :n "M-;" #'my/comment-line)
#+end_src
*** ;;;; mu-back-to-last-edit

#+begin_src emacs-lisp
;; function to get back to last place edited
(defun mu-back-to-last-edit ()
    "Jump back to the last change in the current buffer."
  (interactive)
  (ignore-errors
    (let ((inhibit-message t))
      (undo-only)
      (undo-redo))))
#+end_src

*** ;;;; display workspaces in minibuffer

#+begin_src emacs-lisp
;; this keeps the workspace-bar visable
(after! persp-mode
  (defun display-workspaces-in-minibuffer ()
    (with-current-buffer " *Minibuf-0*"
      (erase-buffer)
      (insert (+workspace--tabline))))
  (run-with-idle-timer 1 t #'display-workspaces-in-minibuffer)
  (+workspace/display))
#+end_src
* ;;;; personal added pkgs ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

added-pkgs
#+begin_src emacs-lisp
;; kill fill path
(use-package! kill-file-path)
  ;; :load-path ":local-repo/kill-file-path")
  ;; :defer t)
;; beacon highlight cursor
(beacon-mode t)

;; plantuml jar configuration
(setq plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
  ;; Enable plantuml-mode for PlantUML files
(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  ;; Enable exporting
(org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))

;; declutter
(use-package! declutter
  :defer t)
(setq declutter-engine-path "/usr/bin/rdrview")
(setq declutter-engine 'rdrview)  ; rdrview will get and render html
;; (setq declutter-engine 'eww)      ; eww will get and render html

;; org-web-tools
(require 'org-web-tools)
;; use to download webpage text content
;; (use-package! org-web-tools)

;; wrap-search
(use-package! wrap-search)


#+end_src
* ;;;; org-rich-yank ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
way of pasting that automatically surrounds the snippet in blocks,
marked with the major mode of where the code came from, and adds a
link to the source file after the block.
[[file:~/.emacs.d/.local/straight/repos/org-rich-yank/README.org][org-rich-yank]]

org-rich-yank
#+BEGIN_SRC emacs-lisp
(use-package org-rich-yank
  :demand t
  :bind (:map org-mode-map
              ("C-M-y" . org-rich-yank)))
#+END_SRC
* ;;;; my-keybindings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

my-keybindings
#+begin_src emacs-lisp
;; org-keybindings

(map! :after org
      :leader
      :prefix "o"
      :desc "open org config"
      :n "i" (lambda () (interactive) (find-file "~/.config/doom/config.org"))
      ;; jump to notes.org
      :desc "open org notes"
      :n "n" (lambda () (interactive) (find-file "~/org/notes.org"))
      ;; ;; jump to org folder
      ;; :desc "open org folder"
      ;; :n "o" (lambda () (interactive) (find-file "~/org/"))
      ;; jump to org organizer
      :desc "open org organizer"
      :n "0" (lambda () (interactive) (find-file "~/org/organizer.org"))
      ;; jump to org wiki folder
      :desc "open org wiki"
      :n "k" (lambda () (interactive) (find-file "~/org/wiki/")))

;; open config in named workspace
(map! :after org
      :leader
      :prefix "o"
      :desc "open org config"
      :n "o" #'=config)
;; wrap-search-again
(map! :leader
      :prefix "s"
      :desc "wrap-search" "W" #'wrap-search-again)
;; wrap-search
(map! :leader
      :prefix "s"
      :desc "wrap-search" "w" #'wrap-search)
;; read url's readable content to org buffer
(map! :leader
      :prefix "e"
      :desc "url's readable-content to org" "u" #'org-web-tools-read-url-as-org)
;; list-processes
(map! :leader
      :prefix "l"
      :desc "center scrolling" "p" #'list-processes)
;; centered-cursor-mode
(map! :leader
      :prefix "t"
      :desc "center scrolling" "C" #'prot/scroll-center-cursor-mode)
;; adds selected text to chosen buffer
(map! :leader
      :prefix "i"
      :desc "append to buffer" "t" #'append-to-buffer)
;; adds entire buffer to chosen buffer
(map! :leader
      :prefix "i"
      :desc "insert buffer at point" "b" #'insert-buffer)
;; use mpv to open video files ;;;;
(map! :leader
      :prefix "v"
      :desc "play file with mpv" "f" #'mpv-play)

;; use mpv to open video url ;;;;
(map! :leader
      :prefix "v"
      :desc "play link with mpv" "l" #'mpv-play-url)
;; dictioary-lookup-definition better than spc s t
(map! "M-#" #'dictionary-lookup-definition)
;; (map! "<f7>" #'dictionary-lookup-definition)
;; fetches selected text and gives you a list of synonyms to replace it with
(map! "M-&" #'powerthesaurus-lookup-word-dwim)
(map! "<f8>" #'which-key-turn-page)
;; close other window ;;;;
(map! "C-1" #'delete-other-windows)
;; switch other window
(map! "C-2" #'switch-to-buffer-other-window)
(map! "C-c )" #'embrace-commander)
;; ;; start modes
;; (map! (:prefix ("C-c m" . "mode command")
;;       "o" #'org-mode
;;       "e" #'emacs-lisp-mode
;;       "f" #'fundamental-mode))
;; Make `v$' not include the newline character ;;;;
(general-define-key
:states '(visual state)
"$" '(lambda ()
        (interactive)
        (evil-end-of-line)))
#+end_src

* ;;;; Doom-keybindings ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=================================================================================

Doom-Keybindings
#+begin_src emacs-lisp :tangle no
;; Highjacks backspace to delete up to nearest column multiple of `tab-width' at
;; a time. If you have smartparens enabled, it will also:
;;  a) balance spaces inside brackets/parentheses ( | ) -> (|)
;;  b) close empty multiline brace blocks in one step:
;;     {
;;     |
;;     }
;;     becomes {|}
;;  c) refresh smartparens' :post-handlers, so SPC and RET expansions work even
;;     after a backspace.
;;  d) properly delete smartparen pairs when they are encountered, without the
;;     need for strict mode.
;;  e) do none of this when inside a string
(advice-add #'delete-backward-char :override #'+default--delete-backward-char-a)

;; HACK Makes `newline-and-indent' continue comments (and more reliably).
;;      Consults `doom-point-in-comment-functions' to detect a commented region
;;      and uses that mode's `comment-line-break-function' to continue comments.
;;      If neither exists, it will fall back to the normal behavior of
;;      `newline-and-indent'.
;;
;;      We use an advice here instead of a remapping because many modes define
;;      and remap to their own newline-and-indent commands, and tackling all
;;      those cases was judged to be more work than dealing with the edge cases
;;      on a case by case basis.
(defadvice! +default--newline-indent-and-continue-comments-a (&rest _)
  "A replacement for `newline-and-indent'.

Continues comments if executed from a commented line. Consults
`doom-point-in-comment-functions' to determine if in a comment."
  :before-until #'newline-and-indent
  (interactive "*")
  (when (and +default-want-RET-continue-comments
             (doom-point-in-comment-p)
             (functionp comment-line-break-function))
    (funcall comment-line-break-function nil)
    t))

;; This section is dedicated to "fixing" certain keys so that they behave
;; sensibly (and consistently with similar contexts).

;; Consistently use q to quit windows
(after! tabulated-list
  (define-key tabulated-list-mode-map "q" #'quit-window))

;;; Keybind schemes

;; Custom help keys -- these aren't under `+bindings' because they ought to be
;; universal.
(define-key! help-map
  ;; new keybinds
  "'"    #'describe-char
  "u"    #'doom/help-autodefs
  "E"    #'doom/sandbox
  "M"    #'doom/describe-active-minor-mode
  "O"    #'+lookup/online
  "T"    #'doom/toggle-profiler
  "V"    #'doom/help-custom-variable
  "W"    #'+default/man-or-woman
  "C-k"  #'describe-key-briefly
  "C-l"  #'describe-language-environment
  "C-m"  #'info-emacs-manual

  ;; Unbind `help-for-help'. Conflicts with which-key's help command for the
  ;; <leader> h prefix. It's already on ? and F1 anyway.
  "C-h"  nil

  ;; replacement keybinds
  ;; replaces `info-emacs-manual' b/c it's on C-m now
  "r"    nil
  "rr"   #'doom/reload
  "rt"   #'doom/reload-theme
  "rp"   #'doom/reload-packages
  "rf"   #'doom/reload-font
  "re"   #'doom/reload-env

  ;; make `describe-bindings' available under the b prefix which it previously
  ;; occupied. Add more binding related commands under that prefix as well
  "b"    nil
  "bb"   #'describe-bindings
  "bi"   #'which-key-show-minor-mode-keymap
  "bm"   #'which-key-show-major-mode
  "bt"   #'which-key-show-top-level
  "bf"   #'which-key-show-full-keymap
  "bk"   #'which-key-show-keymap

  ;; replaces `apropos-documentation' b/c `apropos' covers this
  "d"    nil
  "db"   #'doom/report-bug
  "dc"   #'doom/goto-private-config-file
  "dC"   #'doom/goto-private-init-file
  "dd"   #'doom-debug-mode
  "df"   #'doom/help-faq
  "dh"   #'doom/help
  "dl"   #'doom/help-search-load-path
  "dL"   #'doom/help-search-loaded-files
  "dm"   #'doom/help-modules
  "dn"   #'doom/help-news
  "dN"   #'doom/help-search-news
  "dpc"  #'doom/help-package-config
  "dpd"  #'doom/goto-private-packages-file
  "dph"  #'doom/help-package-homepage
  "dpp"  #'doom/help-packages
  "ds"   #'doom/help-search-headings
  "dS"   #'doom/help-search
  "dt"   #'doom/toggle-profiler
  "du"   #'doom/help-autodefs
  "dv"   #'doom/version
  "dx"   #'doom/sandbox

  ;; replaces `apropos-command'
  "a"    #'apropos
  "A"    #'apropos-documentation
  ;; replaces `describe-copying' b/c not useful
  "C-c"  #'describe-coding-system
  ;; replaces `Info-got-emacs-command-node' b/c redundant w/ `Info-goto-node'
  "F"    #'describe-face
  ;; replaces `view-hello-file' b/c annoying
  "h"    nil
  ;; replaces `view-emacs-news' b/c it's on C-n too
  "n"    #'doom/help-news
  ;; replaces `help-with-tutorial', b/c it's less useful than `load-theme'
  "t"    #'load-theme
  ;; replaces `finder-by-keyword' b/c not useful
  "p"    #'doom/help-packages
  ;; replaces `describe-package' b/c redundant w/ `doom/help-packages'
  "P"    #'find-library)

(after! which-key
  (let ((prefix-re (regexp-opt (list doom-leader-key doom-leader-alt-key))))
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) d\\'" prefix-re))
                  nil . "doom")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) r\\'" prefix-re))
                  nil . "reload")
                which-key-replacement-alist)
    (cl-pushnew `((,(format "\\`\\(?:<\\(?:\\(?:f1\\|help\\)>\\)\\|C-h\\|%s h\\) b\\'" prefix-re))
                  nil . "bindings")
                which-key-replacement-alist)))


(when (modulep! +bindings)
  ;; Make M-x harder to miss
  (define-key! 'override
    "M-x" #'execute-extended-command
    "A-x" #'execute-extended-command)

  ;; A Doom convention where C-s on popups and interactive searches will invoke
  ;; ivy/helm/vertico for their superior filtering.
  (when-let (command (cond ((modulep! :completion ivy)
                            #'counsel-minibuffer-history)
                           ((modulep! :completion helm)
                            #'helm-minibuffer-history)
                           ((modulep! :completion vertico)
                            #'consult-history)))
    (define-key!
      :keymaps (append +default-minibuffer-maps
                       (when (modulep! :editor evil +everywhere)
                         '(evil-ex-completion-map)))
      "C-s" command))

  ;; Smarter C-a/C-e for both Emacs and Evil. C-a will jump to indentation.
  ;; Pressing it again will send you to the true bol. Same goes for C-e, except
  ;; it will ignore comments+trailing whitespace before jumping to eol.
  (map! :gi "C-a" #'doom/backward-to-bol-or-indent
        :gi "C-e" #'doom/forward-to-last-non-comment-or-eol
        ;; Standardizes the behavior of modified RET to match the behavior of
        ;; other editors, particularly Atom, textedit, textmate, and vscode, in
        ;; which ctrl+RET will add a new "item" below the current one and
        ;; cmd+RET (Mac) / meta+RET (elsewhere) will add a new, blank line below
        ;; the current one.

        ;; C-<mouse-scroll-up>   = text scale increase
        ;; C-<mouse-scroll-down> = text scale decrease
        [C-down-mouse-2] (cmd! (text-scale-set 0))

        ;; auto-indent on newline by default
        :gi [remap newline] #'newline-and-indent
        ;; insert literal newline
        :i  "S-RET"         #'+default/newline
        :i  [S-return]      #'+default/newline
        :i  "C-j"           #'+default/newline

        ;; Add new item below current (without splitting current line).
        :gi "C-RET"         #'+default/newline-below
        :gn [C-return]      #'+default/newline-below
        ;; Add new item above current (without splitting current line)
        :gi "C-S-RET"       #'+default/newline-above
        :gn [C-S-return]    #'+default/newline-above

#+end_src

* ;;;; which-key ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
 the paging commands do not work reliably with the minibuffer option.
 Use the side window on the bottom option if you need paging.

#+begin_src emacs-lisp
;; (setq which-key-popup-type 'minibuffer)
;; (setq which-key-popup-type 'side-window)
;; (setq which-key-popup-type 'frame)

;; (which-key-setup-minibuffer)
(which-key-setup-side-window-bottom)
;;(which-key-setup-side-window-right)
;;(which-key-setup-side-window-right-bottom)
;; (setq which-key-use-C-h-commands nil)
(setq which-key-idle-delay 1.5)
#+end_src

* ;;;; transparency ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

transparency
#+begin_src emacs-lisp
(defun toggle-transparency ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
              100)
         '(85 . 45) '(100 . 100)))))
(map! :leader
     (:prefix ("t" . "toggle")
      :desc "toggle transparency" "T" #'toggle-transparency))
#+end_src

* ;;;; dired ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

dired
#+begin_src emacs-lisp
(setq dired-dwim-target t)

(after! dired
(use-package dired-preview))

;;     :hook
;;     (dired-mode . dired-preview-mode)))
;; (dired-preview-global-mode 1) ;; NOTE will try toggle

(add-hook 'dired-mode-hook
          'display-line-numbers-mode)
(add-hook 'dired-mode-hook
          'dired-hide-details-mode)

(map! :leader
      :prefix "t"
      :desc "dired preview mode" "p" 'dired-preview-mode)
#+end_src

* ;;;; org-mpv-notes ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://github.com/bpanthi977/org-mpv-notes][GitHub - org-mpv-notes]]

| mpv-insert-playback-position  | M-n i   |
| org-mpv-notes-insert-note     | M-n M-i |
| mpv-revert-seek               | M-n u   |
| org-mpv-notes-save-screenshot | M-n s   |
| org-mpv-notes-open            | M-n o   |
| mpv-kill                      | M-n k   |
| org-mpv-notes-screenshot-ocr  | M-n M-s |

org-mpv-notes
#+begin_src emacs-lisp
(after! org
(use-package org-mpv-notes
  :defer t))
    ;; "Org minor mode for Note taking alongside audio and video.
    ;; Uses mpv.el to control mpv process"
;; mpv.el ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; from https://github.com/kljohann/mpv.el/wiki
;;  To create a mpv: link type that is completely analogous to file: links but opens using mpv-play instead,
(defun org-mpv-notes-complete-link (&optional arg)
  "Provide completion to mpv: link in `org-mode'.
ARG is passed to `org-link-complete-file'."
  (replace-regexp-in-string
   "file:" "mpv:"
   (org-link-complete-file arg)
   t t))

(org-link-set-parameters "mpv"
                         :complete #'org-mpv-notes-complete-link
                         :follow #'org-mpv-notes-open
                         :export #'org-mpv-notes-export)

(add-hook 'org-open-at-point-functions #'mpv-seek-to-position-at-point)

;; mpv commands ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; frame step forward
(with-eval-after-load 'mpv
  (defun mpv-frame-step ()
    "Step one frame forward."
    (interactive)
    (mpv--enqueue '("frame-step") #'ignore)))


;; frame step backward
(with-eval-after-load 'mpv
  (defun mpv-frame-back-step ()
    "Step one frame backward."
    (interactive)
    (mpv--enqueue '("frame-back-step") #'ignore)))


;; mpv take a screenshot
(with-eval-after-load 'mpv
  (defun mpv-screenshot ()
    "Take a screenshot"
    (interactive)
    (mpv--enqueue '("screenshot") #'ignore)))


;; mpv show osd
(with-eval-after-load 'mpv
  (defun mpv-osd ()
    "Show the osd"
    (interactive)
    (mpv--enqueue '("set_property" "osd-level" "3") #'ignore)))


;; add a newline in the current document
(defun end-of-line-and-indented-new-line ()
  (interactive)
  (end-of-line)
  (newline-and-indent))

;; mpv-hydra ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defhydra hydra-mpv (global-map "<f5>")
  "
  ^Seek^                    ^Actions^                ^General^
  ^^^^^^^^---------------------------------------------------------------------------
  _h_: seek back -5         _,_: back frame          _i_: insert playback position
  _j_: seek back -60        _._: forward frame       _n_: insert a newline
  _k_: seek forward 60      _SPC_: pause             _s_: take a screenshot
  _l_: seek forward 5       _q_: quit mpv            _o_: show the osd
  ^
  "
  ("h" mpv-seek-backward "-5")
  ("j" mpv-seek-backward "-60")
  ("k" mpv-seek-forward "60")
  ("l" mpv-seek-forward "5")
  ("," mpv-frame-back-step)
  ("." mpv-frame-step)
  ("SPC" mpv-pause)
  ("q" mpv-kill)
  ("s" mpv-screenshot)
  ("i" mpv-insert-playback-position)
  ("o" mpv-osd)
  ("n" end-of-line-and-indented-new-line))

#+end_src

* ;;;; web url-handlers ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

web-url-handlers
#+begin_src emacs-lisp
;;;; mpv-play-url
;; https://gist.github.com/bsless/19ca4a37eee828b1b62c84971181f506#file-yt-mpv-el
;;;###autoload
(defun c1/mpv-play-url (&optional url &rest _args)
  ;; "Start mpv for URL."
  (interactive"sURL: ")
  (mpv-start url))

;; https://mbork.pl/2022-10-24_Playing_videos_from_the_last_position_in_mpv
;; (defun dvs/browse-url-with-mpv (url)
;;   "Open URL using mpv."
;;   (mpv-start url))


(setq browse-url-handlers
    '(("\\.\\(gifv?\\|avi\\|AVI\\|mp[4g]\\|MP4\\|MP3\\|webm\\)$" . c1/mpv-play-url)
     ("^https?://\\(www\\.youtube\\.com\\|youtu\\.be\\)/" . c1/mpv-play-url)
     ("^https?://\\(odysee\\.com\\|rumble\\.com\\)/" . c1/mpv-play-url)
     ("^https?://\\(off-guardian.org\\|.substack\\.com\\|tomluongo\\.me\\)/" . dvs-eww)
     ("^https?://\\(emacs.stackexchange.com\\|news.ycombinator.com\\)/" . dvs-eww)
     ("." . browse-url-xdg-open)))
#+end_src

* ;;;; ytdl youtube-download ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=================================================================================

ytdl
#+begin_src emacs-lisp
(use-package ytdl
  :defer t
  :init
  (setq ytdl-music-folder (expand-file-name "~/music")
        ytdl-video-folder (expand-file-name "~/videos"))
  :config
  (setq ytdl-always-query-default-filename 'never))
#+end_src

* ;;;; deft Doom-mod-config ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

     |------+---------|
     | deft | spc n d |
     |------+---------|
deft
#+begin_src emacs-lisp :tangle no
(use-package deft
  :commands deft
  :init
  (setq deft-default-extension "org"
        ;; de-couples filename and note title:
        deft-use-filename-as-title nil
        deft-use-filter-string-for-filename t
        ;; disable auto-save
        deft-auto-save-interval -1.0
        ;; converts the filter string into a readable file-name using kebab-case:
        deft-file-naming-rules
        '((noslash . "-")
          (nospace . "-")
          (case-fn . downcase)))
  :config
  (add-to-list 'deft-extensions "tex")
  (add-hook 'deft-mode-hook #'doom-mark-buffer-as-real-h)
  ;; start filtering immediately
  (set-evil-initial-state! 'deft-mode 'insert)
  (map! :map deft-mode-map
        :n "gr"  #'deft-refresh
        :n "C-s" #'deft-filter
        :i "C-n" #'deft-new-file
        :i "C-m" #'deft-new-file-named
        :i "C-d" #'deft-delete-file
        :i "C-r" #'deft-rename-file
        :n "r"   #'deft-rename-file
        :n "a"   #'deft-new-file
        :n "A"   #'deft-new-file-named
        :n "d"   #'deft-delete-file
        :n "D"   #'deft-archive-file
        :n "q"   #'kill-current-buffer
        :localleader
        "RET" #'deft-new-file-named
        "a"   #'deft-archive-file
        "c"   #'deft-filter-clear
        "d"   #'deft-delete-file
        "f"   #'deft-find-file
        "g"   #'deft-refresh
        "l"   #'deft-filter
        "n"   #'deft-new-file
        "r"   #'deft-rename-file
        "s"   #'deft-toggle-sort-method
        "t"   #'deft-toggle-incremental-search))
#+end_src

* ;;;; deft ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

deft
#+begin_src emacs-lisp
(setq deft-extensions '("md" "txt" "tex" "org"))
(setq deft-directory "~/org/")
(setq deft-recursive t)
(setq deft-use-filename-as-title t)
(setq deft-strip-summary-regexp
      (concat "\\("
          "[\n\t]" ;; blank
          "\\|^#\\+[[:alpha:]_]+:.*$" ;; org-mode metadata
          "\\|^:PROPERTIES:\n\\(.+\n\\)+:END:\n"
          "\\)"))
#+end_src
* ;;;; elfeed Doom-mod-config ;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

#+begin_src emacs-lisp :tangle no

;; This is an opinionated workflow that turns Emacs into an RSS reader, inspired
;; by apps Reeder and Readkit. It can be invoked via `=rss'. Otherwise, if you
;; don't care for the UI you can invoke elfeed directly with `elfeed'.

(defvar +rss-split-direction 'below
  "What direction to pop up the entry buffer in elfeed.")

(defvar +rss-enable-sliced-images t
  "Automatically slice images shown in elfeed-show-mode buffers, making them
easier to scroll through.")

(defvar +rss-workspace-name "*rss*"
  "Name of the workspace that contains the elfeed buffer.")

;;
;; Packages

(use-package! elfeed
  :commands elfeed
  :init
  (setq elfeed-db-directory (concat doom-local-dir "elfeed/db/")
        elfeed-enclosure-default-dir (concat doom-local-dir "elfeed/enclosures/"))
  :config
  (setq elfeed-search-filter "@2-week-ago "
        elfeed-show-entry-switch #'pop-to-buffer
        elfeed-show-entry-delete #'+rss/delete-pane
        shr-max-image-proportion 0.8)

  (set-popup-rule! "^\\*elfeed-entry"
    :size 0.75 :actions '(display-buffer-below-selected)
    :select t :quit nil :ttl t)

  (make-directory elfeed-db-directory t)

  ;; Ensure elfeed buffers are treated as real
  (add-hook! 'doom-real-buffer-functions
    (defun +rss-buffer-p (buf)
      (string-match-p "^\\*elfeed" (buffer-name buf))))

  ;; Enhance readability of a post
  (add-hook 'elfeed-show-mode-hook #'+rss-elfeed-wrap-h)
  (add-hook! 'elfeed-search-mode-hook
    (add-hook 'kill-buffer-hook #'+rss-cleanup-h nil 'local))

  ;; Large images are annoying to scroll through, because scrolling follows the
  ;; cursor, so we force shr to insert images in slices.
  (when +rss-enable-sliced-images
    (setq-hook! 'elfeed-show-mode-hook
      shr-put-image-function #'+rss-put-sliced-image-fn
      shr-external-rendering-functions '((img . +rss-render-image-tag-without-underline-fn))))

  ;; Keybindings
  (after! elfeed-show
    (define-key! elfeed-show-mode-map
      [remap next-buffer]     #'+rss/next
      [remap previous-buffer] #'+rss/previous))
  (when (modulep! :editor evil +everywhere)
    (evil-define-key 'normal elfeed-search-mode-map
      "q" #'elfeed-kill-buffer
      "r" #'elfeed-search-update--force
      (kbd "M-RET") #'elfeed-search-browse-url)
    (map! :map elfeed-show-mode-map
          :n "gc" nil
          :n "gc" #'+rss/copy-link)))



(use-package! elfeed-org
  :when (modulep! +org)
  :after elfeed
  :preface
  (setq rmh-elfeed-org-files (list "elfeed.org"))
  :config
  (elfeed-org)
  (defadvice! +rss-skip-missing-org-files-a (&rest _)
    :before '(elfeed rmh-elfeed-org-mark-feed-ignore elfeed-org-export-opml)
    (unless (file-name-absolute-p (car rmh-elfeed-org-files))
      (let* ((default-directory org-directory)
             (files (mapcar #'expand-file-name rmh-elfeed-org-files)))
        (dolist (file (cl-remove-if #'file-exists-p files))
          (message "elfeed-org: ignoring %S because it can't be read" file))
        (setq rmh-elfeed-org-files (cl-remove-if-not #'file-exists-p files))))))

(use-package! elfeed-goodies
  :after elfeed
  :config
  (elfeed-goodies/setup))

#+end_src
* ;;;; elfeed ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

Elfeed
#+begin_src emacs-lisp
(setq rmh-elfeed-org-files (list "~/.config/doom/elfeed-feeds.org"))

;; "Watch a video from URL in MPV" ;;
(defun elfeed-v-mpv (url)
  (async-shell-command (format "mpv %s" url)))

(defun elfeed-view-mpv ()
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (elfeed-v-mpv it))
   (mapc #'elfeed-search-update-entry entries)
   (unless (use-region-p) (forward-line))))

;; youtube downloader ;;;;
(defun yt-dl-it (url)
  (let ((default-directory "~/Videos"))
    (async-shell-command (format "yt-dlp %s" url))))

(defun elfeed-youtube-dl ()
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (yt-dl-it it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

;; browse with eww ;;;;
(defun elfeed-eww-open ()
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (eww-browse-url it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

;; Declutter-it ;;;;
(defun declutter-it ()
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (declutter it))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

;; youtube-sub-extractor ;;;;
(defun yt-sub-ex ()
  (interactive)
  (let ((entries (elfeed-search-selected)))
    (cl-loop for entry in entries
             do (elfeed-untag entry 'unread)
             when (elfeed-entry-link entry)
             do (youtube-sub-extractor-extract-subs-at-point))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

;; reddit show comments ;;;;
(defun my/elfeed-reddit-show-commments (&optional link)
  (interactive)
  (let* ((entry (if (eq major-mode 'elfeed-show-mode)
                    elfeed-show-entry
                  (elfeed-search-selected :ignore-region)))
         (link (if link link (elfeed-entry-link entry))))
    (reddigg-view-comments link)))

;; define tag "star" ;;;;
(defun elfeed-expose (function &rest args)
    "Return an interactive version of FUNCTION, exposing it to the user."
  (lambda () (interactive) (apply function args)))
(defalias 'elfeed-toggle-star
       (elfeed-expose #'elfeed-search-toggle-all 'star))

;; keymap ;;
(map! :leader
      :prefix "o"
      :desc "open elfeed" "e" #'=rss)

(map! :after elfeed
      :map elfeed-search-mode-map
      :n [remap save-buffer] 'elfeed-tube-save
      :n "8" #'elfeed-toggle-star
      :n "a" #'elfeed-curate-edit-entry-annoation
      :n "d" #'elfeed-youtube-dl
      :n "e" #'elfeed-eww-open
      :n "F" #'elfeed-tube-fetch
      :n "m" #'elfeed-curate-toggle-star
      :n "R" #'elfeed-summary
      ;; :n "u" #'declutter-it
      :n "T" #'my/elfeed-reddit-show-commments
      :n "v" #'elfeed-view-mpv
      :n "x" #'elfeed-curate-export-entries
      :n "Y" #'yt-sub-ex)
(map! :after elfeed
      :map elfeed-show-mode-map
      :n [remap save-buffer] 'elfeed-tube-save
      :n "a" #'elfeed-curate-edit-entry-annoation
      :n "d" #'yt-dl-it
      :n "e" #'elfeed-eww-open
      :n "F" #'elfeed-tube-fetch
      :n "m" #'elfeed-curate-toggle-star
      :n "x" #'elfeed-kill-buffer)

;;;; set default filter ;;;;
;; (setq-default elfeed-search-filter "@1-week-ago +unread ")
(setq-default elfeed-search-filter "@4-week-ago ")

#+end_src
* ;;;; elfeed-curate ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

elfeed-curate
#+begin_src emacs-lisp
(after! elfeed
(use-package elfeed-curate))

(setq elfeed-curate-star-tag "cur8")

;; NOTE use this as an example of default way of keybinding
;; (after! elfeed
;;   ;; Your custom Elfeed configuration.
;;   ;; elfeed-curate key bindings:
;;   (define-key elfeed-search-mode-map "a" #'elfeed-curate-edit-entry-annoation)
;;   (define-key elfeed-search-mode-map "x" #'elfeed-curate-export-entries)
;;   (define-key elfeed-search-mode-map "m" #'elfeed-curate-toggle-star)

;;   (define-key elfeed-show-mode-map   "a" #'elfeed-curate-edit-entry-annoation)
;;   (define-key elfeed-show-mode-map   "m" #'elfeed-curate-toggle-star)
;;   (define-key elfeed-show-mode-map   "q" #'kill-buffer-and-window))
#+end_src

* ;;;; elfeed-tube ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://github.com/karthink/elfeed-tube][GitHub - elfeed-tube]]

#+begin_src emacs-lisp
(after! elfeed
(use-package elfeed-tube
  :demand t
  :config
  (elfeed-tube-setup)))

(after! elfeed
(use-package elfeed-tube-mpv))
#+end_src

* ;;;; elfeed-summary ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================
:PROPERTIES:
:VISIBILITY: folded
:END:

 [[https://github.com/SqrtMinusOne/elfeed-summary][GitHub - elfeed-summary]]

 |------------+------------------------------------------------------------|
 | Keybinding | Description                                                |
 |------------+------------------------------------------------------------|
 | RET        | Open thing under the cursor (a feed, search, or a group).  |
 | M-RET      | Open thing under the cursor, but always include read items |
 | q          | Quit the summary buffer                                    |
 | r          | Refresh the summary buffer                                 |
 | R          | Run update for elfeed feeds                                |
 | u          | Toggle showing only unread entries                         |
 | U          | Mark everything in the entry under the cursor as read      |
 |------------+------------------------------------------------------------|

Elfeed-summary
#+begin_src emacs-lisp
(use-package elfeed-summary
  :defer t
  :after elfeed)
(setq elfeed-summary-settings
      '((group (:title . "today")
               (:elements
                (search
               (:filter . "@1-day-ago")
               (:title . ""))))
        (group (:title . "Daily")
               (:elements
                (query . day))
               (:hide t))
        (group (:title . "searches Days")
         (:elements
          (group
           (:title . "2 days")
           (:elements
            (search
             (:filter . "@2-day-ago")
             (:title . "")))
             (:hide t))
          (group
           (:title . "3 days")
           (:elements
            (search
             (:filter . "@3-day-ago")
             (:title . "")))
             (:hide t))
          (group
           (:title . "4 days")
           (:elements
            (search
             (:filter . "@4-day-ago")
             (:title . "")))
             (:hide t))
          (group
           (:title . "1 week")
           (:elements
            (search
             (:filter . "@7-day-ago")
             (:title . "")))
             (:hide t))
          (group
           (:title . "2 weeks")
           (:elements
            (search
             (:filter . "@2-weeks-ago")
             (:title . "")))
             (:hide t))
          (group
           (:title . "3 weeks")
           (:elements
            (search
             (:filter . "@3-weeks-ago")
             (:title . "")))
             (:hide t))
          (group
           (:title . "1 month")
           (:elements
            (search
             (:filter . "@1-month-ago")
             (:title . "")))
             (:hide t))
          (group
           (:title . "2 months")
           (:elements
            (search
             (:filter . "@2-month-ago")
             (:title . "")))
             (:hide t))
           (group
           (:title . "6 months")
           (:elements
           (search
             (:filter . "@6-months-ago +unread")
             (:title . "+unread"))
           (search
             (:filter . "@6-months-ago")
             (:title . "+all")))))
             (:hide t))
        ;; ...

        ;; ...
        (group (:title . "Substack")
               (:elements
                (query . sub))
               (:hide t))
        (group (:title . "forums")
               (:elements
                (query . forum))
               (:hide t))
        (group (:title . "Humor")
               (:elements
                (query . fun))
               (:hide t))
        (group (:title . "Repos")
               (:elements
                (query . github))
               (:hide t))
        (group (:title . "Doom")
               (:elements
                (query . doom))
               (:hide t))
        (group (:title . "Emacs")
               (:elements
                (query . emacs))
               (:hide t))
        (group (:title . "Linux")
               (:elements
                (query . linux))
               (:hide t))
        (group (:title . "Corbett")
               (:elements
                (query . corbet))
               (:hide t))
        (group (:title . "stared")
               (:elements
                (search
               (:filter . "+star")
               (:title . "")))
               (:hide t))
        (group (:title . "Videos")
               (:elements
                (group
                 (:title . "truth")
                 (:elements
                  (query . (and video truth)))
                 (:hide t))
                (group
                 (:title . "humor")
                 (:elements
                  (query . (and video fun)))
                 (hide t))
                (group
                 (:title . "real")
                 (:elements
                  (query . (and video real)))
                 (hide t))
                (group
                 (:title . "history")
                 (:elements
                  (query . (and video hist)))))
               (:hide t))
        (group (:title . "searches all")
               (:elements
                (group
                 (:title . "ungrouped")
                 (:elements :misc))))))
(setq elfeed-summary-other-window t)

(map! :map elfeed-summary-mode-map
      :desc "unjam elfeed"
      :n "m" #'elfeed-unjam)
#+end_src

* ;;;; eww ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

EWW
#+begin_src emacs-lisp

;; found in manual for eww w/spc h R ;;;;
;; (setq eww-retrieve-command
;;      '("brave" "--headless" "--dump-dom"))

;; open links in eww
(defun dvs-eww (url &optional arg)
    "Pass URL to appropriate client"
  (interactive
   (list (browse-url-interactive-arg "URL: ")
         current-prefix-arg))
  (let ((url-parsed (url-generic-parse-url url)))
    (pcase (url-type url-parsed)
            (_ (eww url arg)))))

;;
;; Produce buffer with RSS/Atom links from source
(defvar prot-eww--occur-feed-regexp
  (concat "\\(rss\\|atom\\)\\+xml.\\(.\\|\n\\)"
          ".*href=[\"']\\(.*?\\)[\"']")
    "Regular expression to match web feeds in HTML source.")
(defvar prot-common-url-regexp
  (concat
   "~?\\<\\([-a-zA-Z0-9+&@#/%?=~_|!:,.;]*\\)"
   "[.@]"
   "\\([-a-zA-Z0-9+&@#/%?=~_|!:,.;]+\\)\\>/?")
  "Regular expression to match (most?) URLs or email addresses.")
;;;###autoload
(defun prot-eww-find-feed ()
    "Produce buffer with RSS/Atom links from XML source."
  (interactive)
  (let* ((url (or (plist-get eww-data :start)
                  (plist-get eww-data :contents)
                  (plist-get eww-data :home)
                  (plist-get eww-data :url)))
         (title (or (plist-get eww-data :title) url))
         (source (plist-get eww-data :source))
         (buf-name (format "*feeds: %s # eww*" title)))
    (with-temp-buffer
      (insert source)
      (occur-1 prot-eww--occur-feed-regexp "\\3" (list (current-buffer)) buf-name))
    ;; Handle relative URLs, so that we get an absolute URL out of them.
    ;; Findings like "rss.xml" are not particularly helpful.
    ;;
    ;; NOTE 2021-03-31: the base-url heuristic may not always be
    ;; correct, though it has worked in all cases I have tested it on.
    (when (get-buffer buf-name)
      (with-current-buffer (get-buffer buf-name)
        (let ((inhibit-read-only t)
              (base-url (replace-regexp-in-string "\\(.*/\\)[^/]+\\'" "\\1" url)))
          (goto-char (point-min))
          (unless (re-search-forward prot-common-url-regexp nil t)
            (re-search-forward ".*")
            (replace-match (concat base-url "\\&"))))))))

;; https://emacs.stackexchange.com/questions/4089/
;; eww use pdf-tools
;; The behavior can be enabled or disabled by
;; setq-ing the variable tv/prefer-pdf-tools to t or nil
(defvar tv/prefer-pdf-tools (fboundp 'pdf-view-mode))
(defun tv/start-pdf-tools-if-pdf ()
  (when (and tv/prefer-pdf-tools
             (eq doc-view-doc-type 'pdf))
    (pdf-view-mode)))

(add-hook 'doc-view-mode-hook 'tv/start-pdf-tools-if-pdf)
#+end_src

* ;;;; osm ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

Open source map
#+begin_src emacs-lisp
(use-package osm
  :defer t
  :bind ("C-c m" . osm-prefix-map) ;; Alternative: `osm-home'
  :custom
  ;; Take a look at the customization group `osm' for more options.
  (osm-server 'default) ;; Configure the tile server
  (osm-copyright t)     ;; Display the copyright information
  :init
  ;; Load Org link support
  (with-eval-after-load 'org
    (require 'osm-ol)))
#+end_src
* ;;;; dwim-shell-command ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

dwim-shell-command
#+begin_src emacs-lisp
(use-package dwim-shell-command
  :defer t
  :bind (([remap shell-command] . dwim-shell-command)
         :map dired-mode-map
         ([remap dired-do-async-shell-command] . dwim-shell-command)
         ([remap dired-do-shell-command] . dwim-shell-command)
         ([remap dired-smart-shell-command] . dwim-shell-command))
  :config
;; pdf to text ;;;;
(defun dwim-shell-commands-pdf-to-txt ()
  "Convert pdf to txt."
  (interactive)
  (dwim-shell-command-on-marked-files
   "pdf to txt"
   "pdftotext -layout '<<f>>' '<<fne>>.txt'"
   :utils "pdftotext"))
;; Ping duckduckgo.com ;;;;
(defun dwim-shell-commands-ping-google ()
  (interactive)
  (dwim-shell-command-on-marked-files
   "Ping google.com"
   "ping -c 3 google.com"
   :utils "ping"
   :focus-now t))
;; Stream clipboard URL using mpv ;;;;
(defun dwim-shell-commands-mpv-stream-clipboard-url ()
  (interactive)
  (dwim-shell-command-on-marked-files
   "Streaming"
   "mpv --geometry=30%x30%+100%+0% \"<<cb>>\""
   :utils "mpv"
   :no-progress t
   :error-autofocus t
   :silent-success t))
;; Clone git URL in clipboard to "~/builds/" ;;;;
(defun dwim-shell-commands-git-clone-clipboard-url-to-builds ()
  (interactive)
  (cl-assert (string-match-p "^\\(http\\|https\\|ssh\\)://" (current-kill 0)) nil "No URL in clipboard")
  (let* ((url (current-kill 0))
         (download-dir (expand-file-name "~/builds/"))
         (project-dir (concat download-dir (file-name-base url)))
         (default-directory download-dir))
    (when (or (not (file-exists-p project-dir))
              (when (y-or-n-p (format "%s exists.  delete?" (file-name-base url)))
                (delete-directory project-dir t)
                t))
      (dwim-shell-command-on-marked-files
       (format "Clone %s" (file-name-base url))
       (format "git clone %s" url)
       :utils "git"
       :on-completion (lambda (buffer)
                        (kill-buffer buffer)
                        (dired project-dir)))))))
(require 'dwim-shell-commands)
#+end_src

* ;;;; v-term ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

v-term
#+begin_src emacs-lisp
(use-package vterm
  :defer t
  :custom
(vterm-module-cmake-args "-DUSE_SYSTEM_LIBVTERM=yes")
(vterm-always-compile-module t))

;; vterm-toggle ;;;;
(map! "<f2>" #'vterm-toggle
      "C-<f2>" #'vterm-toggle-cd)

#+end_src
* ;;;; engine-mode ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
|------------+-------|
| web-search | C-x / |
|------------+-------|

engine-mode
#+begin_src emacs-lisp
(use-package engine-mode
  :defer t
  :config
  (engine-mode t))
(defengine nitter
"https://nitter.net/search?f=tweets"
  :keybinding "n")
(defengine gist
  "https://gist.github.com/search?ref=simplesearch&q=%s"
  :keybinding "i")
(defengine github
  "https://github.com/search?ref=simplesearch&q=%s"
  :keybinding "h")
(defengine presearch
  "https://presearch.com/search?q=%s"
  :keybinding "p")
(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "g")
(defengine brave
  "https://search.brave.com/search?q=%s"
  :keybinding "b")
(defengine melpa
  "https://melpa.org/#/%s"
  :keybinding "m")
(defengine archwiki
  "https://wiki.archlinux.org/index.php?search="
  :keybinding "a")
(defengine aur
  "https://aur.archlinux.org/packages/?K="
  :keybinding "u")
#+end_src

* ;;;; you-tube-sub-extractor  ;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================

yt-sub-ext
#+begin_src emacs-lisp
(use-package youtube-sub-extractor
  :defer t
  :commands (youtube-sub-extractor-extract-subs)
  :config
  (map! :map youtube-sub-extractor-subtitles-mode-map
      :desc "copy timestamp URL" :n "RET" #'youtube-sub-extractor-copy-ts-link
      :desc "browse at timestamp" :n "C-c C-o" #'youtube-sub-extractor-browse-ts-link))

(setq youtube-sub-extractor-timestamps 'left-side-text)

(require 'thingatpt)
(defun youtube-sub-extractor-extract-subs-at-point ()
   "extract subtitles from a youtube link at point"
(interactive)
(youtube-sub-extractor-extract-subs (thing-at-point-url-at-point)))

(map! :leader
      :prefix "v"
      :desc "YouTube subtitles" "E" #'youtube-sub-extractor-extract-subs)

(map! :leader
      :prefix "v"
      :desc "YouTube subtitles at point" "e" #'youtube-sub-extractor-extract-subs-at-point)
#+end_src

* ;;;; Markdown ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
==================================================================================
[[https://jblevins.org/projects/markdown-mode/][GitHub -Markdown Mode for Emacs]]

;; use C-c / for menu

markdown-mode
#+begin_src emacs-lisp
(use-package markdown-mode
  :defer t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))
;; start pandoc with every markdown file ;;;;
(add-hook 'markdown-mode-hook 'pandoc-mode)

;; default markdown-mode's markdown-live-preview-mode to vertical split
(setq markdown-split-window-direction 'right)
#+end_src

* ;;;; language-tool ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=====================================================================================

language-tool
#+begin_src emacs-lisp
(use-package languagetool
  :defer t
  :commands (languagetool-check
             languagetool-clear-suggestions
             languagetool-correct-at-point
             languagetool-correct-buffer
             languagetool-set-language
             languagetool-server-mode
             languagetool-server-start
             languagetool-server-stop)
  :config
  (setq languagetool-java-arguments '("-Dfile.encoding=UTF-8"
                                      "-cp" "/usr/share/languagetool:/usr/share/java/languagetool/*")
        languagetool-console-command "org.languagetool.commandline.Main"
        languagetool-server-command "org.languagetool.server.HTTPServer"))

(map! :after org
      :map org-mode-map
      :leader
      (:prefix ("l" . "link")
       :desc "insert file link" "k" 'languagetool-check
       :desc "langtool correct buffer" "b" 'languagetool-correct-buffer
       :desc "langtool check done" "d" 'languagetool-clear-suggestions
       :desc "langtool server start" "s" 'languagetool-server-start
       :desc "langtool server mode" "m" 'languagetool-server-mode
       :desc "langtool sever stop" "f" 'languagetool-server-stop))

#+end_src

* ;;;; denote ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
================================================================================

[[https://www.youtube.com/watch?v=mLzFJcLpDFI][denote youtube demo]]
[[https://git.sr.ht/~protesilaos/denote denote][git.sr.ht]]
[[file:~/builds/manual-packages/denote/README.org][denote readme]]

denote
#+begin_src emacs-lisp
(use-package! denote
  :defer t
  :config
  ;; (denote-rename-buffer-mode)
  (require 'denote-org-dblock))

(setq denote-directory (expand-file-name "~/org/denote/"))
(setq denote-known-keywords '("emacs" "package" "info" "perman"))
(setq denote-infer-keywords t)
(setq denote-sort-keywords t)
;; (setq denote-rename-buffer-mode t);; NOTE if the above works this can go
;; (setq denote-prompts '(title keywords))
;; ;; Pick dates, where relevant, with Org's advanced interface:
;; (setq denote-date-prompt-use-org-read-date t)
;; ;; By default, we do not show the context of links.  We just display
;; ;; file names.  This provides a more informative view.
;; (setq denote-backlinks-show-context t)

;; map! "spc d n" #'denote
(map! :leader
      :prefix "d"
      :desc "denote"
      :n "n" #'denote)
#+end_src

* ;;;; yeetube ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
=================================================================================

yeetube
#+begin_src emacs-lisp
(require 'yeetube)
(setq yeetube-download-directory "~/Videos")

(map! :map yeetube-mode-map
     [remap evil-ret] #'yeetube-play)

(map! :leader
      :prefix "s"
      :desc "search yeetube" "y" #'yeetube-search)
#+end_src
* ;;;; logos ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================
[[file:~/builds/manual-packages/logos/][logos repo]]

logos
#+begin_src emacs-lisp
;; TODO check to see if this works or not
(use-package logos
  :defer t
  :init
;; If you want to use outlines instead of page breaks (the ^L):
(setq logos-outlines-are-pages t)
;; This is the default value for the outlines:
(setq logos-outline-regexp-alist
      `((emacs-lisp-mode . "^;;;+ ")
        (org-mode . "^\\*+ +")
        (markdown-mode . "^\\#+ +")))
;; These apply when `logos-focus-mode' is enabled.  Their value is
;; buffer-local.
(setq-default logos-hide-cursor nil
              logos-hide-mode-line t
              logos-hide-buffer-boundaries t
              logos-hide-fringe t
              logos-variable-pitch nil
              logos-buffer-read-only t
              logos-scroll-lock nil
              logos-olivetti t))

;; Also check this manual for `logos-focus-mode-hook'.  It lets you
;; extend `logos-focus-mode'.

(let ((map global-map))
  (define-key map [remap narrow-to-region] #'logos-narrow-dwim)
  (define-key map [remap forward-page] #'logos-forward-page-dwim)
  (define-key map [remap backward-page] #'logos-backward-page-dwim)
  (define-key map (kbd "<f9>") #'logos-focus-mode))

;; Also consider adding keys to `logos-focus-mode-map'.  They will take
;; effect when `logos-focus-mode' is enabled.

(use-package! olivetti
  :defer t
  :init
(setq olivetti-body-width 0.7
      olivetti-minimum-body-width 80
      olivetti-recall-visual-line-mode-entry-state t))

(setq shr-max-width fill-column)

#+end_src

* ;;;; hl-todo Doom-Mod-Config ;;;;;;;;;;;;;;;;;;;;;;;;;;
===================================================================================

hl-to-do-mode
#+begin_src emacs-lisp :tangle no
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :hook (yaml-mode . hl-todo-mode)
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        '(;; For reminders to change or add something at a later date.
          ("TODO" warning bold)
          ;; For code (or code paths) that are broken, unimplemented, or slow,
          ;; and may become bigger problems later.
          ("FIXME" error bold)
          ;; For code that needs to be revisited later, either to upstream it,
          ;; improve it, or address non-critical issues.
          ("REVIEW" font-lock-keyword-face bold)
          ;; For code smells where questionable practices are used
          ;; intentionally, and/or is likely to break in a future update.
          ("HACK" font-lock-constant-face bold)
          ;; For sections of code that just gotta go, and will be gone soon.
          ;; Specifically, this means the code is deprecated, not necessarily
          ;; the feature it enables.
          ("DEPRECATED" font-lock-doc-face bold)
          ;; Extra keywords commonly found in the wild, whose meaning may vary
          ;; from project to project.
          ("NOTE" success bold)
          ("BUG" error bold)
          ("XXX" font-lock-constant-face bold)))


  (defadvice! +hl-todo-clamp-font-lock-fontify-region-a (fn &rest args)
    "Fix an `args-out-of-range' error in some modes."
    :around #'hl-todo-mode
    (letf! (defun font-lock-fontify-region (beg end &optional loudly)
             (funcall font-lock-fontify-region (max beg 1) end loudly))
      (apply fn args)))

  ;; Use a more primitive todo-keyword detection method in major modes that
  ;; don't use/have a valid syntax table entry for comments.
  (add-hook! '(pug-mode-hook haml-mode-hook)
    (defun +hl-todo--use-face-detection-h ()
      "Use a different, more primitive method of locating todo keywords."
      (set (make-local-variable 'hl-todo-keywords)
           '(((lambda (limit)
                (let (case-fold-search)
                  (and (re-search-forward hl-todo-regexp limit t)
                       (memq 'font-lock-comment-face (ensure-list (get-text-property (point) 'face))))))
              (1 (hl-todo-get-face) t t))))
      (when hl-todo-mode
        (hl-todo-mode -1)
        (hl-todo-mode +1)))))

#+end_src
* ;;;; typing exercises ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
====================================================================================

typing-exercise
#+begin_src emacs-lisp
(use-package monkeytype
  :defer t)
(defun my/monkeytype-mode-hook ()
    "Hooks for monkeytype-mode."
  (evil-escape-mode -1)
  (flyspell-mode -0)
  (text-scale-set 3)
  (corfu-mode -0)
  (evil-insert -1)
  (+zen/toggle))

(add-hook 'monkeytype-mode-hook #'my/monkeytype-mode-hook)

#+end_src

* ;;;; browser-history ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
====================================================================================

browser-history
#+begin_src emacs-lisp

(use-package browser-hist
  :defer t
  :init
  (require 'embark) ; load Embark before the command (if you're using it)
  :config
  (setq browser-hist-default-browser 'brave)
  :commands (browser-hist-search))
(setq browser-hist-default-browser 'brave)
(setq browser-hist-db-paths
        '((brave . "~/.config/BraveSoftware/Brave-Browser/Default/History")))

(map! :leader
      :prefix "s"
      :desc "search browser history"
      :n "h" #'browser-hist-search)


#+end_src

* ;;;; view-text-as-info ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
====================================================================================

#+begin_src emacs-lisp
(defun view-text-file-as-info-manual ()
 (interactive)
 (require 'ox-texinfo)
 (let ((org-export-with-broken-links 'mark))
   (pcase (file-name-extension (buffer-file-name))
     (`"info"
      (info (buffer-file-name)))
     (`"texi"
      (info (org-texinfo-compile (buffer-file-name))))
     (`"org"
      (info (org-texinfo-export-to-info)))
     (`"md"
      (let ((org-file-name (concat (file-name-sans-extension (buffer-file-name)) ".org")))
        (apply #'call-process "pandoc" nil standard-output nil
               `("-f" "markdown"
                 "-t" "org"
                 "-o" , org-file-name
                 , (buffer-file-name)))
        (with-current-buffer (find-file-noselect org-file-name)
          (info (org-texinfo-export-to-info)))))
     (_ (user-error "Don't know how to convert `%s' to an `info' file"
                    (file-name-extension (buffer-file-name)))))))

(global-set-key (kbd "C-x x v") 'view-text-file-as-info-manual)

#+end_src
